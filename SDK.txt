Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 132]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x104, Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x164, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x168, Size: 4]
	GameStateBase* GameState;//[Offset: 0x16c, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x170, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x174, Size: 4]
	Level*[] Levels;//[Offset: 0x178, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x184, Size: 12]
	Level* CurrentLevel;//[Offset: 0x194, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x198, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x19c, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1ac, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x704, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74a, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2bbd2f4

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x158, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x168, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x16c, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x178, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x178, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x178, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1c0, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1c8, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x590, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x274, Size: 4]
	float MinDrawDistance;//[Offset: 0x278, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x27c, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x280, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x284, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x288, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x289, Size: 1]
	enum LightmapType;//[Offset: 0x28a, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28b, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28b, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28b, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28b, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28c, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28c, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28c, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28c, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28d, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28d, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28d, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28d, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28d, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28d, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28d, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28d, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28e, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x290, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x2a4, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x2a9, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x2ac, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x2bc, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cd, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cd, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cd, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cd, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cd, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cd, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cd, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ce, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ce, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ce, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ce, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ce, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ce, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ce, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ce, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cf, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cf, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cf, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cf, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cf, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2d0, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2d2, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2d3, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2d4, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2d8, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2dc, Size: 4]
	int VisibilityId;//[Offset: 0x2e0, Size: 4]
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2f0, Size: 4]
	float BoundsScale;//[Offset: 0x2f8, Size: 4]
	float OCBoundsScale;//[Offset: 0x2fc, Size: 4]
	int OCBoundsExtent;//[Offset: 0x300, Size: 4]
	float LastSubmitTime;//[Offset: 0x304, Size: 4]
	float LastRenderTime;//[Offset: 0x308, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x30c, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x310, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x314, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x320, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x334, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x350, Size: 320]
	delegate OnComponentHit;//[Offset: 0x490, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x49c, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x4a8, Size: 12]
	delegate OnComponentWake;//[Offset: 0x4b4, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x4c0, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x4d8, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x4e4, Size: 12]
	delegate OnClicked;//[Offset: 0x4f0, Size: 12]
	delegate OnReleased;//[Offset: 0x4fc, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x508, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x514, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x520, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x52c, Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x544, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x548, Size: 60]
	void WakeRigidBody(FName BoneName);// 0x4467208
	void WakeAllRigidBodies();// 0x1fcf428
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x4467170
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x44670ec
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4467074
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x4466ff4
	void SetSimulatePhysics(bool bSimulate);// 0x4466f6c
	void SetRenderInMono(bool bValue);// 0x4466eec
	void SetRenderInMainPass(bool bValue);// 0x4466e6c
	void SetRenderCustomDepth(bool bValue);// 0x4466dec
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x4466d6c
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4466cec
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4466bd8
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4466ab4
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4466ab4
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x44669a0
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x446688c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4466754
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4466754
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x44666d4
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x4466654
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x44665d0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x4466548
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x4466378
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x44661cc
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x4466108
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x4466044
	void SetMassScale(FName BoneName, float InMassScale);// 0x4465f78
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4465e5c
	void SetMaskFilter(int InMaskFilter);// 0x4465de4
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x4465d28
	void SetLockedAxis(byte LockedAxis);// 0x4465ca8
	void SetLinearDamping(float InDamping);// 0x2269744
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x1fd3400
	void SetEnableGravity(bool bGravityEnabled);// 0x4465c20
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x4465ba0
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x4465b28
	void SetDrawDyeing(bool bNewDrawOutline);// 0x4465aa8
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4465a30
	void SetCustomDepthStencilValue(int Value);// 0x44659b8
	void SetCullDistance(float NewCullDistance);// 0x4465940
	void SetConstraintMode(byte ConstraintMode);// 0x44658c0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x44657fc
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x446577c
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x44656fc
	void SetCollisionObjectType(byte Channel);// 0x446567c
	void SetCollisionEnabled(byte NewType);// 0x44655fc
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x446553c
	void SetCastShadow(bool NewCastShadow);// 0x4423c34
	void SetBoundsScale(float NewBoundsScale);// 0x44654c4
	void SetAngularDamping(float InDamping);// 0x437a3fc
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x44653f8
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x446531c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4465214
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x4465138
	void SetAllMassScale(float InMassScale);// 0x224b95c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x446504c
	void PutRigidBodyToSleep(FName BoneName);// 0x4464fd4
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x4464f0c
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x4464e38
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x4464dc4
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4464ad4
	bool K2_IsQueryCollisionEnabled();// 0x4464a94
	bool K2_IsPhysicsCollisionEnabled();// 0x4464a54
	bool K2_IsCollisionEnabled();// 0x4464a1c
	int K2_GetMoveIgnoreMask();// 0x4464a00
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4464980
	bool IsOverlappingActor(const Actor* Other);// 0x4464900
	bool IsGravityEnabled();// 0x1fccbb0
	bool IsAnyRigidBodyAwake();// 0x44648d0
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x446480c
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4464748
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x446470c
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4464628
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4464594
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4464500
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4464454
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4464454
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x4464388
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4464274
	int GetNumMaterials();// 0x436b1e0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4464198
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4464110
	float GetMassScale(FName BoneName);// 0x4464088
	float GetMass();// 0x4464058
	int GetMaskFilter();// 0x446403c
	float GetLinearDamping();// 0x446400c
	Vector GetInertiaTensor(FName BoneName);// 0x4463f70
	byte GetCollisionResponseToChannel(byte Channel);// 0x4463ee8
	FName GetCollisionProfileName();// 0x4463ea8
	byte GetCollisionObjectType();// 0x1f5ab0c
	byte GetCollisionEnabled();// 0x4463e78
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4463d48
	Vector GetCenterOfMass(FName BoneName);// 0x4463cb4
	float GetAngularDamping();// 0x4463c84
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x4463bb8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4463aec
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4463a64
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x44639a4
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x44638e4
	void ClearMoveIgnoreComponents();// 0x44638b4
	void ClearMoveIgnoreActors();// 0x44638a0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4463818
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x44635d4
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x44636e4
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x44635d4
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4463430
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x446328c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4463174
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x446305c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x4462f44
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x4462e2c
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x4462d14
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4462bfc
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4462ac0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x44629a8

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xcc, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xd4, Size: 4]
	FName AttachSocketName;//[Offset: 0xd8, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xe0, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xec, Size: 12]
	Vector RelativeLocation;//[Offset: 0x120, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x12c, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x138, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1b0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x1c0, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x1c8, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1cc, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x1d0, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x1d8, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x1e0, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x1e8, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ec, Size: 1]
	byte Mobility;//[Offset: 0x1ed, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x1f0, Size: 4]
	byte DetailMode;//[Offset: 0x1f4, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x240, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x20d0784
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4477c64
	void SetWorldScale3D(Vector NewScale);// 0x4477bf4
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x4477b1c
	void SetRelativeScale3D(Vector NewScale3D);// 0x4477aa4
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x44779d0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x44778b0
	void ResetRelativeTransform();// 0x447789c
	void OnRep_Visibility(bool OldValue);// 0x447781c
	void OnRep_Transform();// 0x4477808
	void OnRep_AttachSocketName();// 0x44777f4
	void OnRep_AttachParent();// 0x44777f4
	void OnRep_AttachChildren();// 0x44777e0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4477600
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4477478
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44772bc
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4477140
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476f60
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476de4
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476c28
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476aac
	Transform K2_GetComponentToWorld();// 0x4476a4c
	Vector K2_GetComponentScale();// 0x4476a04
	Rotator K2_GetComponentRotation();// 0x44769bc
	Vector K2_GetComponentLocation();// 0x4476974
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x4476824
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x447663c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x44764e0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476300
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476184
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4476008
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4475e8c
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4475d10
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4475b30
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44759ac
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4475830
	bool IsVisible();// 0x1f26bac
	bool IsSimulatingPhysics(FName BoneName);// 0x44757a8
	bool IsAnySimulatingPhysics();// 0x4475778
	Vector GetUpVector();// 0x4475730
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4475634
	Rotator GetSocketRotation(FName InSocketName);// 0x4475598
	Quat GetSocketQuaternion(FName InSocketName);// 0x44754fc
	Vector GetSocketLocation(FName InSocketName);// 0x4475460
	Vector GetRightVector();// 0x4475418
	Transform GetRelativeTransform();// 0x44753b8
	PhysicsVolume* GetPhysicsVolume();// 0x4475390
	void GetParentComponents(out SceneComponent*[] Parents);// 0x44752c4
	int GetNumChildrenComponents();// 0x447529c
	Vector GetForwardVector();// 0x444d0b0
	Vector GetComponentVelocity();// 0x447524c
	Transform GetComponentTransformViewTranslatedBP();// 0x4475210
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x4475110
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4474fec
	SceneComponent* GetChildComponent(int ChildIndex);// 0x4474f6c
	FName GetAttachSocketName();// 0x4474f50
	SceneComponent* GetAttachParent();// 0x4474f34
	FName[] GetAllSocketNames();// 0x4474e74
	bool DoesSocketExist(FName InSocketName);// 0x4474dec
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x4474d14

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	NetReplicateState NetReplicate;//[Offset: 0x60, Size: 12]
	FName[] ComponentTags;//[Offset: 0x6c, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x7c, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x84, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x93, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x95, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x95, Size: 1]
	enum CreationMethod;//[Offset: 0x97, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x98, Size: 12]
	delegate OnComponentActivated;//[Offset: 0xa8, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xb4, Size: 12]
	void ToggleActive();// 0x20e1f4c
	void SetTickGroup(byte NewTickGroup);// 0x4334708
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4334688
	void SetIsReplicated(bool ShouldReplicate);// 0x4334608
	void SetComponentTickInterval(float TickInterval);// 0x4334590
	void SetComponentTickEnabled(bool bEnabled);// 0x4334508
	void SetAutoActivate(bool bNewAutoActivate);// 0x1f602e0
	void SetActive(bool bNewActive, bool bReset);// 0x4334430
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x43343b0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4334330
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void OnRep_Replicates();// 0x433431c
	void OnRep_IsActive();// 0x4334308
	void K2_DestroyComponent(Object* Object);// 0x4334290
	bool IsComponentTickEnabled();// 0x4334268
	bool IsBeingDestroyed();// 0x4334248
	bool IsActive();// 0x23ccf78
	Actor* GetOwner();// 0x433422c
	float GetComponentTickInterval();// 0x4334204
	void ForceNetUpdate();// 0x20e7d58
	void Deactivate();// 0x20e1f14
	bool ComponentHasTag(FName Tag);// 0x4334184
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4334104
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4334084
	void Activate(bool bReset);// 0x1f60258

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: NetReplicateState
	bool bNetReplicateMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 4]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x60, Size: 12]
	byte CollisionReponse;//[Offset: 0x6c, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x70, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xac, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xb0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1f0, Size: 16]
	float BuildScale;//[Offset: 0x200, Size: 4]
	Vector BuildScale3D;//[Offset: 0x204, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	byte SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	MaterialInterface* ReplaceMaterial;//[Offset: 0x28, Size: 4]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 12]
	float LightmapUVDensity;//[Offset: 0x48, Size: 4]
	int LightMapResolution;//[Offset: 0x4c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 4]
	int LODForCollision;//[Offset: 0x60, Size: 4]
	float CullingScreenSize;//[Offset: 0x64, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf4, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x100, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x11c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x128, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x138, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x13c, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x148, Size: 4]
	int GetNumSections(int InLOD);// 0x4495efc
	int GetNumLODs();// 0x4495ed4
	int GetMaterialIndex(FName MaterialSlotName);// 0x4495e54
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4495dd4
	BoxSphereBounds GetBounds();// 0x4495d80
	Box GetBoundingBox();// 0x4495d2c

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x4420e20
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x4420cb8
	PhysicalMaterial* GetPhysicalMaterial();// 0x261c7e0
	Material* GetBaseMaterial();// 0x4420c90

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d2, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d3, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d4, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d4, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d4, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d4, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d4, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d4, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d6, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d7, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d7, Size: 1]
	float MaxDisplacement;//[Offset: 0x7d8, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7dc, Size: 1]
	int EditorX;//[Offset: 0x7e0, Size: 4]
	int EditorY;//[Offset: 0x7e4, Size: 4]
	int EditorPitch;//[Offset: 0x7e8, Size: 4]
	int EditorYaw;//[Offset: 0x7ec, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f0, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x7fc, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x808, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x814, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x814, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x814, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x814, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x814, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x814, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x814, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x815, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x815, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x815, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x818, Size: 4]
	byte BlendableLocation;//[Offset: 0x81c, Size: 1]
	int BlendablePriority;//[Offset: 0x820, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	byte RefractionMode;//[Offset: 0x825, Size: 1]
	float RefractionDepthBias;//[Offset: 0x828, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82c, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82c, Size: 1]
	Guid stateID;//[Offset: 0x830, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8d8, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	byte CompressionSettings;//[Offset: 0x4d, Size: 1]
	byte Filter;//[Offset: 0x4e, Size: 1]
	byte LODGroup;//[Offset: 0x4f, Size: 1]
	byte CrunchSetting;//[Offset: 0x50, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x54, Size: 4]
	byte BasisSetting;//[Offset: 0x58, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x304, Size: 4]
	int Priority;//[Offset: 0x308, Size: 4]
	float FluidFriction;//[Offset: 0x30c, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2dc, Size: 1]
	Color BrushColor;//[Offset: 0x2e0, Size: 4]
	int PolyFlags;//[Offset: 0x2e4, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 1]
	Model* Brush;//[Offset: 0x2ec, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2f0, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x2f8, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	NetReplicateState NetReplicate;//[Offset: 0x60, Size: 12]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6d, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6d, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6d, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6d, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6d, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6d, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x72, Size: 1]
	byte RemoteRole;//[Offset: 0x73, Size: 1]
	Actor* Owner;//[Offset: 0x74, Size: 4]
	byte WorldParallelismID;//[Offset: 0x78, Size: 1]
	FName NetDriverName;//[Offset: 0x80, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x88, Size: 52]
	float InitialLifeSpan;//[Offset: 0xbc, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xc0, Size: 56]
	byte Role;//[Offset: 0xf8, Size: 1]
	byte NetDormancy;//[Offset: 0xf9, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xfa, Size: 1]
	int InputPriority;//[Offset: 0xfc, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x104, Size: 4]
	int NetTag;//[Offset: 0x108, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x110, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x114, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x118, Size: 4]
	float NetPriority;//[Offset: 0x120, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12a, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12a, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12a, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12a, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12b, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12b, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12b, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x12c, Size: 1]
	Pawn* Instigator;//[Offset: 0x13c, Size: 4]
	Actor*[] Children;//[Offset: 0x140, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x14c, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x150, Size: 12]
	FName[] Layers;//[Offset: 0x168, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x174, Size: 8]
	FName[] Tags;//[Offset: 0x17c, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x188, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x19c, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1a8, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1b4, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1cc, Size: 12]
	delegate OnClicked;//[Offset: 0x1d8, Size: 12]
	delegate OnReleased;//[Offset: 0x1e4, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f0, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1fc, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x208, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x214, Size: 12]
	delegate OnActorHit;//[Offset: 0x220, Size: 12]
	delegate OnDestroyed;//[Offset: 0x22c, Size: 12]
	delegate OnEndPlay;//[Offset: 0x238, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2bc, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2c8, Size: 12]
	bool WasRecentlyRendered(float Tolerance);// 0x433138c
	void UserConstructionScript();// 0x2bbd2f4
	void TearOff();// 0x1f88e48
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x43312d0
	void SetTickGroup(byte NewTickGroup);// 0x4331258
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x43311d8
	void SetReplicates(bool bInReplicates);// 0x4331158
	void SetReplicateMovement(bool bInReplicateMovement);// 0x43310d0
	void SetOwner(Actor* NewOwner);// 0x1fc9b1c
	void SetNetDormancy(byte NewDormancy);// 0x4331058
	void SetLifeSpan(float InLifespan);// 0x4330fd8
	void SetActorTickInterval(float TickInterval);// 0x4330f60
	void SetActorTickEnabled(bool bEnabled);// 0x4330ee0
	void SetActorScale3D(Vector NewScale3D);// 0x4330e70
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4330e00
	void SetActorHiddenInGame(bool bNewHidden);// 0x4330d78
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x4330cf8
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1fd32ec
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1fd336c
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void ReceiveReInitForReplay();// 0x2bbd2f4
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bbd2f4
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2bbd2f4
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2bbd2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bbd2f4
	void ReceiveDestroyed();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bbd2f4
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2bbd2f4
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2bbd2f4
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2bbd2f4
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2bbd2f4
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2bbd2f4
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2bbd2f4
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2bbd2f4
	void ReceiveActorEndCursorOver();// 0x2bbd2f4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2bbd2f4
	void ReceiveActorBeginCursorOver();// 0x2bbd2f4
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4330be4
	void OnRep_ReplicateMovement();// 0x20a5ce8
	void OnRep_ReplicatedMovement();// 0x1f2cc40
	void OnRep_Owner();// 0x20e1f4c
	void OnRep_Instigator();// 0x1f90004
	void OnRep_AttachmentReplication();// 0x20534bc
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4330a48
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x23d07e8
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4330980
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4330790
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x43306c0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43304e0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x433035c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43301e0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4330010
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432fe90
	void K2_OnReset();// 0x2bbd2f4
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2bbd2f4
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2bbd2f4
	SceneComponent* K2_GetRootComponent();// 0x432fe74
	Rotator K2_GetActorRotation();// 0x432fd80
	Vector K2_GetActorLocation();// 0x432fd40
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x432fc40
	void K2_DestroyComponent(ActorComponent* Component);// 0x432fbc8
	void K2_DestroyActor();// 0x1f5c848
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x432f9e8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x432f808
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x432f6b4
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x432f560
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432f380
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432f1fc
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432f080
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432eea0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432ed20
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x432eba4
	bool IsOverlappingActor(const Actor* Other);// 0x432eb24
	bool IsChildActor();// 0x432eafc
	bool IsActorTickEnabled();// 0x432ead4
	bool IsActorBeingDestroyed();// 0x432eab4
	bool HasAuthority();// 0x432ea8c
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x432ea0c
	Vector GetVelocity();// 0x432e9bc
	Transform GetTransform();// 0x432e970
	bool GetTickableWhenPaused();// 0x432e948
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x432e8c8
	byte GetRole();// 0x432e8a0
	byte GetRemoteRole();// 0x432e884
	ChildActorComponent* GetParentComponent();// 0x432e85c
	Actor* GetParentActor();// 0x432e834
	Actor* GetOwner();// 0x432e818
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x432e74c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x432e638
	float GetLifeSpan();// 0x432e608
	Controller* GetInstigatorController();// 0x432e5e0
	Pawn* GetInstigator();// 0x432e5b8
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x432e2b4
	float GetInputAxisValue(const FName InputAxisName);// 0x432e234
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x432df3c
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x432debc
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x432de3c
	float GetGameTimeSinceCreation();// 0x432de14
	float GetDotProductTo(const Actor* OtherActor);// 0x432dd94
	float GetDistanceTo(const Actor* OtherActor);// 0x432dd14
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x432dbc0
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x432dab8
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x432da38
	FName GetAttachParentSocketName();// 0x432d9f8
	Actor* GetAttachParentActor();// 0x432d9d0
	void GetAttachedActors(out Actor*[] OutActors);// 0x432d904
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x432d7e8
	Vector GetActorUpVector();// 0x432d774
	float GetActorTimeDilation();// 0x432d74c
	float GetActorTickInterval();// 0x432d724
	Vector GetActorScale3D();// 0x432d6dc
	Vector GetActorRightVector();// 0x432d668
	Vector GetActorRelativeScale3D();// 0x432d620
	Vector GetActorForwardVector();// 0x432d5ac
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x432d4cc
	bool GetActorEnableCollision();// 0x432d4ac
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x432d384
	void ForceNetUpdate();// 0x20e7d58
	void ForceNetConsider();// 0x1f26a78
	void FlushNetDormancy();// 0x432d370
	void EnableInput(PlayerController* PlayerController);// 0x432d2f0
	void DisableInput(PlayerController* PlayerController);// 0x432d270
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x432d1f0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x432d170
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x432d0f0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x432cf30
	bool ActorHasTag(FName Tag);// 0x432cea8

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x584, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x588, Size: 4]
	Vector PrePivot;//[Offset: 0x58c, Size: 12]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x43ace00
	bool WasControllerKeyJustPressed(Key Key);// 0x43ace00
	bool IsControllerKeyDown(Key Key);// 0x43ace00
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x43acc80
	Vector GetControllerVectorKeyState(Key Key);// 0x43ac97c
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x43ac89c
	float GetControllerKeyTimeDown(Key Key);// 0x43ac480
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x43ac778
	float GetControllerAnalogKeyState(Key Key);// 0x43ac480

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 1]
	float BaseEyeHeight;//[Offset: 0x2e4, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2e8, Size: 1]
	enum AutoPossessAI;//[Offset: 0x2e9, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2ec, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2f0, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2f4, Size: 1]
	Controller* LastHitBy;//[Offset: 0x2f8, Size: 4]
	Controller* Controller;//[Offset: 0x2fc, Size: 4]
	Vector ControlInputVector;//[Offset: 0x308, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x314, Size: 12]
	void SpawnDefaultController();// 0x2243364
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x23158fc
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x4446978
	void ReceiveUnpossessed(Controller* OldController);// 0x2bbd2f4
	void ReceivePossessed(Controller* NewController);// 0x2bbd2f4
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4446824
	void OnRep_PlayerState();// 0x2108b54
	void OnRep_Controller();// 0x437266c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4446710
	Vector K2_GetMovementInputVector();// 0x4446640
	bool IsPlayerControlled();// 0x44466e0
	bool IsMoveInputIgnored();// 0x1fcd5e8
	bool IsLocallyControlled();// 0x44466b0
	bool IsControlled();// 0x4446688
	Vector GetPendingMovementInputVector();// 0x4446640
	Vector GetNavAgentLocation();// 0x4372444
	PawnMovementComponent* GetMovementComponent();// 0x2331f00
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x44465c8
	Vector GetLastMovementInputVector();// 0x4446580
	Rotator GetControlRotation();// 0x4446530
	Controller* GetController();// 0x4446514
	Rotator GetBaseAimRotation();// 0x44464c4
	void DetachFromControllerPendingDestroy();// 0x2243094
	Vector ConsumeMovementInputVector();// 0x4446474
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4446360
	void AddControllerYawInput(float Val);// 0x44462e0
	void AddControllerRollInput(float Val);// 0x1f277c4
	void AddControllerPitchInput(float Val);// 0x4446260

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2e0, Size: 4]
	Character* Character;//[Offset: 0x2ec, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2f0, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2f4, Size: 4]
	Rotator ControlRotation;//[Offset: 0x2f8, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 1]
	FName StateName;//[Offset: 0x310, Size: 8]
	Actor* ObservedActor;//[Offset: 0x318, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x31c, Size: 12]
	void UnPossess();// 0x222f9c4
	void StopMovement();// 0x4372914
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4372834
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x43727ac
	void SetIgnoreLookInput(bool bNewLookInput);// 0x4372724
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x222a464
	void ResetIgnoreMoveInput();// 0x4372708
	void ResetIgnoreLookInput();// 0x1fcf428
	void ResetIgnoreInputFlags();// 0x224313c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2bbd2f4
	void Possess(Pawn* InPawn);// 0x4372688
	void OnRep_PlayerState();// 0x2108b54
	void OnRep_Pawn();// 0x437266c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4372550
	Pawn* K2_GetPawn();// 0x4372528
	bool IsPlayerController();// 0x4372508
	bool IsMoveInputIgnored();// 0x43724d8
	bool IsLookInputIgnored();// 0x1fcd5e8
	bool IsLocalPlayerController();// 0x4372494
	bool IsLocalController();// 0x1ff27b4
	Actor* GetViewTarget();// 0x436b210
	Rotator GetDesiredRotation();// 0x4372444
	Rotator GetControlRotation();// 0x43723f4
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4372328
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4372260
	PlayerController* CastToPlayerController();// 0x4372238

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x320, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x324, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x328, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x330, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x360, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x390, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x394, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3a0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3b0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3c0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3c4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3c8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3cc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3d0, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3d8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	byte Ping;//[Offset: 0x3dd, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3de, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3de, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3de, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3de, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3de, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3de, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3de, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3de, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3e0, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3e4, Size: 4]
	int JumpMaxCount;//[Offset: 0x3e8, Size: 4]
	int JumpCurrentCount;//[Offset: 0x3ec, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3f4, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x40c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x418, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x424, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4c0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x500, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x510, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x4368b94
	void StopJumping();// 0x224326c
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x4368b14
	void SetReplicateMovement(bool bInReplicateMovement);// 0x43310d0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x4368a50
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4368938
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x43687b8
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x43687a4
	void OnRep_RootMotion();// 0x4368790
	void OnRep_ReplicatedBasedMovement();// 0x2243940
	void OnRep_IsCrouched();// 0x4368774
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2bbd2f4
	void OnLanded(out const HitResult Hit);// 0x2bbd2f4
	void OnJumped();// 0x4368758
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x436863c
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2bbd2f4
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2bbd2f4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2bbd2f4
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2bbd2f4
	void Jump();// 0x2243078
	bool IsPlayingRootMotion();// 0x4368614
	bool IsPlayingNetworkedRootMotionMontage();// 0x43685ec
	bool IsJumpProvidingForce();// 0x43685bc
	AnimMontage* GetCurrentMontage();// 0x4368594
	Vector GetBaseTranslationOffset();// 0x4368570
	Rotator GetBaseRotationOffsetRotator();// 0x436850c
	float GetAnimRootMotionTranslationScale();// 0x2122b34
	void Crouch(bool bClientSimulation);// 0x4368484
	void ClientCheatWalk();// 0x1fa67a8
	void ClientCheatGhost();// 0x20c3e74
	void ClientCheatFly();// 0x20c3e90
	bool CanJumpInternal();// 0x224185c
	bool CanJump();// 0x436845c
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x4368394

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x6c4, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6c8, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x6cc, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6d0, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x6d4, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6e0, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6e4, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x718, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x724, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x744, Size: 4]
	enum UseAsyncScene;//[Offset: 0x748, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x749, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x74a, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x74b, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74c, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74c, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74c, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74c, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x74c, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x74c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x750, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75c, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75c, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x75c, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x75c, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x75c, Size: 1]
	float ClothBlendWeight;//[Offset: 0x760, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x768, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x774, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x774, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x774, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x776, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x778, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77d, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77d, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77d, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77d, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77d, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77d, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x77d, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x77d, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x77e, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x780, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x790, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x858, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x85c, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x860, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x950, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0x9e4, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0x9e8, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9ec, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9ec, Size: 1]
	float DefaultPosition;//[Offset: 0x9f0, Size: 4]
	float DefaultPlayRate;//[Offset: 0x9f4, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0x9f8, Size: 4]
	float LastPoseTickTime;//[Offset: 0x9fc, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2a, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x447ec10
	void SuspendClothingSimulation();// 0x447ebfc
	void Stop();// 0x447ebe8
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x447ead8
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1fd3400
	void SetTeleportRotationThreshold(float Threshold);// 0x447ea60
	void SetTeleportDistanceThreshold(float Threshold);// 0x447e9e8
	void SetPosition(float InPos, bool bFireNotifies);// 0x447e924
	void SetPlayRate(float Rate);// 0x447e8ac
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x447e834
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x447e710
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x447e5fc
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x447e57c
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x447e460
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x447e398
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x447e318
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x447e24c
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x447e130
	void SetClothMaxDistanceScale(float Scale);// 0x447e0b8
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x447dfe8
	void SetAnimInstanceClass(class Object NewClass);// 0x447df70
	void SetAnimationMode(byte InAnimationMode);// 0x447def8
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x447de80
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x447dd2c
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x447dc10
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x447db90
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x447da70
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x447d950
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x447d800
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x447d780
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x447d6bc
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x447d590
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x447d41c
	void ResumeClothingSimulation();// 0x447d408
	void ResetClothTeleportMode();// 0x447d3f4
	void ResetAllowedAnimCurveEvaluation();// 0x447d3e0
	void ResetAllBodiesSimulatePhysics();// 0x447d3cc
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x447d308
	void Play(bool bLooping);// 0x447d288
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x447d0e0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x447cef4
	bool IsPlaying();// 0x447cecc
	bool IsClothingSimulationSuspended();// 0x447cea4
	bool IsBodyGravityEnabled(FName BoneName);// 0x447ce24
	float GetTeleportRotationThreshold();// 0x447cdfc
	float GetTeleportDistanceThreshold();// 0x447cdfc
	AnimInstance*[] GetSubAnimInstances();// 0x447cd3c
	Vector GetSkeletalCenterOfMass();// 0x447ccf4
	AnimInstance* GetPostProcessInstance();// 0x217d534
	float GetPosition();// 0x447cccc
	float GetPlayRate();// 0x447cca4
	float GetMorphTarget(FName MorphTargetName);// 0x447cc24
	bool GetDisableAnimCurves();// 0x447cc00
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x447ca80
	float GetClothMaxDistanceScale();// 0x447ca58
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x447c984
	AnimInstance* GetAnimInstance();// 0x447c95c
	byte GetAnimationMode();// 0x447c934
	bool GetAllowedAnimCurveEvaluate();// 0x447c914
	void ForceClothNextUpdateTeleportAndReset();// 0x447c900
	void ForceClothNextUpdateTeleport();// 0x447c8ec
	FName FindConstraintBoneName(int ConstraintIndex);// 0x447c864
	void ClearMorphTargets();// 0x447c850
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x447c740
	void BindClothToMasterPoseComponent();// 0x447c72c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x447c660
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x447c4f8
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x447c390
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x447c270

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5a4, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5a8, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f4, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x610, Size: 4]
	int ForcedLodModel;//[Offset: 0x614, Size: 4]
	int MinLodModel;//[Offset: 0x618, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x628, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x634, Size: 4]
	Color WireframeColor;//[Offset: 0x638, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63c, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x63c, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x63c, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64c, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64c, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64c, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x64d, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64f, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64f, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65c, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65c, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x65d, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65e, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65e, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x660, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x67c, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69b, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x44828d8
	void UnHideBoneByName(FName BoneName);// 0x4482860
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x448269c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x44824d8
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x44823c8
	bool SetSkinWeightProfile(FName InProfileName);// 0x4482348
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4482238
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4454f74
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x448216c
	void SetMinLOD(int InNewMinLOD);// 0x44820f4
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x448207c
	void SetForcedLOD(int InNewForcedLOD);// 0x4482004
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4481f84
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4481f04
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x4481e8c
	bool IsUsingSkinWeightProfile();// 0x4481e6c
	bool IsBoneHiddenByName(FName BoneName);// 0x4481dec
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x4481d28
	FName GetSocketBoneName(FName InSocketName);// 0x4481c9c
	FName GetParentBone(FName BoneName);// 0x4481c10
	int GetNumLODs();// 0x4481be8
	int GetNumBones();// 0x4481bc0
	FName GetCurrentSkinWeightProfileName();// 0x4481b9c
	FName GetBoneName(int BoneIndex);// 0x4481b14
	int GetBoneIndex(FName BoneName);// 0x4481a94
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x448191c
	void EnableMeshClipPlane(out const Plane ClipPlane);// 0x4481894
	void DisableMeshClipPlane();// 0x4481880
	void ClearVertexColorOverride(int LODIndex);// 0x4481808
	void ClearSkinWeightProfile();// 0x1f4cfe0
	void ClearSkinWeightOverride(int LODIndex);// 0x4481790
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x44816c4

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x584, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x44240c8
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x4424004
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x4423ee8
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x4423e10
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x4423d44
	void SetLayerCastShadowEnable(bool Enable);// 0x4423cbc
	void SetCastShadow(bool NewCastShadow);// 0x4423c34
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x4423b20
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x4423a98
	FName[] GetMaterialSlotNames();// 0x44239d0
	MaterialInterface*[] GetMaterials();// 0x4423908
	int GetMaterialIndex(FName MaterialSlotName);// 0x4423880
	bool GetLayerVisibilityValue(byte Layer);// 0x44237f8
	bool GetLayerCastShadowValue(byte Layer);// 0x4423770

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x34, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x50, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x6c, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x78, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x84, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb0, Size: 12]
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0xbc, Size: 4]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc0, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xcc, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xcd, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd0, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdc, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdc, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xdc, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xdc, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe0, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xe8, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xec, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xf8, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x214, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x220, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x224, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x230, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x240, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x258, Size: 12]
	int NumSockets();// 0x447aaa0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x447a9d4
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x447a954
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x447a8d4
	BoxSphereBounds GetImportedBounds();// 0x447a880
	BoxSphereBounds GetBounds();// 0x447a82c
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x447a750
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x447a6d0

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x44806a8
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4480618

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x4345044

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x4374b18

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4374554
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4374474

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2bbd2f4
	FString GetNotifyName();// 0x4343070

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2bbd2f4
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2bbd2f4
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2bbd2f4
	FString GetNotifyName();// 0x4343070

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x29c, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x4375d88

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x4374f00

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x433d398
	Pawn* TryGetPawnOwner();// 0x20a6e14
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x433d2dc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x433d1c4
	void SetRootMotionMode(byte Value);// 0x433d144
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x433d080
	void SavePoseSnapshot(FName SnapshotName);// 0x433d000
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x433cd88
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x433cba0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x433cae4
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x433ca28
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x433c96c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x433c864
	void Montage_Resume(const AnimMontage* Montage);// 0x433c7ec
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x2266c74
	void Montage_Pause(const AnimMontage* Montage);// 0x433c774
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x433c6b8
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x433c5fc
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x433c57c
	bool Montage_IsActive(const AnimMontage* Montage);// 0x433c4fc
	float Montage_GetPosition(const AnimMontage* Montage);// 0x433c47c
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x433c3fc
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x433c324
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x433c2a4
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x433c21c
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x433c19c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x433c0cc
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x433bf5c
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x433be98
	bool IsAnyMontagePlaying();// 0x433be70
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x433bda4
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x433bc74
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x433bbdc
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x433bb18
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x433ba54
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x433b990
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x433b8cc
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x433b808
	SkeletalMeshComponent* GetOwningComponent();// 0x433b7e0
	Actor* GetOwningActor();// 0x433b7b8
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x433b6f4
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x433b630
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x433b56c
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x433b4a8
	float GetInstanceMachineWeight(int MachineIndex);// 0x433b428
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x433b3a8
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x433b328
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x433b2a8
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x433b228
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x433b1a8
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x433b128
	float GetCurveValue(FName CurveName);// 0x433b0a8
	FName GetCurrentStateName(int MachineIndex);// 0x433b020
	AnimMontage* GetCurrentActiveMontage();// 0x433aff8
	void ClearMorphTargets();// 0x433afe4
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x433af04
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2bbd2f4
	void BlueprintPostEvaluateAnimation();// 0x2bbd2f4
	void BlueprintInitializeAnimation();// 0x2bbd2f4
	void BlueprintBeginPlay();// 0x2bbd2f4

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x138, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 1]
	float GravityScale;//[Offset: 0x140, Size: 4]
	float MaxStepHeight;//[Offset: 0x144, Size: 4]
	float JumpZVelocity;//[Offset: 0x148, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x14c, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x150, Size: 4]
	float WalkableFloorZ;//[Offset: 0x154, Size: 4]
	byte MovementMode;//[Offset: 0x158, Size: 1]
	byte CustomMovementMode;//[Offset: 0x159, Size: 1]
	float GroundFriction;//[Offset: 0x180, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x184, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x188, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x18c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x190, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x194, Size: 4]
	float MaxAcceleration;//[Offset: 0x198, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x19c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x1a0, Size: 4]
	float BrakingFriction;//[Offset: 0x1a4, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1ac, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1b0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1b4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1b8, Size: 4]
	float AirControl;//[Offset: 0x1bc, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1c0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1c4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1c8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1cc, Size: 4]
	float Buoyancy;//[Offset: 0x1d0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1d4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1d8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1dc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1ec, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1f0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1f4, Size: 4]
	float Mass;//[Offset: 0x1f8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x204, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x208, Size: 4]
	float PushForceFactor;//[Offset: 0x20c, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x210, Size: 4]
	float TouchForceFactor;//[Offset: 0x214, Size: 4]
	float MinTouchForce;//[Offset: 0x218, Size: 4]
	float MaxTouchForce;//[Offset: 0x21c, Size: 4]
	float RepulsionForce;//[Offset: 0x220, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x228, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x22c, Size: 4]
	Vector Acceleration;//[Offset: 0x230, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x23c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x260, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x26c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x270, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x27c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x288, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x294, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x298, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x29c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2a0, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2a4, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2a8, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2ac, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2b0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2b4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2b8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2bc, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2c0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2c4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2c8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2cd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2d0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2d4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2d8, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x370, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x371, Size: 1]
	byte GroundMovementMode;//[Offset: 0x372, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x373, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x373, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x373, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x373, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x373, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x373, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x373, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x373, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x374, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x374, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x374, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x374, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x374, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x374, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x375, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x375, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x375, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x375, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x375, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x375, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x375, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x376, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x376, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x376, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x388, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x38c, Size: 12]
	int AvoidanceUID;//[Offset: 0x398, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x39c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3a0, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3a4, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3a8, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3ac, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x458, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x45c, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x460, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x464, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x468, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x46c, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x470, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4b4, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4b8, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5e0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x620, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x436c968
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x436c8f0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x436c82c
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x436c7a8
	void SetGroupsToIgnore(int GroupFlags);// 0x436c730
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x436c6ac
	void SetGroupsToAvoid(int GroupFlags);// 0x436c634
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x436c5b0
	void SetAvoidanceGroup(int GroupFlags);// 0x2126708
	void SetAvoidanceEnabled(bool bEnable);// 0x436c530
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x436c3dc
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x436bea4
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x436b96c
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x436b5e0
	float K2_GetWalkableFloorZ();// 0x436b5b8
	float K2_GetWalkableFloorAngle();// 0x436b590
	float K2_GetModifiedMaxAcceleration();// 0x2275b78
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x436b4a8
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x436b2e8
	bool IsWalking();// 0x436b2b8
	bool IsWalkable(out const HitResult Hit);// 0x21781ec
	float GetValidPerchRadius();// 0x436b290
	float GetPerchRadiusThreshold();// 0x436b268
	PrimitiveComponent* GetMovementBase();// 0x436b240
	float GetMinAnalogSpeed();// 0x436b210
	float GetMaxJumpHeightWithJumpTime();// 0x436b1e0
	float GetMaxJumpHeight();// 0x436b1b0
	float GetMaxBrakingDeceleration();// 0x436b180
	float GetMaxAcceleration();// 0x2275c90
	Vector GetImpartedMovementBaseVelocity();// 0x436b130
	Vector GetCurrentAcceleration();// 0x436b0e8
	Character* GetCharacterOwner();// 0x225650c
	float GetAnalogInputModifier();// 0x436b0c0
	void DisableMovement();// 0x436b0a4
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x436ae64
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x436aa5c
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x436a738
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x436a490
	void ClientAckGoodMove(float TimeStamp);// 0x21a0548
	void ClearAccumulatedForces();// 0x1fcf694
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x436a28c
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x436a130
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x436a064
	void AddForce(Vector force);// 0x4369fec

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x12c, Size: 4]
	Vector K2_GetInputVector();// 0x4447614
	bool IsMoveInputIgnored();// 0x444765c
	Vector GetPendingInputVector();// 0x4447614
	Pawn* GetPawnOwner();// 0x44475ec
	Vector GetLastInputVector();// 0x44475a4
	Vector ConsumeInputVector();// 0x4447554
	void AddInputVector(Vector WorldVector, bool bForce);// 0x203e3c8

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x100, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x118, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11c, Size: 1]
	MovementProperties MovementState;//[Offset: 0x120, Size: 4]
	void StopMovementKeepPathing();// 0x442f8dc
	void StopActiveMovement();// 0x1fedd80
	bool IsSwimming();// 0x442f8ac
	bool IsMovingOnGround();// 0x436b2b8
	bool IsFlying();// 0x442f87c
	bool IsFalling();// 0x434cf20
	bool IsCrouching();// 0x27b51ec

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xc8, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xcc, Size: 4]
	Vector Velocity;//[Offset: 0xd4, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xe1, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xe4, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xf0, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 1]
	void StopMovementImmediately();// 0x2175bfc
	void SnapUpdatedComponentToPlane();// 0x21432a4
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2084cb0
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x442658c
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x4426514
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x442644c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x44263c4
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x4426344
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x213d92c
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x4426180
	float K2_GetModifiedMaxSpeed();// 0x4426150
	float K2_GetMaxSpeedModifier();// 0x4426120
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x2085234
	Vector GetPlaneConstraintOrigin();// 0x44260ec
	Vector GetPlaneConstraintNormal();// 0x44260b8
	enum GetPlaneConstraintAxisSetting();// 0x442609c
	PhysicsVolume* GetPhysicsVolume();// 0x20928e8
	float GetMaxSpeed();// 0x442606c
	float GetGravityZ();// 0x442603c
	Vector ConstrainNormalToPlane(Vector Normal);// 0x4425fa0
	Vector ConstrainLocationToPlane(Vector Location);// 0x4425f04
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x4425e68

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2dc, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2e0, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x331, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x334, Size: 4]
	uint32 DataVersion;//[Offset: 0x338, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c4, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x594, Size: 4]
	float CapsuleRadius;//[Offset: 0x598, Size: 4]
	float CapsuleHeight;//[Offset: 0x59c, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x4367344
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x436727c
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x43671b4
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x43670c8
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4366fe4
	float GetUnscaledCapsuleRadius();// 0x4366fc8
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4366f94
	float GetUnscaledCapsuleHalfHeight();// 0x4366f78
	float GetShapeScale();// 0x4366f08
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4366db0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4366c60
	float GetScaledCapsuleRadius();// 0x4366be0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4366b50
	float GetScaledCapsuleHalfHeight();// 0x4366ad0

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x584, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x588, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58c, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58c, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58c, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x590, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2dc, Size: 4]
	byte Ping;//[Offset: 0x2e0, Size: 1]
	FString PlayerName;//[Offset: 0x2e4, Size: 12]
	int PlayerID;//[Offset: 0x2fc, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x300, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x300, Size: 1]
	int StartTime;//[Offset: 0x304, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x308, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x310, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x31c, Size: 12]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2bbd2f4
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2bbd2f4
	void OnRep_UniqueId();// 0x1f39ea8
	void OnRep_Score();// 0x1f3dabc
	void OnRep_PlayerName();// 0x1f39ec4
	void OnRep_bIsInactive();// 0x1f39ee0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x328, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x330, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x334, Size: 4]
	HUD* MyHUD;//[Offset: 0x33c, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x340, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x344, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x34c, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x364, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x368, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x374, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x384, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x388, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x394, Size: 12]
	int ClientCap;//[Offset: 0x3a0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3a4, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3a8, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3ac, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3b0, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41e, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x41f, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x44c, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x450, Size: 4]
	float InputYawScale;//[Offset: 0x460, Size: 4]
	float InputPitchScale;//[Offset: 0x464, Size: 4]
	float InputRollScale;//[Offset: 0x468, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x46c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x46c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x46c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x470, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x474, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x480, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x481, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x482, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x483, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x484, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50c, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x518, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x55c, Size: 4]
	Vector SpawnLocation;//[Offset: 0x560, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x572, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x574, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x445a804
	bool WasInputKeyJustPressed(Key Key);// 0x445a510
	void ToggleSpeaking(bool bInSpeaking);// 0x445a488
	void SwitchLevel(FString URL);// 0x27c1d2c
	void StopHapticEffect(enum Hand);// 0x445a410
	void StartFire(byte FireModeNum);// 0x445a390
	void SetVirtualJoystickVisibility(bool bVisible);// 0x445a308
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x445a168
	void SetName(FString S);// 0x445a0a4
	void SetMouseLocation(const int X, const int Y);// 0x4459fe8
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4459f2c
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4459e2c
	void SetControllerLightColor(Color Color);// 0x4459dbc
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4459bf0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x4459ae4
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x44599d4
	void ServerViewPrevPlayer();// 0x4459978
	void ServerViewNextPlayer();// 0x445991c
	void ServerVerifyViewTarget();// 0x44598c0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x44597b4
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x44596b0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4459194
	void ServerToggleAILogging();// 0x4459138
	void ServerShortTimeout();// 0x44590dc
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x4459014
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4458efc
	void ServerRestartPlayer();// 0x4458ea0
	void ServerPause();// 0x4458e44
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4458da0
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x4458884
	void ServerCheckClientPossessionReliable();// 0x4458828
	void ServerCheckClientPossession();// 0x44587cc
	void ServerChangeName(FString S);// 0x44586d8
	void ServerCamera(FName NewMode);// 0x4458624
	void ServerAcknowledgePossession(Pawn* P);// 0x4458570
	void SendToConsole(FString Command);// 0x44584ac
	void RestartLevel();// 0x4458490
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4458370
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4458220
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4457f40
	void Pause();// 0x4457f18
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4457e90
	void LocalTravel(FString URL);// 0x4457dcc
	bool IsInputKeyDown(Key Key);// 0x4457ad8
	void GetViewportSize(out int SizeX, out int SizeY);// 0x44579f8
	SpectatorPawn* GetSpectatorPawn();// 0x44579dc
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x44578f4
	Vector GetInputVectorKeyState(Key Key);// 0x44575f0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4457470
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4457390
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x445720c
	float GetInputKeyTimeDown(Key Key);// 0x4456f14
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4456df0
	float GetInputAnalogKeyState(Key Key);// 0x4456af8
	HUD* GetHUD();// 0x4456ad0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x44568fc
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4456780
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4456604
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4456474
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x445633c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4456204
	Vector GetFocalLocation();// 0x22178d4
	void FOV(float NewFOV);// 0x27c055c
	void EnableCheats();// 0x44561e8
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x445607c
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4455f9c
	void ConsoleKey(Key Key);// 0x4455ca8
	void ClientWasKicked(const FText KickReason);// 0x4455b14
	void ClientVoiceHandshakeComplete();// 0x27c1374
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x445595c
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x44555f0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4455440
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x44552a0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4455104
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4455040
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4454f74
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4454ef4
	void ClientStartOnlineSession();// 0x21f1420
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x2181080
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4454dec
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x4454d64
	void ClientSetHUD(class HUD NewHUDClass);// 0x1f9bf6c
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x233451c
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4454be8
	void ClientSetCameraMode(FName NewCamMode);// 0x4454b68
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x44549c4
	void ClientSetBlockOnAsyncLoading();// 0x44549a8
	void ClientReturnToMainMenu(FString ReturnReason);// 0x44548e4
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x4454864
	void ClientRestart(Pawn* NewPawn);// 0x44547e4
	void ClientReset();// 0x44547c8
	void ClientRepObjRef(Object* Object);// 0x4454748
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x44545b0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4454454
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x4454330
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x44541dc
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x44540d4
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x4453f68
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4453e14
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4453b44
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x44537d8
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4453684
	void ClientIgnoreMoveInput(bool bIgnore);// 0x44535fc
	void ClientIgnoreLookInput(bool bIgnore);// 0x4453574
	void ClientGotoState(FName NewState);// 0x44534f4
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x4453428
	void ClientForceGarbageCollection();// 0x27c0524
	void ClientFlushLevelStreaming();// 0x4453414
	void ClientEndOnlineSession();// 0x21f1174
	void ClientEnableNetworkVoice(bool bEnable);// 0x445338c
	void ClientCommitMapChange();// 0x27c0540
	void ClientClearCameraLensEffects();// 0x4453370
	void ClientCapBandwidth(int Cap);// 0x44532f0
	void ClientCancelPendingMapChange();// 0x44532d4
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x44531c8
	void ClearAudioListenerOverride();// 0x44531b4
	void Camera(FName NewMode);// 0x4453134
	void AddYawInput(float Val);// 0x44530b4
	void AddRollInput(float Val);// 0x4453034
	void AddPitchInput(float Val);// 0x4452fb4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x22100f8

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2dc, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e0, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e0, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x2e4, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x2f8, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x304, Size: 12]
	Canvas* Canvas;//[Offset: 0x310, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x314, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x318, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x324, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x328, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x2bbd2f4
	void ShowHUD();// 0x1f3dabc
	void ShowDebugToggleSubCategory(FName Category);// 0x43a85b0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x43a8538
	void ShowDebugForMoifiedTargetActor();// 0x43a8524
	void ShowDebug(FName DebugType);// 0x43a84a4
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x43a83e0
	void RemoveAllDebugStrings();// 0x43a83cc
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2bbd2f4
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2bbd2f4
	void ReceiveHitBoxClick(const FName BoxName);// 0x2bbd2f4
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2bbd2f4
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2bbd2f4
	Vector Project(Vector Location);// 0x43a8338
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x43a813c
	PlayerController* GetOwningPlayerController();// 0x200c378
	Pawn* GetOwningPawn();// 0x43a8114
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x43a7ebc
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x43a7d24
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x43a78ac
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x43a7634
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x43a7498
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x43a7114
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x43a6eec
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x43a6b14
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x43a6930
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x43a67cc
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x43a6630
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x43a6240

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4365ba0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4365a90
	Vector K2_Project(Vector WorldLocation);// 0x43659fc
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4365858
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4365584
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4360b28
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4360994
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x43607f0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x43605d8
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4360480
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x4360380
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x435fe60
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x435fd44

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa0, Size: 4]
	int LevelIndex;//[Offset: 0xa4, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xa8, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xac, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xb8, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2, Size: 1]
	byte AddressX;//[Offset: 0xc3, Size: 1]
	byte AddressY;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x449b924
	int Blueprint_GetSizeX();// 0x449b8fc

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2dc, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2e0, Size: 4]
	float DefaultFOV;//[Offset: 0x2f0, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x2f8, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x300, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x350, Size: 1424]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 1424]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1440]
	TViewTarget PendingViewTarget;//[Offset: 0x1410, Size: 1440]
	CameraModifier*[] ModifierList;//[Offset: 0x19c4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19d0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19dc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19e0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19ec, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1a08, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a14, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a18, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a38, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a50, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a5c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a68, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a6c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a6c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a6c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a6d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a70, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a74, Size: 4]
	float ViewYawMin;//[Offset: 0x1a78, Size: 4]
	float ViewYawMax;//[Offset: 0x1a7c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a80, Size: 4]
	float ViewRollMax;//[Offset: 0x1a84, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x445081c
	void StopCameraFade();// 0x1fcf444
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4450750
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4450684
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x44505b8
	void StopAllCameraShakes(bool bImmediately);// 0x4450530
	void StopAllCameraAnims(bool bImmediate);// 0x44504a8
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x44502bc
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x44501a8
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4391b1c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x1fcbc88
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x445004c
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x444fd28
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x444fbc0
	void OnPhotographySessionStart();// 0x1f39ea8
	void OnPhotographySessionEnd();// 0x1f39ee0
	void OnPhotographyMultiPartCaptureStart();// 0x1f39ec4
	void OnPhotographyMultiPartCaptureEnd();// 0x1f3dabc
	PlayerController* GetOwningPlayerController();// 0x444fb90
	float GetFOVAngle();// 0x436b1b0
	Rotator GetCameraRotation();// 0x444fb48
	Vector GetCameraLocation();// 0x444fb00
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x444fa78
	void ClearCameraLensEffects();// 0x444fa5c
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2bbd2f4
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x444f9d4
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x444f94c

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1328]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	float AutoExposureBias;//[Offset: 0x318, Size: 4]
	float HistogramLogMin;//[Offset: 0x31c, Size: 4]
	float HistogramLogMax;//[Offset: 0x320, Size: 4]
	float LensFlareIntensity;//[Offset: 0x324, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x328, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x338, Size: 4]
	int LensFlareCount;//[Offset: 0x33c, Size: 4]
	float LensFlareThreshold;//[Offset: 0x340, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x344, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x348, Size: 16]
	float VignetteIntensity;//[Offset: 0x3c8, Size: 4]
	float GrainJitter;//[Offset: 0x3cc, Size: 4]
	float GrainIntensity;//[Offset: 0x3d0, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3d4, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3d8, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3dc, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3ec, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x404, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x408, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x418, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x41c, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x420, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x424, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x428, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x42c, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x430, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x434, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x444, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x448, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x458, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x45c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x464, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x465, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x468, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x470, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x474, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x480, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x484, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x488, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x490, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x494, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 4]
	float LPVSize;//[Offset: 0x4c4, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 4]
	float ScreenPercentage;//[Offset: 0x504, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x508, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x514, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x518, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x51c, Size: 4]
	Object*[] Blendables;//[Offset: 0x520, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
	PlayerState* PlayerState;//[Offset: 0x590, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x2055e2c
	Actor* GetViewTarget();// 0x1f40108
	void EnableModifier();// 0x215affc
	void DisableModifier(bool bImmediate);// 0x435df2c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2bbd2f4
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2bbd2f4

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x314, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x318, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x31c, Size: 4]
	Transform RelativeTransform;//[Offset: 0x320, Size: 48]
	float BaseFOV;//[Offset: 0x350, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x358, Size: 12]
	float DistFromCamera;//[Offset: 0x364, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2dc, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2e4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2f0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x2fc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x308, Size: 12]
	void ToggleActive();// 0x4382034
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4381f74
	void SetTemplate(ParticleSystem* NewTemplate);// 0x1fa49c4
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4381eb8
	void SetFloatParameter(FName ParameterName, float Param);// 0x4381df4
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4381d2c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4381c70
	void OnRep_bCurrentlyActive();// 0x1f39ec4
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x1f390f8
	bool IsActive();// 0x4381c48
	void Deactivate();// 0x4381c34
	void Activate();// 0x4381c20

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	byte LODMethod;//[Offset: 0x4d, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x44420fc

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	byte SortMode;//[Offset: 0x49, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 1]
	float EmitterDuration;//[Offset: 0x4c, Size: 4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	int EmitterLoops;//[Offset: 0x58, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 12]
	float EmitterDelay;//[Offset: 0x94, Size: 4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	float RandomImageTime;//[Offset: 0xac, Size: 4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 12]
	float MacroUVRadius;//[Offset: 0xc4, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 4]
	byte BoundingMode;//[Offset: 0xd8, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 4]
	int CutoutSubImagesX;//[Offset: 0xe0, Size: 4]
	int CutoutSubImagesY;//[Offset: 0xe4, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe8, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xec, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x114, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 1]
	FName EventName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x584, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x588, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x594, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a0, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a1, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a1, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a1, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a1, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a2, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a2, Size: 1]
	byte LODMethod;//[Offset: 0x5a4, Size: 1]
	enum RequiredSignificance;//[Offset: 0x5a5, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5a8, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x5b4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x5c0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x5cc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x5d8, Size: 12]
	Vector OldPosition;//[Offset: 0x5e4, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x5f0, Size: 12]
	float WarmupTime;//[Offset: 0x5fc, Size: 4]
	float WarmupTickRate;//[Offset: 0x600, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x608, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x610, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x630, Size: 12]
	float CustomTimeDilation;//[Offset: 0x644, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x6c4, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4444a4c
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x44448f4
	void SetTemplate(ParticleSystem* NewTemplate);// 0x444487c
	void SetSocketName(FName InSocketName);// 0x4444804
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4444748
	void SetLODLevel(int InLODLevel);// 0x44446c8
	void SetFloatParameter(FName ParameterName, float Param);// 0x4444604
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4444530
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4444468
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x444435c
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4444254
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4444148
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x444403c
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4443f34
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4443e28
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x4443d64
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4443c34
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4443a90
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x44439d4
	int GetNumActiveParticles();// 0x44439ac
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4443924
	int GetLODLevel();// 0x44438f4
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x44437d8
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x44436b8
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x444359c
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4443480
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4443360
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4443244
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x444316c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4442fcc
	void EndTrails();// 0x4442fb8
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4442eec
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4442d94

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x4420550
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x4420494
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x44203d0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x44202d0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4420240
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x44201c0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4420140
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x44200c8
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x4420050
	void CopyInterpParameters(MaterialInstance* Source);// 0x441ffd8

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x2bbd2f4
	void ReceivePlayShake(float Scale);// 0x2bbd2f4
	bool ReceiveIsFinished();// 0x1fe897c
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2bbd2f4

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1328]
	float BasePostProcessBlendWeight;//[Offset: 0x580, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x435c9d4
	void SetScale(float NewDuration);// 0x20a569c
	void SetDuration(float NewDuration);// 0x435c95c
	void SetCurrentTime(float NewTime);// 0x435c8e4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2dc, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2e0, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2e4, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	float AspectRatio;//[Offset: 0x2f4, Size: 4]
	float FOVAngle;//[Offset: 0x2f8, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x2fc, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 1328]
	int GetAutoActivatePlayerIndex();// 0x435c334

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x270, Size: 4]
	float OrthoWidth;//[Offset: 0x274, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x278, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x27c, Size: 4]
	float AspectRatio;//[Offset: 0x280, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x284, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x284, Size: 1]
	byte ProjectionMode;//[Offset: 0x285, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x288, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x290, Size: 1328]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80c, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x435d3dc
	void SetProjectionMode(byte InProjectionMode);// 0x435d368
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x435d2f4
	void SetOrthoWidth(float InOrthoWidth);// 0x435d280
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x435d20c
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x435d198
	void SetFieldOfView(float InFieldOfView);// 0x209a760
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x435d110
	void SetAspectRatio(float InAspectRatio);// 0x435d09c
	void SetActive(bool bNewActive, bool bReset);// 0x4334430
	void RemoveBlendable(interface class InBlendableObject);// 0x435cfac
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x20d4ab0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x435cf34
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x435ce04

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x215affc
	void ViewSelf();// 0x1f90004
	void ViewPlayer(FString S);// 0x436ed68
	void ViewClass(class Actor DesiredClass);// 0x21fbcf8
	void ViewActor(FName actorName);// 0x1f5cba4
	void TriggerCrash();// 0x436ed54
	void ToggleDebugCamera();// 0x436ed38
	void ToggleAILogging();// 0x1f5c26c
	void TestCollisionDistance();// 0x436ed1c
	void Teleport();// 0x20e1f30
	void Summon(FString ClassName);// 0x436ec58
	void StreamLevelOut(FName PackageName);// 0x436ebd8
	void StreamLevelIn(FName PackageName);// 0x436eb58
	void Slomo(float NewTimeDilation);// 0x436ead8
	void SetWorldOrigin();// 0x436eac4
	void SetNavDrawDistance(float DrawDistance);// 0x436ea4c
	void SetMouseSensitivityToDefault();// 0x436ea38
	void ServerToggleAILogging();// 0x436e9dc
	void ReceiveInitCheatManager();// 0x2bbd2f4
	void ReceiveEndPlay();// 0x2bbd2f4
	void RebuildNavigation();// 0x436e9c0
	void PlayersOnly();// 0x1f605bc
	void OnlyLoadLevel(FName PackageName);// 0x2185e58
	void LogLoc();// 0x436e9a4
	void InvertMouse();// 0x436e990
	void God();// 0x20133a8
	void Ghost();// 0x20144c0
	void FreezeFrame(float Delay);// 0x1f626e0
	void Fly();// 0x1f605a0
	void FlushLog();// 0x436e974
	void EnableDebugCamera();// 0x436e958
	void DumpVoiceMutingState();// 0x231be0c
	void DumpPartyState();// 0x436e93c
	void DumpOnlineSessionState();// 0x436e920
	void DumpChatState();// 0x21840cc
	void DisableDebugCamera();// 0x436e904
	void DestroyTarget();// 0x1f609e0
	void DestroyPawns(class Pawn aClass);// 0x436e884
	void DestroyAllPawnsExceptTarget();// 0x436e868
	void DestroyAll(class Actor aClass);// 0x386ea3c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x436e7a4
	void DebugCapsuleSweepPawn();// 0x436e788
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x2186080
	void DebugCapsuleSweepClear();// 0x436e76c
	void DebugCapsuleSweepChannel(byte Channel);// 0x21861cc
	void DebugCapsuleSweepCapture();// 0x436e750
	void DebugCapsuleSweep();// 0x1f5ccc0
	void DamageTarget(float DamageAmount);// 0x436e6d0
	void CheatScript(FString ScriptName);// 0x436e578
	void ChangeSize(float F);// 0x215a2ec
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x436e37c
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x436e19c
	void BugIt(FString ScreenShotDescription);// 0x436e0d8

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57d, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57d, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x580, Size: 4]
	float SpeedScale;//[Offset: 0x594, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x598, Size: 4]
	float InitialAccel;//[Offset: 0x59c, Size: 4]
	float InitialDecel;//[Offset: 0x5a0, Size: 4]
	void ToggleDisplay();// 0x4377b38
	void ShowDebugSelectedInfo();// 0x4377b1c
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4377aa4
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2bbd2f4
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2bbd2f4
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2bbd2f4
	Actor* GetSelectedActor();// 0x4377a7c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x584, Size: 4]
	float FrustumAngle;//[Offset: 0x588, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x58c, Size: 4]
	float FrustumStartDist;//[Offset: 0x590, Size: 4]
	float FrustumEndDist;//[Offset: 0x594, Size: 4]
	Texture* Texture;//[Offset: 0x598, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x445e1cc
	void SetBind(FName BindName, FString Command);// 0x445e0c4
	void InvertAxisKey(const Key AxisKey);// 0x445ddd8
	void InvertAxis(const FName AxisName);// 0x445dd60
	void ClearSmoothing();// 0x445dd4c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293c0, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x293c4, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x294f8, Size: 12]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x29534, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x444, Size: 60]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	Vector2D Center;//[Offset: 0x8, Size: 8]
	Vector2D VisualSize;//[Offset: 0x10, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x18, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x20, Size: 8]
	Vector2D InputScale;//[Offset: 0x28, Size: 8]
	Key MainInputKey;//[Offset: 0x30, Size: 16]
	Key AltInputKey;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x320, Size: 4]
	float BaseLookUpRate;//[Offset: 0x324, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x328, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x32c, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x330, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	void TurnAtRate(float Rate);// 0x437a47c
	void MoveUp_World(float Val);// 0x437a3fc
	void MoveRight(float Val);// 0x437a37c
	void MoveForward(float Val);// 0x2269744
	void LookUpAtRate(float Rate);// 0x437a304

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x594, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x448b914
	float GetUnscaledSphereRadius();// 0x4366f78
	float GetShapeScale();// 0x4366f08
	float GetScaledSphereRadius();// 0x4366ad0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5a4, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x5a8, Size: 4]
	int PreviousLODLevel;//[Offset: 0x5ac, Size: 4]
	int MinLOD;//[Offset: 0x5b0, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x5b4, Size: 4]
	byte TileLength;//[Offset: 0x5b8, Size: 1]
	byte TileNum;//[Offset: 0x5b9, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x5bc, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x5c0, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c8, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c8, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c8, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c8, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c8, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c8, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c8, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c9, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c9, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c9, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c9, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c9, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c9, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c9, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x5cc, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x5d0, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5d4, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5e0, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x5f0, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x62c, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x644, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x658, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x664, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3a3cd24
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x4496b2c
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x4496ab4
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x4496a3c
	void SetForcedLodModel(int NewForcedLodModel);// 0x44969c4
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x2006b7c
	void SetDirty();// 0x44969b0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x4496938
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4496860

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110, Size: 16]
	Margin Padding;//[Offset: 0x120, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x130, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x13c, Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154, Size: 4]
	int Priority;//[Offset: 0x158, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x160, Size: 12]
	InputComponent* InputComponent;//[Offset: 0x16c, Size: 4]
	void UnregisterInputComponent();// 0x3895bd0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2bbd2f4
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3895b04
	void StopListeningForAllInputActions();// 0x3895af0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3895a78
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x38959b8
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x38958fc
	void SetPadding(Margin InPadding);// 0x3895874
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x38957fc
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x3895784
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x38956c8
	void SetInputActionPriority(int NewPriority);// 0x3895650
	void SetInputActionBlocking(bool bShouldBlock);// 0x38955d0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x38952b0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x3895230
	void SetDesiredSizeInViewport(Vector2D Size);// 0x38951c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3895144
	void SetAnchorsInViewport(Anchors Anchors);// 0x38950bc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x389504c
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3894fd4
	void RemoveFromViewport();// 0x3894fc0
	void RegisterInputComponent();// 0x3894fac
	void PreConstruct(bool IsDesignTime);// 0x2bbd2f4
	void PlaySound(SoundBase* SoundToPlay);// 0x3894f34
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3894d60
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3894bd0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3894b50
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bbd2f4
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bbd2f4
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2bbd2f4
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bbd2f4
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2bbd2f4
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bbd2f4
	void OnPaint(out PaintContext Context);// 0x2bbd2f4
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2bbd2f4
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	void OnMouseCaptureLost();// 0x2bbd2f4
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2bbd2f4
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2bbd2f4
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bbd2f4
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bbd2f4
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2bbd2f4
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2bbd2f4
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2bbd2f4
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bbd2f4
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bbd2f4
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bbd2f4
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bbd2f4
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2bbd2f4
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bbd2f4
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3894ad0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1f5c864
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2bbd2f4
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2bbd2f4
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3894940
	bool IsPlayingAnimation();// 0x3894918
	bool IsListeningForInputAction(FName ActionName);// 0x3894898
	bool IsInViewport();// 0x3894664
	bool IsInteractable();// 0x2bbd2f4
	bool IsAnyAnimationPlaying();// 0x3894870
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x38947f0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3894770
	Widget* GetWidgetFromName(out const FName Name);// 0x38946dc
	Pawn* GetOwningPlayerPawn();// 0x38946b4
	PlayerController* GetOwningPlayer();// 0x1f40108
	LocalPlayer* GetOwningLocalPlayer();// 0x389468c
	bool GetIsVisible();// 0x3894664
	bool GetDontPaintWhenChildEmpty();// 0x389463c
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x38945bc
	Anchors GetAnchorsInViewport();// 0x3894578
	Vector2D GetAlignmentInViewport();// 0x3894538
	void Destruct();// 0x2bbd2f4
	void Construct();// 0x2bbd2f4
	void AddToViewport(int ZOrder);// 0x38944c0
	bool AddToPlayerScreen(int ZOrder);// 0x3894440

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc0, Size: 12]
	void SetWidgetRender(const enum InWidgetVisible);// 0x3899d84
	void SetVisibility(enum InVisibility);// 0x3899d04
	void SetUserFocus(PlayerController* PlayerController);// 0x3899c8c
	void SetToolTipText(out const FText InToolTipText);// 0x3899ae8
	void SetToolTip(Widget* Widget);// 0x3899a70
	void SetRenderTranslation(Vector2D Translation);// 0x3899a00
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3899990
	void SetRenderTransform(WidgetTransform InTransform);// 0x38998b8
	void SetRenderShear(Vector2D Shear);// 0x3899848
	void SetRenderScale(Vector2D Scale);// 0x38997d8
	void SetRenderAngle(float Angle);// 0x3899760
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3899658
	void SetKeyboardFocus();// 0x3899644
	void SetIsEnabled(bool bInIsEnabled);// 0x1f60258
	void SetCursor(byte InCursor);// 0x38995cc
	void SetClipping(enum InClipping);// 0x3899554
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3899498
	void ResetCursor();// 0x3899484
	void RemoveFromParent();// 0x20e1f30
	EventReply OnReply__DelegateSignature();// 0x2bbd2f4
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bbd2f4
	bool IsVisible();// 0x389945c
	bool IsHovered();// 0x3899434
	void InvalidateLayoutAndVolatility();// 0x3899420
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x38993a0
	bool HasUserFocus(PlayerController* PlayerController);// 0x3899320
	bool HasMouseCapture();// 0x38992f8
	bool HasKeyboardFocus();// 0x38992d0
	bool HasFocusedDescendants();// 0x38992a8
	bool HasAnyUserFocus();// 0x3899280
	enum GetWidgetRender();// 0x3899258
	Widget* GetWidget__DelegateSignature();// 0x2bbd2f4
	enum GetVisibility();// 0x3899230
	Widget* GetTheTemplate();// 0x3899208
	FText GetText__DelegateSignature();// 0x2bbd2f4
	enum GetSlateVisibility__DelegateSignature();// 0x2bbd2f4
	SlateColor GetSlateColor__DelegateSignature();// 0x2bbd2f4
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2bbd2f4
	PanelWidget* GetParent();// 0x38991e0
	PlayerController* GetOwningPlayer();// 0x1f40108
	byte GetMouseCursor__DelegateSignature();// 0x2bbd2f4
	LinearColor GetLinearColor__DelegateSignature();// 0x2bbd2f4
	bool GetIsEnabled();// 0x38991b8
	int GetInt32__DelegateSignature();// 0x2bbd2f4
	float GetFloat__DelegateSignature();// 0x2bbd2f4
	Vector2D GetDesiredSize();// 0x3899178
	enum GetClipping();// 0x3899150
	enum GetCheckBoxState__DelegateSignature();// 0x2bbd2f4
	Geometry GetCachedGeometry();// 0x3899120
	Geometry GetCachedAllottedGeometry();// 0x38990f0
	bool GetBool__DelegateSignature();// 0x2bbd2f4
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2bbd2f4
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2bbd2f4
	void ForceVolatile(bool bForce);// 0x3899070
	void ForceLayoutPrepass();// 0x389905c
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x3898fcc

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x389ac54
	float GetEndTime();// 0x389ac2c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x20a5ce8
	void ShowTitleSafeArea();// 0x1f88e48
	void SetConsoleTarget(int PlayerIndex);// 0x1f626e0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x2bbd2f4
	void ReceiveInit();// 0x2bbd2f4
	void HandleTravelError(byte FailureType);// 0x2bbd2f4
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2bbd2f4
	int GetDeviceLevel();// 0x1f8d6f0
	void DebugRemovePlayer(int ControllerId);// 0x436ead8
	void DebugCreatePlayer(int ControllerId);// 0x2162dc4

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x3876398
	void Dragged(out const PointerEvent PointerEvent);// 0x3876164
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3875f30

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xcc, Size: 12]
	bool RemoveChildAt(int Index);// 0x3880174
	bool RemoveChild(Widget* Content);// 0x38800f4
	bool HasChild(Widget* Content);// 0x3880074
	bool HasAnyChildren();// 0x388004c
	int GetChildrenCount();// 0x3880024
	int GetChildIndex(Widget* Content);// 0x387ffa4
	Widget* GetChildAt(int Index);// 0x387ff24
	void ClearChildren();// 0x387ff10
	PanelSlot* AddChild(Widget* Content);// 0x387fe90

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2dc, Size: 4]
	FName MatineeControllerName;//[Offset: 0x2e0, Size: 8]
	float PlayRate;//[Offset: 0x2e8, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 1]
	float ForceStartPosition;//[Offset: 0x2f0, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f4, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f4, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f4, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f4, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f4, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f4, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x2f8, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fc, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fc, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x300, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x310, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x31c, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 1]
	float InterpPosition;//[Offset: 0x32c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x334, Size: 1]
	delegate OnPlay;//[Offset: 0x338, Size: 12]
	delegate OnStop;//[Offset: 0x344, Size: 12]
	delegate OnPause;//[Offset: 0x350, Size: 12]
	void Stop();// 0x1f39ee0
	void SetPosition(float NewPosition, bool bJump);// 0x442276c
	void SetLoopingState(bool bNewLooping);// 0x44226e4
	void Reverse();// 0x1f39ea8
	void Play();// 0x1f39ec4
	void Pause();// 0x1f39efc
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x442253c
	void ChangePlaybackDirection();// 0x1fa4158

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x270, Size: 4]
	Actor* ChildActor;//[Offset: 0x274, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x278, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x4370170

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2bbd2f4
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x440a160
	bool RemoteEvent(FName EventName);// 0x440a0d8
	void LevelReset();// 0x2bbd2f4

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e0, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2e4, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2e8, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x584, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 1]
	float ScreenSize;//[Offset: 0x58c, Size: 4]
	float U;//[Offset: 0x590, Size: 4]
	float UL;//[Offset: 0x594, Size: 4]
	float V;//[Offset: 0x598, Size: 4]
	float VL;//[Offset: 0x59c, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4350f74
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4350ddc
	void SetSprite(Texture2D* NewSprite);// 0x4350d5c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x2e4, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f0, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f1, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f1, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f1, Size: 1]
	float KillZ;//[Offset: 0x2f4, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x2f8, Size: 4]
	float WorldGravityZ;//[Offset: 0x2fc, Size: 4]
	float GlobalGravityZ;//[Offset: 0x300, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x304, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x308, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x30c, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x310, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x314, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x31c, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x328, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x32c, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	float MaxWorldSize;//[Offset: 0x334, Size: 4]
	int RegionSizeNear;//[Offset: 0x338, Size: 4]
	int RegionSizeFar;//[Offset: 0x33c, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	int Graduation;//[Offset: 0x344, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x348, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 1]
	int VisibilityCellSize;//[Offset: 0x350, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x354, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x355, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x358, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x3a8, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x40c, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x41c, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x440, Size: 4]
	float WorldToMeters;//[Offset: 0x444, Size: 4]
	float MonoCullingDistance;//[Offset: 0x448, Size: 4]
	BookMark* BookMarks;//[Offset: 0x44c, Size: 4]
	float TimeDilation;//[Offset: 0x474, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x478, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x47c, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x480, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x484, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x488, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x48c, Size: 4]
	PlayerState* Pauser;//[Offset: 0x490, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x498, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x4a4, Size: 12]
	float[] LODRelativeDistances;//[Offset: 0x4b0, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	int WorldCompositionNums;//[Offset: 0x4c0, Size: 4]
	int CompositionBlockLength;//[Offset: 0x4c4, Size: 4]
	void OnRep_WorldGravityZ();// 0x1f39ec4

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2dc, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2e8, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2ec, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2f0, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2f4, Size: 4]
	class HUD* HUDClass;//[Offset: 0x2f8, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2fc, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x300, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x304, Size: 4]
	GameSession* GameSession;//[Offset: 0x308, Size: 4]
	GameStateBase* GameState;//[Offset: 0x30c, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x310, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	void StartPlay();// 0x1f3bb00
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x4391ce0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4391bb0
	bool ShouldReset(Actor* ActorToReset);// 0x4391b1c
	void ReturnToMainMenuHost();// 0x4391b00
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x43919e0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x210e538
	void RestartPlayer(Controller* NewPlayer);// 0x1f277c4
	void ResetLevel();// 0x2034590
	bool PlayerCanRestart(PlayerController* Player);// 0x4391954
	bool MustSpectate(PlayerController* NewPlayerController);// 0x43918cc
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2bbd2f4
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2bbd2f4
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2bbd2f4
	void K2_OnLogout(Controller* ExitingController);// 0x2bbd2f4
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2bbd2f4
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x43917c4
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x22a4474
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1f390f8
	bool HasMatchStarted();// 0x1ff27b4
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x4391744
	int GetNumSpectators();// 0x436b210
	int GetNumPlayers();// 0x436b1e0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x43916bc
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x43915ac
	Actor* ChoosePlayerStart(Controller* Player);// 0x4391524
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x27c0214
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4391458

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2dc, Size: 4]
	int MaxPlayers;//[Offset: 0x2e0, Size: 4]
	int MaxPartySize;//[Offset: 0x2e4, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2e8, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	FName SessionName;//[Offset: 0x2f0, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2dc, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2e0, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2e4, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x2e8, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2f8, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2fc, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x300, Size: 4]
	void OnRep_SpectatorClass();// 0x437266c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x2276328
	void OnRep_ReplicatedHasBegunPlay();// 0x2108b54
	void OnRep_GameModeClass();// 0x1fcdf80
	bool HasMatchStarted();// 0x43a2270
	bool HasBegunPlay();// 0x22ef0a8
	float GetServerWorldTimeSeconds();// 0x2331f00
	float GetPlayerStartTime(Controller* Controller);// 0x43a21e8
	float GetPlayerRespawnDelay(Controller* Controller);// 0x43a2160

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2dc, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2e0, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2e4, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2e8, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2ec, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2f4, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x2f8, Size: 4]
	int BadPingThreshold;//[Offset: 0x2fc, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x300, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x304, Size: 4]
	float PercentForBadPing;//[Offset: 0x308, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x30c, Size: 4]
	float MoveRepSize;//[Offset: 0x310, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x314, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x318, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x31c, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x320, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x324, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x328, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x32c, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x330, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x334, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x338, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x340, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x348, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x34c, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x350, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x354, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa1, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa1, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa1, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa1, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 1]
	int LevelLODIndex;//[Offset: 0xa4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 1]
	Color DrawColor;//[Offset: 0xac, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc, Size: 4]
	FString[] Keywords;//[Offset: 0xd4, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec, Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x110, Size: 12]
	Level* LoadedLevel;//[Offset: 0x11c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x120, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x124, Size: 12]
	bool IsStreamingStatePending();// 0x440aae0
	bool IsLevelVisible();// 0x440aab8
	bool IsLevelLoaded();// 0x440aa94
	FName GetWorldAssetPackageFName();// 0x440aa54
	Level* GetLoadedLevel();// 0x440aa38
	LevelScriptActor* GetLevelScriptActor();// 0x440aa10
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x440a8b0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x304, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 1]
	byte StreamingUsage;//[Offset: 0x311, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x574, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7f4, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80e, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80f, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x82c, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bEnabledAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	int iInitedClassConfigGroup;//[Offset: 0x40, Size: 4]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x44, Size: 60]
	bool bInitedIgnoringProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	enum AcceptableNetRole;//[Offset: 0x4, Size: 1]
	int ObjectLifePeriodTime;//[Offset: 0x8, Size: 4]
	Object* pDefaultObject;//[Offset: 0xc, Size: 4]
	Object*[] Pool;//[Offset: 0x10, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x1c, Size: 60]
	int Size;//[Offset: 0x58, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	ResetObjectPoolDataInfo[] ResetInfoPool;//[Offset: 0x60, Size: 12]
	CachedBlueprintComponentTemplate[] CachedTemplates;//[Offset: 0x6c, Size: 12]
	bool bAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]

--------------------------------
Class: ResetObjectPoolDataInfo
	Struct* pStruct;//[Offset: 0x0, Size: 4]

--------------------------------
Class: CachedBlueprintComponentTemplate
	Struct* pStruct;//[Offset: 0x0, Size: 4]
	FString ComponentName;//[Offset: 0x4, Size: 12]
	Object* ComponentTemplate;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ObjectPoolClassConfig
	int GroupID;//[Offset: 0x0, Size: 4]
	FName ObjectClassName;//[Offset: 0x8, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool ObjectPoolEnableAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	int PoolSize;//[Offset: 0x14, Size: 4]
	int LifePeriodTime;//[Offset: 0x18, Size: 4]
	enum AcceptableNetRole;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	enum DataGatheringMode;//[Offset: 0x29, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30, Size: 12]
	float UpdateInterval;//[Offset: 0x3c, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x44, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x50, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0, Size: 12]
	enum OperationMode;//[Offset: 0x158, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x442c250
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x442c1d8
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x442c118
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x442c064
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x442bfec
	void SetGeometryGatheringMode(enum NewMode);// 0x442bf74
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x442bf60
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x442be60
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x442bcb4
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x442bc3c
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x442ba3c
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x442b84c
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442b65c
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442b46c
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x442b3f4
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x442b37c
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442b1d0
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442b024
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442ae20
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x442ac1c
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x442aba4
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x442a9f8
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x442a818

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x304, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x4429dd8
	bool IsStringPulled();// 0x2049ba0
	bool IsPartial();// 0x4429db0
	float GetPathLength();// 0x4429d88
	float GetPathCost();// 0x4429d60
	FString GetDebugString();// 0x4429ca0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x4429c20
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x4429b50

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x435093c
	int GetObjectCount();// 0x4350914
	int GetNewAvoidanceUID();// 0x43508ec
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x435085c

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x98, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4, Size: 4]
	FString PVEBordersName;//[Offset: 0xb8, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xc4, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0xd0, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x120, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x44a4694
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x44a4614

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2dc, Size: 4]
	AkComponent* AkComponent;//[Offset: 0x2e0, Size: 4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	void StopAmbientSound();// 0x4e1f71c
	void StartAmbientSound();// 0x4e1f708

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x270, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x274, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x280, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x284, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x288, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x294, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x298, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x29c, Size: 4]
	FString EventName;//[Offset: 0x2a0, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x4e21b24
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x4e217f0
	void StopPlayingID(int StopEventID);// 0x4e21778
	void Stop();// 0x4e21764
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4e214ec
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x4e2146c
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x4e212d0
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4e210f0
	void SetOutputBusVolume(float BusVolume);// 0x4e21078
	void SetListeners(out const AkComponent*[] Listeners);// 0x4e20fac
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x4e20f34
	void SetAutoDestroy(bool in_AutoDestroy);// 0x4e20eb8
	void SetAttenuationScalingFactor(float Value);// 0x4e20e40
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x4e20d38
	void PostTrigger(FString Trigger);// 0x4e20be0
	int PostAssociatedAkEvent();// 0x4e20bb8
	int PostAkEventByName(FString in_EventName);// 0x4e20af4
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x4e209ec
	float GetAttenuationRadius();// 0x4e209c4

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x310, Size: 1328]
	float Priority;//[Offset: 0x840, Size: 4]
	float BlendRadius;//[Offset: 0x844, Size: 4]
	float BlendWeight;//[Offset: 0x848, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	void RemoveBlendable(interface class InBlendableObject);// 0x44615f4
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x44614c4

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2e4, Size: 4]
	void SetRadius(float NewRadius);// 0x445efd4
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x445ef5c

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2dc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	void ToggleEnabled();// 0x440bc0c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x440bb9c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x440bb24
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x440baac
	void SetLightColor(LinearColor NewLightColor);// 0x440ba30
	void SetEnabled(bool bSetEnabled);// 0x440b9b0
	void SetCastShadows(bool bNewValue);// 0x440b930
	void SetBrightness(float NewBrightness);// 0x440b8b8
	void SetAffectTranslucentLighting(bool bNewValue);// 0x440b838
	void OnRep_bEnabled();// 0x1f3dabc
	bool IsEnabled();// 0x440b810
	LinearColor GetLightColor();// 0x440b7cc
	float GetBrightness();// 0x440b7a4

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x36c, Size: 4]
	float AttenuationRadius;//[Offset: 0x370, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	float LightFalloffExponent;//[Offset: 0x378, Size: 4]
	float SourceRadius;//[Offset: 0x37c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x380, Size: 4]
	float SourceLength;//[Offset: 0x384, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x38c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x390, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x398, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x445f6e8
	void SetSourceLength(float NewValue);// 0x445f670
	void SetSoftSourceRadius(float bNewValue);// 0x445f5f8
	void SetSimulateRectLight(bool NewValue);// 0x445f578
	void SetSimulatePortalLight(bool NewValue);// 0x445f4f8
	void SetRectLightSourceWidth(float NewValue);// 0x445f480
	void SetRectLightSourceHeight(float NewValue);// 0x445f408
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x445f390
	void SetAttenuationRadius(float NewRadius);// 0x445f318

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x298, Size: 4]
	float MaxDrawDistance;//[Offset: 0x29c, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2a0, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4, Size: 1]
	int ShadowMapChannel;//[Offset: 0x2a8, Size: 4]
	float MinRoughness;//[Offset: 0x2b0, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2b4, Size: 4]
	int LightPriority;//[Offset: 0x2b8, Size: 4]
	float ShadowBias;//[Offset: 0x2bc, Size: 4]
	float ShadowSharpen;//[Offset: 0x2c0, Size: 4]
	float ContactShadowLength;//[Offset: 0x2c4, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c8, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2c9, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2cc, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2d0, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2dc, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	float IESBrightnessScale;//[Offset: 0x2e4, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2e8, Size: 4]
	float DisabledBrightness;//[Offset: 0x2ec, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	float BloomScale;//[Offset: 0x2f4, Size: 4]
	float BloomThreshold;//[Offset: 0x2f8, Size: 4]
	Color BloomTint;//[Offset: 0x2fc, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x304, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x440cb54
	void SetTemperature(float NewTemperature);// 0x440cadc
	void SetShadowBias(float NewValue);// 0x440ca64
	void SetLightPriority(int Priority);// 0x440c9ec
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x440c97c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x440c904
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x440c88c
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x440c814
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x440c74c
	void SetIntensity(float NewIntensity);// 0x440c6d4
	void SetIndirectLightingIntensity(float NewIntensity);// 0x440c65c
	void SetIESTexture(TextureLightProfile* NewValue);// 0x440c5e4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x440c564
	void SetBloomTint(Color NewValue);// 0x440c4f4
	void SetBloomThreshold(float NewValue);// 0x440c47c
	void SetBloomScale(float NewValue);// 0x440c404
	void SetAffectTranslucentLighting(bool bNewValue);// 0x440c384
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x440c304
	void ForceUpdateShadowState();// 0x440c2f0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x270, Size: 16]
	float Brightness;//[Offset: 0x280, Size: 4]
	float Intensity;//[Offset: 0x284, Size: 4]
	Color LightColor;//[Offset: 0x288, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28c, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28c, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x290, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x294, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x440dd28
	void SetCastShadows(bool bNewValue);// 0x440dca8
	LinearColor GetLightColor();// 0x440dc64

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xd8, Size: 4]
	float TextureMultiplier;//[Offset: 0xdc, Size: 4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2dc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	void OnRep_bEnabled();// 0x1f3dabc

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x298, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x29c, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x2a0, Size: 4]
	int CubemapResolution;//[Offset: 0x2a4, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x2a8, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2b0, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x2c0, Size: 4]
	float Contrast;//[Offset: 0x2c4, Size: 4]
	float OcclusionExponent;//[Offset: 0x2c8, Size: 4]
	float MinOcclusion;//[Offset: 0x2cc, Size: 4]
	Color OcclusionTint;//[Offset: 0x2d0, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2d4, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x378, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4485304
	void SetOcclusionTint(out const Color InTint);// 0x4485280
	void SetOcclusionExponent(float InOcclusionExponent);// 0x4485208
	void SetOcclusionContrast(float InOcclusionContrast);// 0x4485190
	void SetMinOcclusion(float InMinOcclusion);// 0x4485118
	void SetLightColor(LinearColor NewLightColor);// 0x448509c
	void SetIntensity(float NewIntensity);// 0x4485024
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4484fac
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x4484eac
	void SetCubemap(TextureCube* NewCubemap);// 0x4484e34
	void RecaptureSky();// 0x4484e20

--------------------------------
Class: Halloween_CarPosition_C.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	ArrowComponent* Arrow;//[Offset: 0x2e0, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e4, Size: 4]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x584, Size: 4]
	float ArrowSize;//[Offset: 0x588, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	float ScreenSize;//[Offset: 0x590, Size: 4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 1]
	void SetArrowColor(LinearColor NewColor);// 0x4347998

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x2dc, Size: 4]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x270, Size: 4]
	enum ReflectionSourceType;//[Offset: 0x274, Size: 1]
	float Brightness;//[Offset: 0x278, Size: 4]
	Vector CaptureOffset;//[Offset: 0x27c, Size: 12]
	bool bUseHighPrecisionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	float DesaturatedNormalizeRatio;//[Offset: 0x290, Size: 4]
	Vector4 IrradianceMap;//[Offset: 0x2a0, Size: 16]
	Guid stateID;//[Offset: 0x320, Size: 16]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x314, Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x320, Size: 12]
	float RTCacheLifeTime;//[Offset: 0x32c, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x330, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x334, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x338, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x33c, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x1ffd0b8
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x1ffd040
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x1ffcf00
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x1ffcdf0
	static DecalBakingActorMgr* GetInstance();// 0x1ffcdc8
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x1ffccc0
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x1ffcbe4
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x1ffcb20
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x1ffca20
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x1ffc8ec
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x1ffc74c
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x1ffc55c

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x2dc, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x2e0, Size: 12]
	void SetMaxDecalProcessPerFame(int InValue);// 0x216b574
	void OnBakingFinished(TextureRenderTarget2D* InRenderTarget);// 0x1f390f8
	int GetMaxDecalProcessPerFame();// 0x1fa3758
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x43790b4
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x437903c
	void DoCompression(TextureRenderTarget2D* InRenderTarget);// 0x2006b7c
	Texture* CompressTexture(TextureRenderTarget2D* InRenderTarget, bool bInRGBA, bool bUsePunchthroughAlpha, bool bUseOptimizeOpaque);// 0x4378ecc
	void CancelDecalBakingRequest(int RequestID);// 0x4378e54
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x4378ddc
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x4378ba0
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x4378964

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xa8, Size: 4]
	int SizeY;//[Offset: 0xac, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb0, Size: 16]
	byte AddressX;//[Offset: 0xc0, Size: 1]
	byte AddressY;//[Offset: 0xc1, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xc3, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	byte OverrideFormat;//[Offset: 0xc5, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x4, Size: 12]
	int WeaponAvatarID;//[Offset: 0x10, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 4]
	float LastActiveTime;//[Offset: 0x18, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	LinearColor Color;//[Offset: 0x4, Size: 16]
	Vector2D Scale;//[Offset: 0x14, Size: 8]
	Vector2D Offset;//[Offset: 0x1c, Size: 8]
	float Rotation;//[Offset: 0x24, Size: 4]
	enum Direction;//[Offset: 0x28, Size: 1]
	LinearColor UVClip;//[Offset: 0x2c, Size: 16]
	LinearColor UVInfo;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x270, Size: 4]
	Vector DecalSize;//[Offset: 0x274, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x280, Size: 16]
	LinearColor TintColor;//[Offset: 0x290, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x2a0, Size: 16]
	float CropRotation;//[Offset: 0x2b0, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	LinearColor GetUVScaleBias();// 0x4379928
	BoxSphereBounds GetDecalBounds();// 0x43798d4
	LinearColor GetCropUVScaleBias();// 0x43798b4

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x2dc, Size: 4]

--------------------------------
Class: SceneCaptureCameraActor.CameraActor.Actor.Object
	WidgetCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x830, Size: 4]

--------------------------------
Class: WidgetCaptureComponent2D.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2d4, Size: 1]
	float FOVAngle;//[Offset: 0x2d8, Size: 4]
	float OrthoWidth;//[Offset: 0x2dc, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2e0, Size: 4]
	byte CaptureSource;//[Offset: 0x2e4, Size: 1]
	byte CompositeMode;//[Offset: 0x2e5, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 1328]
	float PostProcessBlendWeight;//[Offset: 0x820, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x830, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x874, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x880, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 1]
	void CaptureScene();// 0x4474470
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4474340

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x26d, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x270, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x27c, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x288, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x294, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 1]
	float LODDistanceFactor;//[Offset: 0x2a4, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x2a8, Size: 4]
	int CaptureSortPriority;//[Offset: 0x2ac, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2b0, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4473d98
	void ShowOnlyActorComponents(Actor* InActor);// 0x4473d20
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x4473ca8
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4473c30
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x4473bb8
	void HideComponent(PrimitiveComponent* InComponent);// 0x4473b40
	void HideActorComponents(Actor* InActor);// 0x4473ac8
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x4473a50
	void ClearHiddenComponents();// 0x4473a3c

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2dc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	void OnRep_bEnabled();// 0x1f3dabc

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x270, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x274, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x284, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x288, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x28c, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x29c, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2a0, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x2a4, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2b4, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2c4, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x2c8, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2cc, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2dc, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2e0, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x2e4, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2e8, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2ec, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2f0, Size: 16]
	float FogHeightFalloff;//[Offset: 0x300, Size: 4]
	float FogMaxOpacity;//[Offset: 0x304, Size: 4]
	float StartDistance;//[Offset: 0x308, Size: 4]
	float FogCutoffDistance;//[Offset: 0x30c, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x314, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x318, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x31c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x32c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x330, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x334, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x33c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x340, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x350, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x438cd98
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x438cd20
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x438cc40
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x438cbc8
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x438cb50
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x438cad4
	void SetVolumetricFogDistance(float NewValue);// 0x438ca5c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x438c9ec
	void SetVolumetricFog(bool bNewValue);// 0x438c96c
	void SetStartDistance(float Value);// 0x438c8f4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x438c87c
	void SetInscatteringTextureTint(LinearColor Value);// 0x438c800
	void SetInscatteringColorCubemapAngle(float Value);// 0x438c788
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x438c710
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x438c698
	void SetFogMaxOpacity(float Value);// 0x438c620
	void SetFogInscatteringColor(LinearColor Value);// 0x438c5a4
	void SetFogHeightFalloff(float Value);// 0x438c52c
	void SetFogDensity(float Value);// 0x434c09c
	void SetFogCutoffDistance(float Value);// 0x438c4b4
	void SetDirectionalInscatteringStartDistance(float Value);// 0x438c43c
	void SetDirectionalInscatteringGapControl(float Value);// 0x438c3c4
	void SetDirectionalInscatteringExponent(float Value);// 0x438c34c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x438c2d0
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x438c210
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x438c154

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x2e4, Size: 4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x44947b8
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x4494740

--------------------------------
Class: SpotLightComponent.PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x3a4, Size: 4]
	float OuterConeAngle;//[Offset: 0x3a8, Size: 4]
	float LightShaftConeAngle;//[Offset: 0x3ac, Size: 4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x4494c60
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x4494be8

--------------------------------
Class: Bp_MInitv_RandomEvent_Trigger_C.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	BoxComponent* Box;//[Offset: 0x2e0, Size: 4]
	FString EventName;//[Offset: 0x2e4, Size: 12]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x594, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x435ab78
	Vector GetUnscaledBoxExtent();// 0x435ab4c
	Vector GetScaledBoxExtent();// 0x435aaf4

--------------------------------
Class: BP_MiniTVSpline_C.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	SplineComponent* Spline;//[Offset: 0x2e0, Size: 4]
	bool MoveActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x584, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x5d4, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5e8, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5fc, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x610, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x628, Size: 4]
	float Duration;//[Offset: 0x62c, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x632, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x633, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 1]
	float LoopPosition;//[Offset: 0x638, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x63c, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	void UpdateSpline();// 0x4490bd0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4490afc
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x449099c
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x44901f4
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x44907e8
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4490688
	void SetSplineWorldPoints(out const Vector[] Points);// 0x44905b4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x44904ac
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x449034c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4490278
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x44901f4
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4490094
	void SetDrawDebug(bool bShow);// 0x4490014
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x448ff48
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x448fe34
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x448fd64
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x448fca0
	bool IsClosedLoop();// 0x448fc78
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x448fbe4
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x448fb00
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x448fa6c
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x448f988
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x448f8f4
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x448f860
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x448f77c
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x448f6e8
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448f5c4
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448f4f0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448f41c
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x448f290
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x448f154
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x448f018
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448eef4
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448dcf8
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448ee20
	byte GetSplinePointType(int PointIndex);// 0x448eda0
	float GetSplineLength();// 0x448ed78
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x448ec9c
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x448ec0c
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x448eb7c
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448ea58
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448e984
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448e8b0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448e7a0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448e6dc
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448e618
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448e4f4
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448e420
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448e34c
	int GetNumberOfSplinePoints();// 0x448e324
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448e200
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448e12c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448e058
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x448def0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x448ddcc
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448dcf8
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x448dc78
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x448dbf8
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x448db78
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x448da54
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448d980
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x448d8ac
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x448d81c
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x448d79c
	float GetCurvatureAtDistance(float Distance);// 0x448d71c
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x448d648
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448d564
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x448d418
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448d334
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x448d298
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448d1b4
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448d0e0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448cffc
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448cf18
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x448ce8c
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x448cda8
	void ClearSplinePoints(bool bUpdateSpline);// 0x448cd28
	void AddSplineWorldPoint(out const Vector Position);// 0x448cc9c
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x448cb3c
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x448ca24
	void AddSplineLocalPoint(out const Vector Position);// 0x448c998
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x448c87c
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x448c774

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: Lobby_Main_int_C.LuaLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 4]
	void OnShowLobbyGM(LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void OnSimulateTestReConnect(LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void OnAndroidBack(LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void RegistPersistLevelObjs(FrontendUtils* Utils);// 0x2bbd2f4
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x2bbd2f4
	void InpActEvt_N_K2Node_InputKeyEvent(Key Key);// 0x2bbd2f4
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x2bbd2f4
	void InpActEvt_G_K2Node_InputKeyEvent(Key Key);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_Lobby_Main_int(int EntryPoint, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key3, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, Key K2Node_InputKeyEvent_Key, bool CallFunc_CheckIfMenuOpen_ret, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key K2Node_InputKeyEvent_Key4);// 0x2bbd2f4
	void Dispatcher_OpenBox__DelegateSignature(SkeletalMeshActor* NewParam);// 0x2bbd2f4
	FrontendUtils* frontUtils;//[Offset: 0x334, Size: 4]
	bool blockBackScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	FName lastSceneCamera;//[Offset: 0x340, Size: 8]
	SettingConfig_C* SetConfig;//[Offset: 0x348, Size: 4]
	delegate Dispatcher_OpenBox;//[Offset: 0x34c, Size: 12]
	SkyLight* SkyLight_1_EdGraph_10_RefProperty;//[Offset: 0x358, Size: 4]
	PointLight* PointLight_0_EdGraph_10_RefProperty;//[Offset: 0x35c, Size: 4]
	DirectionalLight* DirectionalLight_0_EdGraph_10_RefProperty;//[Offset: 0x360, Size: 4]
	CameraActor* LobbySecondCam_EdGraph_10_RefProperty;//[Offset: 0x364, Size: 4]
	CameraActor* LobbyFirstCam_EdGraph_10_RefProperty;//[Offset: 0x368, Size: 4]

--------------------------------
Class: LuaLevelScriptActor.LevelScriptActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x324, Size: 12]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x2e8, Size: 4]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x2638bfc
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x2638ac8
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x2638a50
	void SubDefaultChildUI(out const FString[] childList);// 0x263891c
	void SubDefaultBaseUI(FString baseUI);// 0x2638860
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x26386a8
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x26385ec
	void RestoreWidgetZorder(const int Index);// 0x2638574
	void RestoreAllWidgetZorder();// 0x2638560
	bool IsTopStackPanel();// 0x2638538
	bool IsPushedPanel();// 0x2638510
	bool InCombatState();// 0x26384e8
	void HandleUIMessageNoFetch(FString UIMessage);// 0x263842c
	void HandleUIMessage(FString UIMessage);// 0x2638370
	void HandleStopAsyncLoad();// 0x263835c
	void HandleDynamicDestroy();// 0x2638348
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x26382c8
	void HandleDynamicCreation(bool isAsyncLoad);// 0x2638248
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x263818c
	FString GetTopStackPanelSrcTag();// 0x26380cc
	FString GetTopStackPanelDstTag();// 0x263800c
	FString GetGameStatus();// 0x2637f4c
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x2637ea0
	void AddToTopStackPanel();// 0x2637e8c

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x2dc, Size: 4]
	Object* OwningObject;//[Offset: 0x2e0, Size: 4]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x2e4, Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xb0, Size: 12]
	UAEPlayerController* OwningController;//[Offset: 0xf8, Size: 4]
	LuaClassObj* LuaObject;//[Offset: 0x100, Size: 4]
	UAEUserWidget* GetWidget(int Index);// 0x261bc90
	LuaClassObj* GetLuaObject();// 0x261bc68
	GameFrontendHUD* GetGameFrontendHUD();// 0x261bc40

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x4579a08
	bool IsEnableRemoveDynamicWidgets();// 0x45799e0
	UAEUserWidget*[] GetWidgetList();// 0x4579920
	UAEUserWidget* GetWidgetByName(FString InName);// 0x457985c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x45797dc
	FrontendHUD* GetOwningFrontendHUD();// 0x43a29cc
	int GetDefaultSceneCamera();// 0x43a2b30
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x45795fc

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 12]
	FString Container;//[Offset: 0xc, Size: 12]
	int ZOrder;//[Offset: 0x18, Size: 4]
	class Object* WidgetClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x10c, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x118, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x124, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x130, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x13c, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x148, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x154, Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x45770f8
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x4576f44
	void OnPreLoadMap(FString MapName);// 0x4576e80
	void OnPostLoadMapWithWorld(World* World);// 0x4330fd8
	void OnGameViewportClientCreated();// 0x1f4cfe0
	World* GetWorld();// 0x22e3bb0
	FrontendUtils* GetUtils();// 0x4576e58
	PlayerController* GetPlayerController();// 0x4576e30
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x4576cd0
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x4576c50
	GameViewportClient* GetGameViewportClient();// 0x4576c28
	GameMode* GetGameMode();// 0x4576c00
	GameInstance* GetGameInstance();// 0x43a3030
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x4576a38
	void EnableGuiTest(bool bEnable);// 0x45769b8
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x45768b8
	void ClearLogicManagerByName(FString managerName);// 0x4576760

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1a8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1b4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1b8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1bc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1c8, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1d4, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x210, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x21c, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x280, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x4578ae0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x45789c0
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x45787f0
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x4578590
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x4578370
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x45782a8
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x45781ec
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x4578130
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x4578074
	void PopAllPushedUI();// 0x4578060
	void OnAllSceneCamerasRegistered();// 0x1f605a0
	bool IsPushedPanel(out const FName managerName);// 0x4577fcc
	bool IsNoRenderClient();// 0x4577fa4
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x4577e44
	FString GetUIStackTopSrcTag();// 0x4577d84
	FString GetUIStackTopDstTag();// 0x4577cc4
	FString GetUIStackTop();// 0x4577c04
	CameraActor* GetSceneCamera();// 0x4577bdc
	FrontendHUD* GetOwningFrontendHUD();// 0x4577bb4
	Object* GetGlobalUIEventDispatcher();// 0x4577b8c
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x4577b0c
	void EnableLobbyMainLight(bool NewEnable);// 0x4577a8c
	void ClearAllSceneCameras();// 0x4577a78

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x304, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x20834f4
	void RemoveWidget(UserWidget* Widget);// 0x457dec4
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x20cc890
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x457de08
	void AddWidgetInternal(UserWidget* Widget);// 0x228f6e8
	void AddWidget(UserWidget* Widget);// 0x457dd90

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1b8, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1bc, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1c0, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1c4, Size: 4]
	Property*[] Params;//[Offset: 0x240, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x254, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x260, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x280, Size: 32]
	float TickRate;//[Offset: 0x2a0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2a8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2b0, Size: 8]
	enum FadingStatus;//[Offset: 0x2c0, Size: 1]
	float CurrentOpacity;//[Offset: 0x2c4, Size: 4]
	float FadingInTime;//[Offset: 0x2c8, Size: 4]
	float FadingOutTime;//[Offset: 0x2cc, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x2d4, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x2e0, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x2f0, Size: 12]
	bool Visible();// 0x457cc14
	void UnRegistFromGameFrontendHUD();// 0x457cc00
	void SynchronizeBlueprintProperties();// 0x2bbd2f4
	void Show();// 0x457cbec
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x457cb74
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x457cafc
	static void SetOnWidgetShow(delegate onShow);// 0x457ca60
	static void SetOnWidgetHide(delegate OnHide);// 0x457c9c4
	static void SetOnClearUIStack(delegate onClear);// 0x457c928
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x457c7e0
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x457c768
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x457c6a4
	void ReceiveShow();// 0x2bbd2f4
	void ReceiveHide();// 0x2bbd2f4
	void ReceivedMountWidget();// 0x2175bfc
	void ReceivedInitWidget();// 0x2bbd2f4
	void ReCachedUIMsgFunction();// 0x457c690
	static void PushOpenedUIStack(FString Name);// 0x457c5dc
	static void PopOpenedUIStack(FString curOpen);// 0x457c528
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x2bbd2f4
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x2bbd2f4
	void OnRightClicked(Vector2D TempScreenPos);// 0x2bbd2f4
	void OnFadeOutFinished();// 0x2175c34
	void OnFadeInFinished();// 0x2131cc0
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x2bbd2f4
	void OnClicked(Vector2D TempScreenPos);// 0x2bbd2f4
	void OnClearUIStack__DelegateSignature();// 0x2bbd2f4
	bool IntCompare(int A, int B, enum CompareType);// 0x457c420
	void InitWidget(bool Recursive);// 0x457c3a0
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x212f598
	void Hide();// 0x457c38c
	void HandleUIMessageBattle(FString UIMessage);// 0x457c2d0
	void HandleUIMessage(FString UIMessage);// 0x457c214
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x457c080
	Widget* GetWidgetContainsName(FString Name);// 0x457bfbc
	UAEUserWidget* GetParentWidget();// 0x22f5d58
	PlayerController* GetOwningPlayer();// 0x1f40108
	LogicManagerBase* GetOwningLogicManager();// 0x457bf94
	FrontendHUD* GetOwningFrontendHUD();// 0x457bf6c
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x457beec
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x457bda0
	UserWidget* GetChildWidget(FString WName);// 0x457bcdc
	Margin GetAdapation();// 0x457bcb4
	bool FloatCompare(float A, float B, enum CompareType);// 0x457bbac
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x457bb34
	void DestroyWidget();// 0x457bb20
	static void ClearOpenedUIStack();// 0x457bb0c
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x457ba50
	void ClearFunctionCache();// 0x457ba3c
	void ClearClassWidgetTree();// 0x457ba28
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x2094bb0

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5a1, Size: 1]
	enum TimingPolicy;//[Offset: 0x5a2, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x5a4, Size: 4]
	IntPoint DrawSize;//[Offset: 0x5a8, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	float RedrawTime;//[Offset: 0x5b4, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x5c0, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	Vector2D Pivot;//[Offset: 0x5cc, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5d8, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x5dc, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x5ec, Size: 16]
	float OpacityFromTexture;//[Offset: 0x5fc, Size: 4]
	enum BlendMode;//[Offset: 0x600, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 1]
	UserWidget* Widget;//[Offset: 0x604, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x618, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x61c, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x620, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x624, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x628, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x62c, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x630, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x634, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x638, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 1]
	FName SharedLayerName;//[Offset: 0x640, Size: 8]
	int LayerZOrder;//[Offset: 0x648, Size: 4]
	enum GeometryMode;//[Offset: 0x64c, Size: 1]
	float CylinderArcAngle;//[Offset: 0x650, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x38a0eac
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x38a0e30
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x38a0db8
	void SetDrawSize(Vector2D Size);// 0x38a0d48
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x38a0ccc
	void RequestRedraw();// 0x20c3b5c
	UserWidget* GetUserWidgetObject();// 0x38a0ca4
	TextureRenderTarget2D* GetRenderTarget();// 0x38a0c7c
	LocalPlayer* GetOwnerPlayer();// 0x38a0c54
	MaterialInstanceDynamic* GetMaterialInstance();// 0x38a0c2c
	Vector2D GetDrawSize();// 0x38a0bec

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0, Size: 152]
	delegate BrushDelegate;//[Offset: 0x168, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x178, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x188, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	FString imageSrcPath;//[Offset: 0x19c, Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1a8, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1b0, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	void SetOpacity(float InOpacity);// 0x387ab50
	void SetDontPaintWhenColorZero(bool Enable);// 0x387aad0
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x387aa50
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x387a9d4
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x387a910
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x387a84c
	void SetBrushFromPathAsync(FString ResourcePath);// 0x387a790
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x387a718
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x387a6a0
	void SetBrush(out const SlateBrush InBrush);// 0x387a538
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x387a510
	bool GetDontPaintWhenColorZero();// 0x387a4e8
	bool GetDontPaintWhenAlphaZero();// 0x387a4c0

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x330, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	int NumSpectators;//[Offset: 0x33c, Size: 4]
	int NumPlayers;//[Offset: 0x340, Size: 4]
	int NumBots;//[Offset: 0x344, Size: 4]
	float MinRespawnDelay;//[Offset: 0x348, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x34c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x350, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x354, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x360, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	void StartMatch();// 0x4390670
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x43905f0
	void Say(FString Msg);// 0x439052c
	void RestartGame();// 0x4390510
	bool ReadyToStartMatch();// 0x43904e0
	bool ReadyToEndMatch();// 0x43904b0
	void K2_OnSetMatchState(FName NewState);// 0x2bbd2f4
	bool IsMatchInProgress();// 0x4390480
	bool HasMatchEnded();// 0x4390450
	FName GetMatchState();// 0x439042c
	void EndMatch();// 0x4390410
	void AbortMatch();// 0x1fa678c

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x618, Size: 8]
	FString PlayerName;//[Offset: 0x620, Size: 12]
	uint32 PlayerKey;//[Offset: 0x62c, Size: 4]
	uint64 UId;//[Offset: 0x630, Size: 8]
	int TeamID;//[Offset: 0x644, Size: 4]
	int CampID;//[Offset: 0x648, Size: 4]
	Vector CharacterLocation;//[Offset: 0x64c, Size: 12]
	int RoomMode;//[Offset: 0x658, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x65c, Size: 20]
	int planeAvatarId;//[Offset: 0x670, Size: 4]
	int DyeDebugFlag;//[Offset: 0x674, Size: 4]
	int PlayerStartID;//[Offset: 0x678, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x680, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6b4, Size: 12]
	int InPacketLossRate;//[Offset: 0x6c0, Size: 4]
	int OutPacketLossRate;//[Offset: 0x6c4, Size: 4]
	int ClientNetworkType;//[Offset: 0x6c8, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e5, Size: 1]
	int GameReplayType;//[Offset: 0x6e8, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x6ec, Size: 44]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x718, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x724, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x730, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	FString Nation;//[Offset: 0x738, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x74c, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x750, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x754, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x760, Size: 12]
	int RolewearIndex;//[Offset: 0x76c, Size: 4]
	int[] equip_plating_list;//[Offset: 0x770, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x77c, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x784, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x790, Size: 24]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x7a8, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x7b4, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x7c0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x7cc, Size: 4]
	int PveLevel;//[Offset: 0x7d0, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x7d4, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x7e0, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x7ec, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x7f0, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x7fc, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x808, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x814, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x824, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x830, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x8a8, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x8e4, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x8f0, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x92c, Size: 60]
	int[] VehicleMusicList;//[Offset: 0x968, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0x974, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x980, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0x98c, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0x998, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0x9d4, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xa10, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xa1c, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xa28, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xa34, Size: 4]
	BornItem[] BornItems;//[Offset: 0xa38, Size: 12]
	int AnchorPlatResID;//[Offset: 0xa44, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xa48, Size: 4]
	int64 LastGameResultTime;//[Offset: 0xa60, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 1]
	FString IpCountryStr;//[Offset: 0xa6c, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa79, Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7a, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7b, Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0xa7c, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xa84, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xa88, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 1]
	FString[] FriendObservers;//[Offset: 0xa90, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xaf0, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafd, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xb0c, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xb18, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xb24, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xb30, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xb3c, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xb48, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xb54, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xb60, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xb6c, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xb78, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xba0, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 1]
	float NotifyTimeOut;//[Offset: 0xbb0, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xbb4, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xbb8, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xbc4, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	int AntiDataCD;//[Offset: 0xbe0, Size: 4]
	int ModeID;//[Offset: 0xbe4, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xc10, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xc14, Size: 4]
	bool UseingWeaponScheme();// 0x27ccf00
	void TestShowLongTimeNoOperation();// 0x27ccec4
	void TestShowConfirmDialogOfMisKill();// 0x27cceb0
	void TestRespawn();// 0x1f4cfe0
	void TestLogout();// 0x1f4cfe0
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x27ccd2c
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x27ccbd0
	void SetUsedSimulationCVar(bool Value);// 0x27ccb50
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x27cca70
	void SetPanels(out const UAEUserWidget*[] panels);// 0x27cc99c
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x27cc900
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x27cc820
	void ServerTestLogout();// 0x27cc7c4
	void ServerSetVoiceId(int VoiceID);// 0x27cc710
	void ServerKickSelf();// 0x27cc6b4
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x27cc600
	void ServerExitGame();// 0x27cc5a4
	void ServerAcknowledgeReconnection(uint32 Token);// 0x27cc4f0
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27cc3e0
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x27cc2d0
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x27cc18c
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x27cbe74
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27cbd38
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x27cbbfc
	void Respawn();// 0x27cbbe0
	void ResetUsedSimulationCVar();// 0x27cbbcc
	void ReleaseInGameUI();// 0x27cbbb0
	void ReceivePostLoginInit();// 0x2bbd2f4
	void PrintStatistics();// 0x1f4cfe0
	void PlayerStartIDReceived();// 0x27cbb9c
	void OnRep_WeaponAvatarDataList();// 0x221cf84
	void OnRep_WatchPlayerKey();// 0x27cbb80
	void OnRep_UsedSimulation();// 0x221cf68
	void OnRep_PveLevel();// 0x27cbb64
	void OnRep_PlayerOBInfoList();// 0x27cbb50
	void OnRep_LastGameResultTime();// 0x27cbb34
	void OnRep_IsSpectatingEnemy();// 0x27cbb18
	void OnRep_IsSpectating();// 0x27cbafc
	void OnRep_IsObserver();// 0x27cbae0
	void OnRep_InitialWeaponSchemeInfo();// 0x27cbacc
	void OnRep_InitialEquipmentAvatar();// 0x221ce44
	void OnRep_InitialConsumableAvatar();// 0x221ce28
	void OnRep_FriendObservers();// 0x27cbab0
	void OnRep_CurWeaponSchemeIndex();// 0x1f4cfe0
	void OnRep_bRoomOwner();// 0x27cba94
	void NotifyEnterBattle();// 0x27cba80
	void LuaDoString(FString LuaString);// 0x27cb9bc
	void KickSelf();// 0x1f4cfe0
	bool IsSpectator();// 0x27cb994
	bool IsRoomMode();// 0x27cb970
	bool IsPureSpectator();// 0x27cb948
	bool IsObserver();// 0x27cb920
	bool IsInSpectatingEnemy();// 0x27cb8f8
	bool IsInSpectating();// 0x27cb8d0
	bool IsFriendOrEnemySpectator();// 0x27cb8a8
	bool IsFriendObserver();// 0x27cb880
	bool IsExited();// 0x27cb858
	bool IsDemoRecSpectator();// 0x27cb830
	bool IsDemoPlaySpectator();// 0x20b409c
	bool IsDemoPlayGlobalObserver();// 0x27cb808
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x27cb75c
	void InitWeaponAvatarItems();// 0x27cb740
	void InitVehicleMusicList();// 0x27cb724
	void InitVehicleAvatarList();// 0x27cb708
	void InitVehicleAdvanceAvatarList();// 0x27cb6ec
	void InitIngameUI();// 0x27cb6d0
	void InitGrenadeAvatarList(bool ReInitial);// 0x27cb648
	int GotoSpectating(int PlayerID);// 0x22197ec
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x27cb574
	int GetWeaponAvatarItemId(int ID);// 0x2218de8
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x27cb440
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x27cb3b0
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x27cb388
	uint32 GetCurrentOBPlayerKey();// 0x27cb358
	int GetCurrentOBPlayerInfoIndex();// 0x27cb330
	void ForceNetReady();// 0x27cb31c
	void ExitGame();// 0x27cb308
	void ExhaustCPU();// 0x27cb2f4
	void ExecDSCommand(const FString DSCommand);// 0x2216688
	void ExcuteIntRecord(FString Key, int Count);// 0x27cb158
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x27cafbc
	void EnableInGameUI();// 0x27cafa8
	void DumpUAENetActors();// 0x27caf94
	void DumpRegions();// 0x27caf80
	void DumpNetActors();// 0x1f4cfe0
	void DumpCharacters();// 0x27caf6c
	void DumpAllUI();// 0x1f4cfe0
	void DumpAllObjects();// 0x1f4cfe0
	void DumpAllActors();// 0x1f4cfe0
	void DoLuaFile(FString Filename);// 0x27caea8
	void DoCrash();// 0x1f4cfe0
	void DisableInGameUI();// 0x27cae94
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x27cae04
	void ClientShowTeammateEscapeNotice();// 0x27cade8
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString param1, FString param2);// 0x27cab4c
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x27ca9c0
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x27ca878
	void ClientInitPlayerOBInfoButton();// 0x27ca85c
	void ClientBroadcastRespawnComplete();// 0x27ca840
	void ClientBroadcastReconnectionSuccessful();// 0x27ca824
	void ClientAcknowledgeReconnection(uint32 Token);// 0x27ca7a4
	void CheckPlayerOBInfoButtonInit();// 0x27ca788
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x27ca700
	void CastUIMsg(FString strMsg, FString module);// 0x27ca5b8
	bool CanPickUpItem(ItemDefineID DefineID);// 0x27ca520
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x27ca3d8
	void CallLuaGlobalFunction(FString FunctionName);// 0x27ca314
	void BroadcastRespawnComplete();// 0x27ca300

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5c4, Size: 60]
	FString LuaFilePath;//[Offset: 0x600, Size: 12]

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherID;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UId;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	float KDNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int[] PetAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 76]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int WearIndex;//[Offset: 0x50, Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x48, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BornItem
	int BornItemID;//[Offset: 0x0, Size: 4]
	int BornItemCount;//[Offset: 0x4, Size: 4]
	int BornItemFlags;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int8 PlatID;//[Offset: 0x24, Size: 1]
	FName PlayerType;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	uint32 PlayerKey;//[Offset: 0x3c, Size: 4]
	int TeamID;//[Offset: 0x40, Size: 4]
	int PlayerBornPointID;//[Offset: 0x44, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte gender;//[Offset: 0x4a, Size: 1]
	FString PIC_URL;//[Offset: 0x4c, Size: 12]
	int Level;//[Offset: 0x58, Size: 4]
	int Segment_Level;//[Offset: 0x5c, Size: 4]
	int AceImprintShowId;//[Offset: 0x60, Size: 4]
	int AceImprintBaseId;//[Offset: 0x64, Size: 4]
	int AvatarBoxId;//[Offset: 0x68, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x70, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x7c, Size: 12]
	int[] equip_plating_list;//[Offset: 0x88, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x94, Size: 12]
	int RolewearIndex;//[Offset: 0xa0, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xa4, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xb0, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xbc, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xc8, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xd4, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xe0, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0xec, Size: 12]
	int VehicleSkinInReady;//[Offset: 0xf8, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xfc, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x130, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x15c, Size: 24]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x174, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x180, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x18c, Size: 4]
	int PveLevel;//[Offset: 0x190, Size: 4]
	int[] CharSkillList;//[Offset: 0x194, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1a0, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1b0, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x1c0, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x1cc, Size: 12]
	int[] audioChat;//[Offset: 0x1d8, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x1e8, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x1f0, Size: 8]
	float SyncedTimestamp;//[Offset: 0x1f8, Size: 4]
	float DestinyValue;//[Offset: 0x1fc, Size: 4]
	float WarmScore;//[Offset: 0x200, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x204, Size: 4]
	int LeaderCount;//[Offset: 0x208, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x210, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x218, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x228, Size: 8]
	float RatingScore;//[Offset: 0x230, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float MaxRankingScore;//[Offset: 0x238, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	uint64 WatchPlayerKey;//[Offset: 0x240, Size: 8]
	byte PlatformGender;//[Offset: 0x248, Size: 1]
	int planeAvatarId;//[Offset: 0x24c, Size: 4]
	int DyeDebugFlag;//[Offset: 0x250, Size: 4]
	FString Nation;//[Offset: 0x254, Size: 12]
	int MatchLabel;//[Offset: 0x260, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x264, Size: 4]
	int AnchorPlatResID;//[Offset: 0x268, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x270, Size: 8]
	int64 CorpsID;//[Offset: 0x278, Size: 8]
	int64 CampID;//[Offset: 0x280, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	FString IpCountryStr;//[Offset: 0x28c, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x29c, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2a0, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2a4, Size: 12]
	int LandId;//[Offset: 0x2b0, Size: 4]
	int FollowType;//[Offset: 0x2b4, Size: 4]
	uint64 FollowUID;//[Offset: 0x2b8, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x2c0, Size: 4]
	BornItem[] BornItems;//[Offset: 0x2c4, Size: 12]
	uint64 LuckmateUID;//[Offset: 0x2d0, Size: 8]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int AliasRankID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x168, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x174, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x180, Size: 60]
	<FString,bool> LanguageMap;//[Offset: 0x1bc, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x20c, Size: 4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	BugReporter* BugReporter;//[Offset: 0x214, Size: 4]
	GMLogShare* logShare;//[Offset: 0x218, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x21c, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x228, Size: 4]
	Translator* Translator;//[Offset: 0x22c, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x230, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x234, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x23c, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x287, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x294, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x298, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x29c, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x2a0, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x2c8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2e0, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x2f4, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x2fc, Size: 12]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x310, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x314, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x318, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x31c, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x324, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x330, Size: 12]
	FString InGameLuaDir;//[Offset: 0x33c, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x348, Size: 12]
	FString[] LuaDirList;//[Offset: 0x354, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x360, Size: 12]
	float LuaTickTime;//[Offset: 0x36c, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x398, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x39c, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x3a0, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x3a4, Size: 4]
	TssManager* TssMgr;//[Offset: 0x3a8, Size: 4]
	float PingReportInterval;//[Offset: 0x3c8, Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x468, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x46c, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x478, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0x488, Size: 16]
	delegate SaveUserSettingsDelegate;//[Offset: 0x498, Size: 16]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x4a8, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4b4, Size: 12]
	FString UserSettingsClassName;//[Offset: 0x4c0, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x4cc, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x4d8, Size: 12]
	FString CachedSaveGameName;//[Offset: 0x4e4, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x4f0, Size: 12]
	class Object* UserSettingsClass;//[Offset: 0x4fc, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x500, Size: 4]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x504, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x594, Size: 4]
	int FpsForWindowClient;//[Offset: 0x598, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x59c, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a7, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	int GDPRUserType;//[Offset: 0x5ac, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x5b4, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x5b8, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x5bc, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x5c0, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x5c4, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x5c8, Size: 4]
	float fFPSReportInterval;//[Offset: 0x5cc, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x5e0, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ef, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x678, Size: 4]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x67c, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x680, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x690, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x694, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x698, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x6a4, Size: 4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x261f284
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x261f12c
	void TimeStatisticStop(int Type, FString Name);// 0x261ef8c
	void TimeStatisticStart(int Type);// 0x261ef14
	void TickUdpCollector(float DeltaTime);// 0x261ee9c
	void StatisVisibilityWidget(Widget* Widget);// 0x2006b7c
	void StatisLoadedTexture(Texture* Texture);// 0x2006b7c
	bool StartGrayUpdate();// 0x261ee74
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x261ee60
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x261ee4c
	void ShutdownUnrealNetwork();// 0x20e1f4c
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x261edcc
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x261ec20
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x261e9cc
	bool SaveUserSettingsByDelegate(SaveGame* SaveGame, FString LayoutName);// 0x261e8c4
	void RetryDownload();// 0x261e8b0
	void RetryCDNDownload();// 0x261e89c
	void ResetUserSettings();// 0x261e888
	void ReleaseBattleUtils();// 0x261e874
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x261e6ac
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x261e6ac
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x261e6ac
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x261e6ac
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x261e608
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x261e440
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x261e338
	void OnWebviewActionNotify(FString URL);// 0x261e1e0
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x261e0d4
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x261dfc8
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x261defc
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x261dd0c
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x261dc00
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x261daf0
	void OnNotUpdateFinished();// 0x261dadc
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x261d8f4
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x261d838
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x261d778
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x261d5d8
	void OnGetCountryNoNotify(int country);// 0x261d560
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x261d41c
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x261d2d4
	void OnGameMasterEvent(FString EventName, int Ret);// 0x261d138
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x261d030
	void NotifyLoadingUIOperation(int OperationType);// 0x261cfb8
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x261cf40
	void LuaDoString(FString LuaString);// 0x261ce7c
	bool IsWindowOB();// 0x2049ba0
	bool IsInstallPlatform(FString Platform);// 0x261cd1c
	bool IsCEHideLobbyUI();// 0x261ccf4
	bool HasAnyNetMsgToHandle();// 0x261cccc
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x261cc08
	SaveGame* GetUserSettings();// 0x1f8d9f0
	GDolphinUpdater* GetUpdater();// 0x261cbec
	Translator* GetTranslator();// 0x261cbd0
	bool GetShouldShowAdaptTipInLobby();// 0x261cba8
	GCPufferDownloader* GetPufferDownloader();// 0x261cb8c
	FString GetPingReportInfo();// 0x261cacc
	FString GetPacketLossReportInfo();// 0x261ca0c
	LuaStateWrapper* GetLuaStateWrapper();// 0x1fd4bd0
	LuaEventBridge* GetLuaEventBridge();// 0x261c9e4
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x261c9bc
	GVoiceInterface* GetGVoiceInterface();// 0x227b5a0
	GameStateBase* GetGameState();// 0x261c994
	FString GetFPSReportInfo();// 0x261c8d4
	EffectSettingMgr* GetEffectSettingMgr();// 0x215f0bc
	int GetDetailNetInfoFromGCloud();// 0x1f722e8
	SaveGame* GetCustomSetting(FString InSlotName);// 0x261c810
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x261c7e0
	Object* GetClientNetObj();// 0x261c7b8
	BugReporter* GetBugReporter();// 0x261c790
	BattleUtils* GetBattleUtils();// 0x261c768
	FString GetBattleIDHexStr();// 0x261c6a8
	int GetAutoRunModID();// 0x1f722e8
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x261c680
	void FinishModifyUserSettings();// 0x261c66c
	void EnableFPSAndMemoryLog(bool bEnable);// 0x261c5ec
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x261c564
	void DispatchConfirmMisKill(FString KillerName);// 0x261c4a8
	void CreateBattleUtils();// 0x261c494
	void ClearUIElemSettings();// 0x261c480
	void CheckLocalizationLanguage();// 0x261c46c
	void CallGlobalScriptFunction(FString InFunctionName);// 0x261c3a8
	void BeginModifyUserSettings();// 0x261c394
	void BattleUtilsGameEnd();// 0x261c380
	void AfterLoadedEditorLogin();// 0x261c36c
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x261c26c
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x261c1f4
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x261c17c

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x54, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0x90, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0xa0, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0xb0, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0xc0, Size: 16]
	FString ServerInfo;//[Offset: 0xd0, Size: 12]
	uint32 openGvoiceLog;//[Offset: 0xdc, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0xe0, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0xe4, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf4, Size: 4]
	void UploadRecordFile();// 0x262c6cc
	void TestMic();// 0x262c6b8
	bool TeamSpeakerEnable();// 0x262c69c
	bool TeamMicphoneEnable();// 0x1f5805c
	void SwitchMode(enum CharMode);// 0x262c624
	void SwitchMicphoneWhenCorpsMode();// 0x262c610
	void SwitchCampRoom(enum campMode);// 0x262c598
	void StopRecord();// 0x262c584
	void StopPlayRecordFile();// 0x262c570
	void StopInterphone();// 0x262c55c
	void StopCampMode();// 0x262c548
	void StartRecord();// 0x262c534
	void StartInterphone();// 0x262c520
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x262c35c
	void SpeechToText();// 0x262c348
	void ShowOpenSpeakerAtFirstMsg();// 0x262c334
	void ShowCorpsModeCannotUseLBSVoice();// 0x262c320
	void SetVoiceMode(int Type);// 0x262c2a8
	void SetSpeakerVolum(float Value);// 0x262c230
	void SetSpeakerStatus(bool Flag);// 0x262c1b0
	void SetPlayerVolume(FString InPlayerid, int InVol);// 0x262c014
	void SetMicphoneVolum(float Value);// 0x262bf9c
	void SetMicphoneStatus(bool Flag);// 0x262bf1c
	void SetLbsVoiceRadius(float Radius);// 0x262bea8
	void SetLbsRoomEnableStatus(bool Flag);// 0x262be28
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x262bdb0
	void SetCurrentDownloadFieldID(FString filedId);// 0x262bc54
	void SetAllVoiceStatus(bool Flag);// 0x262bbd4
	void ResetWhenLogOut();// 0x262bbc0
	bool ReportPlayers(FString InExtraInfo);// 0x262ba60
	void ReactiveLbsStatus();// 0x262ba4c
	void QuitTempLbsRoom(FString roomStr);// 0x262b8f4
	void QuitRoom();// 0x262b8e0
	void PlayRecordFile();// 0x262b8cc
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x262b84c
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x262b7c4
	int OpenTeamInterphone();// 0x262b79c
	void OpenSpeakerByTempLbs(bool Open);// 0x262b71c
	int OpenSpeaker();// 0x262b6f4
	void OpenMicByTempLbs(bool Open);// 0x262b674
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x262b660
	int OpenMic();// 0x262b638
	void OpenIngameSpeaker();// 0x262b624
	int OpenIngameMicphone();// 0x262b5fc
	void OpenAllSpeaker(bool ShowTips);// 0x262b57c
	int OpenAllMicphone(bool ShowTips);// 0x262b4f4
	int OpenAllInterphone();// 0x262b4cc
	void OnRoomTypeChanged(FString itemtext);// 0x205b930
	bool LbsSpeakerEnable();// 0x1f58078
	bool LbsMicphoneEnable();// 0x1f58094
	void JoinTempLbsRoom(FString room, FString userId);// 0x262b25c
	void JoinRoom(FString room, FString userId);// 0x262afec
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x262ad7c
	bool IsTeamInterphoneOpenned();// 0x262ad60
	bool IsLbsInterphoneOpenned();// 0x262ad44
	bool IsInterphoneMode();// 0x262ad08
	void InitGVoiceComponent(FString userId);// 0x262abb0
	bool HaveTeamRoom();// 0x262ab88
	bool HaveLbsRoom();// 0x262ab60
	float GetVoiceLength();// 0x262ab38
	int GetPlayerVolume(FString InPlayerid);// 0x262a9d8
	void GetAuthKey();// 0x262a9c4
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x262a900
	void EnbleMicAndSpeakerByRoomName(FString roomName, bool Enable);// 0x262a758
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x262a638
	void DownloadRecordFile();// 0x262a624
	void CommonTestMic();// 0x262a610
	void CloseSpeaker();// 0x262a5fc
	void CloseMic();// 0x262a5e8
	void CloseIngameSpeaker();// 0x262a5d4
	void CloseIngameMicphone();// 0x262a5c0
	void CloseAllSpeaker(bool ShowTips);// 0x262a540
	void CloseAllMicphone(bool ShowTips);// 0x262a4c0
	void CheckAndEnableRoomSpeaker();// 0x262a4ac
	void ChatShowAgeRestrictionMsgInLobby();// 0x262a498
	void ChatShowAgeRestrictionMsgInFighting();// 0x262a484
	void ChatShowAgeRestrictionMsgInChat();// 0x262a470
	void ChatRequestPrivacyInSetting();// 0x262a45c
	void ChatRequestPrivacyInGame();// 0x262a448

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x2610210
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x260fe2c
	void ReadZipLog(FString Filename);// 0x260fcd4
	byte[] CompressLog(bool pullAllLog);// 0x260fbc4

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x21e117c
	static void Init();// 0x262a088

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x124, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x128, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x12c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x144, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	void StartAppUpdate();// 0x2623bec
	void SetEnableCDNGetVersion(bool Enable);// 0x2623b6c
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x2623ab0
	void OnDolphinBGDownloadDone();// 0x2623a9c
	bool IsUpdating();// 0x2623a74
	bool IsGrayUpdate();// 0x2623a4c
	bool IsExamine();// 0x2049ba0
	void Install();// 0x2623a38
	int GetTotalValue();// 0x2623a10
	int GetCurValue();// 0x26239e8
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x26238a8
	float GetCurPercent();// 0x2623880
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x2623800
	uint32 GetChannelID();// 0x26237d8
	void FinishUpdate();// 0x26237c4
	void FinishPufferUpdate();// 0x26237b0
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x1fd3400
	bool EnableCDNGetVersion();// 0x2623788
	void ContinueUpdate();// 0x2623774
	void CancelUpdate();// 0x2623760
	void CancelAppUpdate();// 0x262374c

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x2631df8
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2631ab8
	void PostMsg(FString URL, FString Content);// 0x2631978
	void OnTranslateV2(bool Success, FString Data);// 0x263186c
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x2bbd2f4
	void OnTranslate(bool Success, FString Data);// 0x2631760
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x2631654
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x2bbd2f4
	void OnGetAccessToken(bool Success, FString Data);// 0x2631548
	void OnDetectV2(bool Success, FString Data);// 0x263143c
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x2bbd2f4
	void OnDetect(bool Success, FString Data);// 0x2631330
	bool HasTranslating();// 0x2631308
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2630f74
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2630c34

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString DownloadDir;//[Offset: 0x298, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2a4, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2b0, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2b4, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2c4, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2d0, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2d8, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2dc, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2e0, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2e4, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2e8, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x2f8, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x2fc, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x300, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x308, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x30c, Size: 12]
	bool StopTask(uint64 TaskId);// 0x2628ea4
	int StopMergeBinDiffPak(int outterTaskID);// 0x2628e24
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x2628da4
	void StopBGDownloadNotification();// 0x2628d90
	bool StopAllTask();// 0x2628d68
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x2628c3c
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x2628bc0
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x26289b4
	void SetTempProductIdBase(int ProductIdRaw);// 0x262893c
	void SetTempProductId(FString ProductIdRaw);// 0x26287e4
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x26284c0
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x2628360
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x26282dc
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x2626104
	static int ReturnLocalFiles_LuaState();// 0x2626104
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x262812c
	bool RemountPakFiles();// 0x2628104
	FString ReadFile(FString Filename);// 0x2627f24
	bool PreFetchPakFiles();// 0x2627efc
	int PreFetchODPakFilesUpdate();// 0x2627ed4
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x2627e4c
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x2627dcc
	bool PreFetchODPakFiles(bool Start);// 0x2627d44
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x2627ad4
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x2627934
	int MoveFileTo(FString Filename, FString from, FString to);// 0x26275a4
	int MoveFile(FString from, FString to);// 0x262732c
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x2626f04
	bool IsODPaks(FString FilePath);// 0x2626da4
	bool IsODFileExists(FString Path);// 0x2626ce0
	bool IsInitSuccess();// 0x2626cb8
	bool IsFileReady(FString FilePath);// 0x2626b58
	bool IsFileExist(FString Filename, FString extension);// 0x26268e0
	bool InitializeODPaks();// 0x26268b8
	FString GetTempWorkPath();// 0x26267f8
	void GetProductIDBase(out int[] ProductIDs);// 0x262672c
	void GetProductID(out int[] ProductIDs);// 0x2626660
	int GetODPakNum();// 0x2626638
	FString GetODPakName(FString Path);// 0x26264f4
	uint32 GetInitErrcode();// 0x26264cc
	uint64 GetFileSizeCompressed(FString FilePath);// 0x262636c
	float GetFileSize(FString Filename);// 0x2626208
	FString GetDownloadPath();// 0x2626148
	float GetCurrentSpeed();// 0x2626120
	int GetBatchODPaksDownloadList_LuaState();// 0x2626104
	void EnableUseOldInterface(bool Enable);// 0x2626084
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x2625f24
	static bool DeleteFile(FString fullPath);// 0x2625dcc
	bool ConvertPreFetchFiles();// 0x2625da4
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x2625c9c
	bool ClearUselessODPaks();// 0x2625c74
	bool ClearPreFetchODPaksFiles();// 0x2625c4c
	bool ClearPreFetchFiles();// 0x2625c24
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x2625a38

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x260bd7c

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x20a5ce8

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x2619090
	void StartAppUpdate(bool StartGrayUpdate);// 0x2619010
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x2618f44
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x2618e78
	bool IsUpdating();// 0x2618e50
	bool IsGrayUpdate();// 0x2618e28
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x2618ce8
	void FinishUpdate();// 0x2618cd4
	void ContinueUpdate();// 0x2618cc0
	void CancelUpdate();// 0x2618cac

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x23d4298
	LuaTemBPData*[] GetCurrentParam();// 0x23d4230
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x23d41a8
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, const bool bActive);// 0x23d3fc0

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventId;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x26377c4
	void AddSystem(const FString SystemName, const FString BPPath);// 0x2637554

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	void Init();// 0x2bbd2f4

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssCDNHostInfo;//[Offset: 0x28, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x34, Size: 12]
	static int SendSkdData_LuaState();// 0x2626104
	static int SendEigeninfoData_LuaState();// 0x2626104
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x2626104
	static int OnRecvData_LuaState();// 0x2626104
	static int GetUserTag4Lua_LuaState();// 0x2626104
	static int GetDeviceFeature_LuaState();// 0x2626104
	static int EigenArrayObfuscationVerify_LuaState();// 0x2626104

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString FileSavePath;//[Offset: 0x40, Size: 12]
	FString UrlHash;//[Offset: 0x4c, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	void Start(FString URL);// 0x2632670
	static ImageDownloader* MakeDownloaderInGame();// 0x2632648
	static ImageDownloader* MakeDownloader();// 0x2632620
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x26324c0

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x267a2b4
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x2679fb8
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x2679dd8
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x2bbd2f4
	bool IsChooingZoneAccess();// 0x2679db0
	bool isAllZoneHasPingValue();// 0x2679d88
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x2679bf8
	float GetZoneServerDelay(FString ServerAddress);// 0x2679a94
	int GetMinDealyAddress();// 0x2679a6c
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x26798cc

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x1fe2af8
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x1fe2a80
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x1fe2a08
	void RemoveImage(Image* Image);// 0x1fe2990
	void HandleUserSettingChange();// 0x1fe297c
	LinearColor GetColorByType(int Type);// 0x1fe28f0
	void Clear();// 0x1fe28dc
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x1fe2820
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x1fe2764
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x1fe2658
	void AddColorByType(FString Type, LinearColor Color);// 0x1fe24b4

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x200bf3c
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x200bd98
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x200bd20
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x200bca8

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x2033530
	void RunNextTask();// 0x260af28
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x260adbc
	void ClearOneTask(FString ObjectPath);// 0x260ac64
	void ClearAllTask();// 0x260ac50
	void AddTask(FString ObjectPath, int LoadPriority);// 0x260aab4

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x60, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x78, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x7c, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x88, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb8, Size: 736]
	FString LuaFilePath;//[Offset: 0x398, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x260e828
	void SyncGameInfo(out const BattleGameInfo Info);// 0x260e71c
	void SyncGameExit();// 0x260e708
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x260e50c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x260e434
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x260e354
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x260e228
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x260e08c
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x260df84
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x260debc
	void RequestAllPlayersBattleData(byte DataType);// 0x260de44
	void OnPostLoadMapWithWorld(World* World);// 0x260ddcc
	BattlePlayer* NewBattlePlayer();// 0x260dda4
	BattleAIPlayer* NewBattleAIPlayer();// 0x260dd7c
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x260dcec
	UAEGameMode* GetBattleGameMode();// 0x260dcc4
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x260dbb0
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x260dae4
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x260d93c
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x260d878

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3b8, Size: 8]
	float GridCheckSize;//[Offset: 0x3c0, Size: 4]
	float DeepCheckSize;//[Offset: 0x3c4, Size: 4]
	float HeightCheckSize;//[Offset: 0x3c8, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3cc, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 1]
	int AntiDataCD;//[Offset: 0x3e0, Size: 4]
	int WeatherID;//[Offset: 0x3e4, Size: 4]
	FString WeatherName;//[Offset: 0x3e8, Size: 12]
	int RoomMode;//[Offset: 0x3f4, Size: 4]
	int SeasonIdx;//[Offset: 0x3f8, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x3fc, Size: 4]
	FString ItemTableName;//[Offset: 0x400, Size: 12]
	FString ItemClassPath;//[Offset: 0x40c, Size: 12]
	FString ReplayPushURL;//[Offset: 0x418, Size: 12]
	int ReplayType;//[Offset: 0x424, Size: 4]
	FString ReplayTitle;//[Offset: 0x428, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x434, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x438, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x444, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x450, Size: 12]
	uint32 ServerStartTime;//[Offset: 0x45c, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x464, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x474, Size: 12]
	FString VehicleTableName;//[Offset: 0x480, Size: 12]
	FString VehicleClassPath;//[Offset: 0x48c, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	Vector RegionCenter;//[Offset: 0x49c, Size: 12]
	float RegionRadius;//[Offset: 0x4a8, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x4ac, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x4e8, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x4ec, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x4f0, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x4f8, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x4fc, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x500, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x504, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x508, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x510, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x51c, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x520, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x52c, Size: 12]
	int IsGameModeFpp;//[Offset: 0x538, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x540, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x54c, Size: 60]
	BornItem[] BornItems;//[Offset: 0x588, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x598, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x5a4, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x5b0, Size: 12]
	FString RoomType;//[Offset: 0x5bc, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	int ZoneID;//[Offset: 0x5cc, Size: 4]
	int nClientType;//[Offset: 0x5d0, Size: 4]
	int nBattleType;//[Offset: 0x5d4, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0x8c4, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	float OBInfoTimeStep;//[Offset: 0x9d8, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x9fc, Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0xa08, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xa14, Size: 12]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xab4, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xac0, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xacc, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xadc, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xae8, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xaf4, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb02, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb03, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb05, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xb08, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb14, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xb18, Size: 4]
	float MonsterDropPar;//[Offset: 0xb1c, Size: 4]
	float SceneDropParam;//[Offset: 0xb20, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xb24, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xb28, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xb2c, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xb34, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xb40, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xb4c, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xb58, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xb64, Size: 84]
	int BattleStopJoin;//[Offset: 0xbb8, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xbbc, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xbc0, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xc44, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xc8c, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xc90, Size: 8]
	void WriteStatistics();// 0x27c2f98
	void SyncPlayerNames();// 0x27c2f7c
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x27c2e40
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x27c2d00
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x27c2c04
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x27c2afc
	void SetMaxWeaponReportNum(int Num);// 0x27c2a88
	void SetGameEndReportData();// 0x1f9f930
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x27c29d4
	void RetrieveBattleData(out BattleData OutBattleData);// 0x27c2940
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x210e538
	void ResetGameParamsFromGameMode();// 0x27c2924
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x217d470
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x27c27f0
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x27c26bc
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x27c24c4
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x27c2400
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x27c2380
	void RefreshWorldActiveRange();// 0x27c2364
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x27c22a0
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId);// 0x27c2010
	int RecoardAlivePlayerNum();// 0x27c1fe0
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x27c1f58
	void OnStandAloneGameEnd();// 0x2178360
	void OnReportNetworkData();// 0x1f9f160
	void OnPlayerFiring(uint32 InPlayerKey);// 0x27c1ee0
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1f9f0e0
	void OnObserverLogout(UAEPlayerController* InController);// 0x27c1e68
	void OnObserverLogin(UAEPlayerController* InController);// 0x27c1df0
	void OnMsg(FString Msg);// 0x27c1d2c
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x27c1c5c
	void OnAirDropBoxEmpty(int boxId);// 0x27c1bdc
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x232fa8c
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x232f790
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x27c1b18
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x27c1a80
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x27c19a8
	void NotifyGameModeInit();// 0x226d5a8
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x27c1928
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x27c18a8
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1f9ef30
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x2303628
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x27c16e4
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x27c1570
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x27c14e4
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x27c1464
	bool IsCollectedEventEnabled(byte EventId);// 0x27c13e4
	void InitWorldActiveRange();// 0x27c13c8
	void InitSeasonStatue();// 0x27c13ac
	void InitMissionBoard();// 0x226c07c
	void InitGenerator();// 0x27c1390
	void InitGameParamsFromGameMode();// 0x27c1374
	void InitDynamicTriggers();// 0x27c1358
	void InitDynamicBuildingGroups();// 0x27c133c
	void InitBornWithApple();// 0x27c1320
	void InitAdvertisement();// 0x27c1304
	void Heartbeat();// 0x27c12f0
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x27c1208
	bool HasDynamicBuildingGroup();// 0x27c11e0
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x27c1044
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x27c0f80
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x27c0e48
	int GetSurvivingTeamCount();// 0x27c0e18
	int GetSurvivingCharacterCount();// 0x27c0de8
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x27c0c94
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UId);// 0x27c0c10
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x27c0abc
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x27c0a18
	UAEPlayerController*[] GetObserverControllerList();// 0x27c0958
	void GetMonsterNum(out HeartBeatData Data);// 0x27c08b4
	int GetMaxWeaponReportNum();// 0x27c0898
	Vector GetClassicPlaneDirection();// 0x27c0848
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x27c0784
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x27c06c0
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x1f9e814
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x27c05dc
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x27c055c
	void DestroyAllPickUpObjs();// 0x1f4cfe0
	void DeleteSeasonStatue();// 0x27c0540
	void DeleteDynamicLoadItem();// 0x27c0524
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x27c04a4
	void CreateDynamicBuildingGroups(Vector Offset);// 0x27c0434
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x2bbd2f4
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x27c0368
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x27c0214
	void AddAirDropBox(int boxId, out const Vector pos);// 0x27c0144

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x3ac, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x26d, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	int WorldCompositionID;//[Offset: 0x270, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x274, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x278, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e, Size: 1]
	void SetGroupValid(bool Valid);// 0x27a15f8
	bool IsValidGroup();// 0x27a15c8
	int FindWorldCompositionID();// 0x27a15a0
	void DoPickUp();// 0x27a158c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 4]
	float LocY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x2e4, Size: 4]
	FString StaticMeshPath;//[Offset: 0x2e8, Size: 12]
	FString PicUrl;//[Offset: 0x2f4, Size: 12]
	int ID;//[Offset: 0x300, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x304, Size: 4]
	float NetCullDistance;//[Offset: 0x30c, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x27b5d00
	void OnRep_PicURL();// 0x27b5cd8
	void OnRep_MeshPath();// 0x27b5cec
	void OnRep_Id();// 0x27b5cd8

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2dc, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2e1, Size: 1]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x18c, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x198, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x19c, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x26c, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x2a8, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	FString[] AreaIDList;//[Offset: 0x2b8, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x2c4, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x2d0, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x2dc, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x2e8, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x324, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x344, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x348, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x34c, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x388, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x3c4, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x3d0, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x3e0, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x3e8, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x430, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x448, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x490, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x4dc, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x4e8, Size: 60]
	int DSSwitchSyncLoadId;//[Offset: 0x524, Size: 4]
	void WriteItemSpotStatisticsDatas();// 0x27a5c34
	void WriteItemClassStatisticsDatas_V15();// 0x1f4cfe0
	void WriteItemClassStatisticsDatas();// 0x27a5c20
	void WriteGroupStatisticsDatas();// 0x27a5c0c
	void WriteBuildingStatisticsDatas();// 0x27a5bf8
	void WriteAreaItemStatisticsDatas();// 0x27a5be4
	void WriteAllStatisticsDatasToLog();// 0x229014c
	void WriteAllStatisticsDatas();// 0x1f5a774
	void SetCatetoryRate(<FString,float> Rates);// 0x27a5a38
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x27a5954
	void RegisterBornIslandItem(Actor* Item);// 0x2084cb0
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x27a57f4
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x27a563c
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x27a5410
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x27a52f8
	void RandomGroups();// 0x1f2cc40
	void RandomBornIslandGroups();// 0x27a52dc
	void OnAsyncLoadItemClassFinish(class Actor AcotrClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x27a5090
	void LoadItemGenerateTable();// 0x2175c18
	bool IsCatetoryEnabled();// 0x27a5068
	void InitCatetorys();// 0x27a5054
	void InitCategoryEx();// 0x27a5040
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x27a4f18
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x27a4c38
	int GetItemDefineID(class Object PickUpClass);// 0x2bbd2f4
	float GetCatetoryRate(FString Catetory);// 0x27a4b70
	void GenerateSpotOnTick(float DeltaTime);// 0x1fc9d9c
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x27a4a98
	void DeleteValidGroups();// 0x27a4a84
	void DeleteBornIslandItems();// 0x27a4a70
	bool CheckShouldGenerateItem(int ItemId);// 0x27a49e8
	void CheckRecoverItems();// 0x27a49d4
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x27a48a0

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xcc, Size: 4]
	FString ItemTableName;//[Offset: 0xd0, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0xdc, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xe8, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xf0, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x12c, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x138, Size: 60]
	FString CookedFilePath;//[Offset: 0x174, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x180, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x1fc9b1c
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x1fc9d1c
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1fc9b9c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x278c72c
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x278c660
	void GenerateSpots();// 0x20c3708
	void GenerateSpotOnTick(float DeltaTime);// 0x1fc9d9c
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x278c418
	void CheckTileLevelsVisible();// 0x278c404

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UId;//[Offset: 0x10, Size: 4]
	int ItemId;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x7c, Size: 60]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x457ab90
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x457aa04
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x457a878
	FString GetTableName();// 0x457a7b8
	FString GetRealTableName(FString tableName);// 0x457a674
	bool ConditionAddEmptyRow(out const FName RowName);// 0x457a5e0

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x26d, Size: 1]
	int ID;//[Offset: 0x270, Size: 4]
	int WorldCompositionID;//[Offset: 0x274, Size: 4]
	float HalfHeight;//[Offset: 0x278, Size: 4]
	int SpotProbability;//[Offset: 0x27c, Size: 4]
	float LineOffsetZ;//[Offset: 0x280, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	void SetSpotValid(bool Valid);// 0x27b54d8
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x27b521c
	bool IsSpotValid();// 0x27b51ec
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x27b5020
	bool GenerateSpot();// 0x27a907c
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x27b4ea8

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x280, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x284, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x290, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x27a7438
	void RepeatSpots();// 0x27a7424
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x27a73ac
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x27a7210
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x27a70c0
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x27a6f9c

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x288, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	byte SpotGroupType;//[Offset: 0x28e, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x290, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x294, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x298, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2a4, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x2a8, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x2e4, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x27a9164
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x27a90ac
	bool GenerateSpot();// 0x27a907c
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x27a8f78
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x27a8d08
	int CountCacheItemValeCategory();// 0x27a8ce0
	void ClearCacheItems();// 0x27a8ccc

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	int ItemCount;//[Offset: 0x8, Size: 4]
	FString MetaData;//[Offset: 0xc, Size: 12]
	FString ItemValue;//[Offset: 0x18, Size: 12]
	FString ItemCategory;//[Offset: 0x24, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Actor* HostActor;//[Offset: 0x6c, Size: 4]
	Actor* AttachedActor;//[Offset: 0x70, Size: 4]

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x190, Size: 12]
	byte RegionType;//[Offset: 0x19c, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x1a0, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x1ac, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x1b8, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x1c8, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x204, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x240, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x27c, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x2c4, Size: 4]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x1f4cfe0
	void WriteVehicleSpotStatisticsDatas();// 0x1f4cfe0
	void WriteVehicleClassStatisticsDatas_V15();// 0x1f4cfe0
	void WriteVehicleClassStatisticsDatas();// 0x1f4cfe0
	void WriteAllVehicleStatisticsDatasToLog();// 0x1f4cfe0
	void WriteAllVehicleStatisticsDatas_V15();// 0x1f4cfe0
	void WriteAllVehicleStatisticsDatas();// 0x1f4cfe0
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x27da1cc
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1fc9b9c
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x27d9ff8
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x27d9e24
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x27d9c50
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x27d9a7c
	void RandomGroups();// 0x1f2cc40
	void LoadVehicleGenerateTable();// 0x2bbd2f4
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x27d9710
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x27d9580
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x27d9338
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x27d90f0
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x27d8e84
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x278c72c
	void GenerateSpotOnTick(float DeltaTime);// 0x1fc9d9c
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x27d8cdc
	void DeleteGroups();// 0x27d8cc8
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x27d8bb0
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x27d8938
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x27d874c

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x28c, Size: 1]
	byte RegionType;//[Offset: 0x28d, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f, Size: 1]
	float RandomRotationMin;//[Offset: 0x290, Size: 4]
	float RandomRotationMax;//[Offset: 0x294, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x298, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x2bc, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x27dc2a4
	bool GenerateSpot();// 0x27a907c

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int Hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x58, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UId;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x3cc, Size: 4]
	float Pronetime;//[Offset: 0x3d0, Size: 4]
	float marchDistance;//[Offset: 0x3dc, Size: 4]
	float travelDistance;//[Offset: 0x3e0, Size: 4]
	float DriveDistance;//[Offset: 0x3e4, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x3e8, Size: 4]
	int destroyVehicleNum;//[Offset: 0x3ec, Size: 4]
	int rescueTimes;//[Offset: 0x3f0, Size: 4]
	int NormalItemsNum;//[Offset: 0x3f4, Size: 4]
	int SeniorItemsNum;//[Offset: 0x3f8, Size: 4]
	int GVMemberID;//[Offset: 0x3fc, Size: 4]
	FName PlayerType;//[Offset: 0x400, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x408, Size: 8]
	uint32 PlayerKey;//[Offset: 0x410, Size: 4]
	FString PlayerUID;//[Offset: 0x414, Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	FString iconUrl;//[Offset: 0x424, Size: 12]
	int gender;//[Offset: 0x430, Size: 4]
	int PlayerLevel;//[Offset: 0x434, Size: 4]
	int SegmentLevel;//[Offset: 0x438, Size: 4]
	int AceImprintShowId;//[Offset: 0x43c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x440, Size: 4]
	int AvatarBoxId;//[Offset: 0x444, Size: 4]
	int CampID;//[Offset: 0x448, Size: 4]
	int resID;//[Offset: 0x44c, Size: 4]
	uint64 UId;//[Offset: 0x450, Size: 8]
	FString OpenID;//[Offset: 0x458, Size: 12]
	FString Nation;//[Offset: 0x464, Size: 12]
	int TeamID;//[Offset: 0x470, Size: 4]
	int PlayerBornPointID;//[Offset: 0x474, Size: 4]
	int Kills;//[Offset: 0x478, Size: 4]
	int KillsBeforeDie;//[Offset: 0x47c, Size: 4]
	int Knockouts;//[Offset: 0x480, Size: 4]
	int Assists;//[Offset: 0x48c, Size: 4]
	byte PlatformGender;//[Offset: 0x490, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x494, Size: 4]
	int MatchLabel;//[Offset: 0x498, Size: 4]
	uint32 Killer;//[Offset: 0x49c, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x4a0, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x4a4, Size: 12]
	FString KillerName;//[Offset: 0x4b0, Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x4c0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x4c8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4cc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x4d0, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x4d4, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x4d8, Size: 4]
	int HeadShotNum;//[Offset: 0x4dc, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4e0, Size: 4]
	int KillNumByGrende;//[Offset: 0x4e4, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x4e8, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x4ec, Size: 4]
	int MaxKillDistance;//[Offset: 0x4f0, Size: 4]
	int HealTimes;//[Offset: 0x4f4, Size: 4]
	float DamageAmount;//[Offset: 0x4f8, Size: 4]
	float HealAmount;//[Offset: 0x4fc, Size: 4]
	FString[] KillFlow;//[Offset: 0x500, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x50c, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x518, Size: 12]
	float InDamageAmount;//[Offset: 0x524, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x534, Size: 12]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x544, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x580, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x5cc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x608, Size: 12]
	uint32 Switch;//[Offset: 0x614, Size: 4]
	uint32[] Self;//[Offset: 0x618, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x624, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x630, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x63c, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x648, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x654, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x660, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x69c, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x6a8, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x6ac, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x6b8, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x6bc, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x6c0, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x6c4, Size: 4]
	int[] BuildFlow;//[Offset: 0x6c8, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x6d4, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x6e0, Size: 4]
	float HitShelterDamage;//[Offset: 0x6e4, Size: 4]
	Vector LandLocation;//[Offset: 0x6e8, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x6f4, Size: 12]
	int LandTime;//[Offset: 0x700, Size: 4]
	Vector DeadLocation;//[Offset: 0x704, Size: 12]
	FString DeadDamangeType;//[Offset: 0x710, Size: 12]
	int PveDeadAttacker;//[Offset: 0x71c, Size: 4]
	int PveStageId;//[Offset: 0x720, Size: 4]
	FString DeadTimeStr;//[Offset: 0x724, Size: 12]
	int NearDeathDamageType;//[Offset: 0x730, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x734, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	int BeSavedTimes;//[Offset: 0x740, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x744, Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 1]
	int GamePlayingTime;//[Offset: 0x7a0, Size: 4]
	int ObserverTime;//[Offset: 0x7a4, Size: 4]
	int TouchDownAreaID;//[Offset: 0x7a8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x7ac, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x7b0, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x7c0, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x7cc, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x7d8, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x7e4, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x7f0, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x7fc, Size: 4]
	float InHelicopterTime;//[Offset: 0x800, Size: 4]
	int RevivalNum;//[Offset: 0x804, Size: 4]
	int BeRevivedNum;//[Offset: 0x808, Size: 4]
	int KillNumInVehicle;//[Offset: 0x80c, Size: 4]
	int KillPlayerNum;//[Offset: 0x810, Size: 4]
	int KillAINum;//[Offset: 0x814, Size: 4]
	float TotalSprintDistance;//[Offset: 0x818, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x81c, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x820, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x824, Size: 12]
	int ProneTimes;//[Offset: 0x830, Size: 4]
	int CrouchTimes;//[Offset: 0x834, Size: 4]
	int JumpTimes;//[Offset: 0x838, Size: 4]
	int KillMonsterNum;//[Offset: 0x83c, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x840, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x87c, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x880, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x884, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x8c0, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x8fc, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x900, Size: 4]
	int LightCandleNum;//[Offset: 0x904, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x908, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x944, Size: 12]
	float BattleStateTime;//[Offset: 0x950, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x958, Size: 4]
	int FistKillingCount;//[Offset: 0x95c, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0x960, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x964, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0x9a0, Size: 12]
	int UseHelicoperNum;//[Offset: 0x9ac, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x9b0, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x9bc, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x9c8, Size: 32]
	float UseHelicoperDistance;//[Offset: 0x9e8, Size: 4]
	byte CharmRankIndex;//[Offset: 0x9ec, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x9f0, Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0xa30, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xa34, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xa38, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xa3c, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xa40, Size: 12]
	int KillSnowManCount;//[Offset: 0xa4c, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xa50, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xa58, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xa94, Size: 60]
	int VeteranRecruitIndex;//[Offset: 0xad0, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xad4, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xae0, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xb14, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xb1c, Size: 44]
	int UpassShow;//[Offset: 0xb48, Size: 4]
	int upassKeepBuy;//[Offset: 0xb4c, Size: 4]
	int upassCurValue;//[Offset: 0xb50, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xb58, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xb70, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xb74, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xb78, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xb7c, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xb80, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xb84, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xb88, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xb8c, Size: 4]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xbd0, Size: 104]
	void SetGVMemberIDServerCall(int memberID);// 0x27d103c
	void SetGVMemberID(int memberID);// 0x27d0fc4
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess);// 0x27d0f00
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27d0df0
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27d0cb4
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x27d0b14
	void ReportTaskData(int TaskId, int process);// 0x27d0a58
	void ReportSpecialCollection(int ItemId, int Count);// 0x27d099c
	void ReportSecretAreaID(int SecretAreaID);// 0x27d0924
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x27d0864
	void ReportLikeSwitch(int SwitchSetting);// 0x27d07ec
	void ReportLikeSelf(int LikeType);// 0x27d0774
	void ReportLandLocType(int TouchDownLocType);// 0x27d06fc
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x27d0630
	void ReportLandArea(int TouchDownArea);// 0x27d05b8
	void ReportLabelCheck(int TeammateUID, int Result);// 0x27d04fc
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x27d0484
	void OnRepCampIDBP();// 0x2bbd2f4
	void OnRep_VeteranRecruitIndex();// 0x27d0470
	void OnRep_UpdateKillMonsterNum();// 0x2243364
	void OnRep_UID();// 0x27d045c
	void OnRep_PlayerKillsChange();// 0x2243250
	void OnRep_MatchLabel();// 0x1f4cfe0
	void OnRep_CollectItemRecord();// 0x27d0448
	void OnRep_CampID();// 0x27d0434
	void OnRep_AliasInfo();// 0x27d0420
	void OnClientVeteranRecruitIndexUpdated();// 0x2243094
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x27d03a0
	bool IsSpecialPickItem(int ItemId);// 0x27d0320
	bool IsItemForbidMerge(int ItemResId);// 0x27d0298
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x27d01b4
	int GetVeteranPlayerLevel();// 0x27d0184
	uint32 GetUserIDByMemberID(int memberID);// 0x2242e54
	FString GetUIDString();// 0x27d00c4
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x27d0058
	uint32 GetPlayerKey();// 0x27d0030
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x27cff4c
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x27cfedc
	enum GetMentorPlayerType();// 0x27cfeac
	void ForceUpdateCampCharacterList();// 0x27cfe90
	void ClearTlogData();// 0x27cfe74
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x27cfdb0
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x27cfca8
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x27cfba0

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x384, Size: 60]
	FString LuaFilePath;//[Offset: 0x3c0, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UId;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UId;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int UniqueHitCount;//[Offset: 0xc, Size: 4]
	int KillCount;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x18, Size: 4]
	int TotalOwnTime;//[Offset: 0x1c, Size: 4]
	int TotalUseTime;//[Offset: 0x20, Size: 4]
	int KnockDownCount;//[Offset: 0x24, Size: 4]
	int HeadShootCount;//[Offset: 0x28, Size: 4]
	int KillAICount;//[Offset: 0x2c, Size: 4]
	int KnockDownAICount;//[Offset: 0x30, Size: 4]
	int HeadShootAICount;//[Offset: 0x34, Size: 4]
	int HitAICount;//[Offset: 0x38, Size: 4]
	int UniqueHitAICount;//[Offset: 0x3c, Size: 4]
	int UseCount;//[Offset: 0x40, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x44, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float HealAmount;//[Offset: 0x40, Size: 4]
	int AssistNum;//[Offset: 0x44, Size: 4]
	int HeadShotNum;//[Offset: 0x48, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4c, Size: 4]
	float surviveTime;//[Offset: 0x50, Size: 4]
	int rescueTimes;//[Offset: 0x54, Size: 4]
	int DestroyVehicles;//[Offset: 0x58, Size: 4]
	FString[] KillFlow;//[Offset: 0x5c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x68, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x74, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x78, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x84, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x88, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x8c, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x90, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9c, Size: 4]
	float InDamageAmount;//[Offset: 0xa0, Size: 4]
	int ProneTimes;//[Offset: 0xa4, Size: 4]
	int CrouchTimes;//[Offset: 0xa8, Size: 4]
	int JumpTimes;//[Offset: 0xac, Size: 4]
	int KillMonsterNum;//[Offset: 0xb0, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb4, Size: 60]
	int LightCandleNum;//[Offset: 0xf0, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xf4, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x130, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x134, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x138, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x13c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int mainWeaponID;//[Offset: 0x144, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x148, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x14c, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	uint64 Killer;//[Offset: 0x20, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x28, Size: 8]
	FString KillerName;//[Offset: 0x30, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x3c, Size: 12]
	int ShootWeaponShotNum;//[Offset: 0x48, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x50, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x54, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x58, Size: 4]
	int HealTimes;//[Offset: 0x5c, Size: 4]
	FString[] KillFlow;//[Offset: 0x60, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x6c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x78, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x84, Size: 60]
	<int,int> TLog_BulletCount;//[Offset: 0xc0, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x100, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x108, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x114, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x120, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x12c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x138, Size: 4]
	int is_escape;//[Offset: 0x13c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x140, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x14c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x158, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x178, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x184, Size: 12]
	uint32 Switch;//[Offset: 0x190, Size: 4]
	uint32[] Self;//[Offset: 0x194, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x1a0, Size: 12]
	Vector LandLocation;//[Offset: 0x1ac, Size: 12]
	int LandTime;//[Offset: 0x1b8, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1bc, Size: 12]
	Vector DeadLocation;//[Offset: 0x1c8, Size: 12]
	FString DeadDamangeType;//[Offset: 0x1d4, Size: 12]
	int PveDeadAttacker;//[Offset: 0x1e0, Size: 4]
	int PveStageId;//[Offset: 0x1e4, Size: 4]
	FString DeadTimeStr;//[Offset: 0x1e8, Size: 12]
	FString logoutime;//[Offset: 0x1f4, Size: 12]
	float Pronetime;//[Offset: 0x200, Size: 4]
	float BeInWaterTime;//[Offset: 0x204, Size: 4]
	float SwimmingDistance;//[Offset: 0x208, Size: 4]
	int BeDownTimes;//[Offset: 0x20c, Size: 4]
	int BeSavedTimes;//[Offset: 0x210, Size: 4]
	int PickUpAirDrops;//[Offset: 0x214, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x218, Size: 80]
	int Rank;//[Offset: 0x268, Size: 4]
	int TotalScore;//[Offset: 0x26c, Size: 4]
	int ProneTimes;//[Offset: 0x270, Size: 4]
	int CrouchTimes;//[Offset: 0x274, Size: 4]
	int JumpTimes;//[Offset: 0x278, Size: 4]
	int TouchDownAreaID;//[Offset: 0x27c, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x280, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x284, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x290, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x29c, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x2a8, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2b4, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2d0, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x2f0, Size: 12]
	int KillNumInVehicle;//[Offset: 0x2fc, Size: 4]
	float TotalSprintDistance;//[Offset: 0x300, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x304, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x308, Size: 4]
	int[] BuildFlow;//[Offset: 0x30c, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x318, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x324, Size: 4]
	float HitShelterDamage;//[Offset: 0x328, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x32c, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x338, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	int KillMonsterNum;//[Offset: 0x348, Size: 4]
	int LightCandleNum;//[Offset: 0x34c, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x350, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x354, Size: 4]
	float BattleStateTime;//[Offset: 0x358, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x360, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x39c, Size: 8]
	float TotalDamage;//[Offset: 0x3a4, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x3a8, Size: 4]
	int FollowState;//[Offset: 0x3ac, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3b0, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3bc, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3c0, Size: 4]
	int RevivalNum;//[Offset: 0x3c4, Size: 4]
	int BeRevivedNum;//[Offset: 0x3c8, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x3cc, Size: 4]
	int InHelicopterTime;//[Offset: 0x3d0, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x3d4, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x3d8, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x3dc, Size: 12]
	int KillSnowManCount;//[Offset: 0x3e8, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x3ec, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0x428, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x464, Size: 24]
	int NormalItemNum;//[Offset: 0x47c, Size: 4]
	int SeniorItemNum;//[Offset: 0x480, Size: 4]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 152]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc0, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd0, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x10c, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x260d0fc

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 44]
	int planeAvatarId;//[Offset: 0x90, Size: 4]
	int RolewearIndex;//[Offset: 0x94, Size: 4]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherID;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x260d5b4

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int Platform;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0xcc, Size: 4]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x4e52218
	void PushOneScriptPropertyValues(FString ParamName);// 0x4e520b8
	void PushAllScriptPropertyValues();// 0x20c3724
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x4e51f1c
	void FetchOneScriptPropertyValues(FString ParamName);// 0x4e51dbc
	void FetchAllScriptPropertyValues();// 0x1fe6e54
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x4e51c64
	void CallScriptFunction(FString FunctionName);// 0x4e51b0c

--------------------------------
Class: bp_lobby_C.LuaClassObj.LuaContext.Actor.Object
	void EventEnterRoleInfo_NoFetch();// 0x2bbd2f4
	void EventEnterRoleInfo();// 0x2bbd2f4
	void EventFetchInfo_NoFetch();// 0x2bbd2f4
	void EventFetchInfo();// 0x2bbd2f4
	void EventLobbyAndroidBack_NoFetch();// 0x2bbd2f4
	void EventLobbyAndroidBack();// 0x2bbd2f4
	void EventSimulateTestReConnect_NoFetch();// 0x2bbd2f4
	void EventSimulateTestReConnect();// 0x2bbd2f4
	void EventShowLobbyGM_NoFetch();// 0x2bbd2f4
	void EventShowLobbyGM();// 0x2bbd2f4
	void EventSetInfo_Push_NoFetch();// 0x2bbd2f4
	void EventSetInfo_Push();// 0x2bbd2f4
	void EventSwitchLobbyCameraByIndex_NoFetch();// 0x2bbd2f4
	void EventSwitchLobbyCameraByIndex();// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x310, Size: 4]
	FString BP_PlayerUid;//[Offset: 0x314, Size: 12]
	int BP_Lobby_PlayerMaxRankLevel;//[Offset: 0x320, Size: 4]
	int BP_PlayerExp;//[Offset: 0x324, Size: 4]
	BP_STRUCT_TransformUseList BP_STRUCT_TransformUseList;//[Offset: 0x328, Size: 8]
	BP_STRUCT_ActivityBtnDisplay BP_STRUCT_ActivityBtnDisplay;//[Offset: 0x330, Size: 132]
	BP_STRUCT_ActivityBtnDisplay[] BP_ARRAY_LobbyActivityBtnDisplayList;//[Offset: 0x3b4, Size: 12]
	bool BP_Lobby_BgAnniversaryThemeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	int BP_PlayerFpToken;//[Offset: 0x3c4, Size: 4]
	int BP_Lobby_CurSkinId;//[Offset: 0x3c8, Size: 4]
	int BP_LobbyBubble_CurItemID;//[Offset: 0x3cc, Size: 4]
	FString BP_PlayerAliasNation;//[Offset: 0x3d0, Size: 12]
	int[] BP_ARRAY_Lobby_ActivityNotOpenList;//[Offset: 0x3dc, Size: 12]
	FString BP_SystemTargetCameraSysName;//[Offset: 0x3e8, Size: 12]
	int BP_SystemTargetCameraBlendTime;//[Offset: 0x3f4, Size: 4]
	bool BP_Lobby_MenuOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	FString BP_PlayerAliasTitle;//[Offset: 0x3fc, Size: 12]
	int BP_PlayerAliasID;//[Offset: 0x408, Size: 4]
	FString BP_LobbyBubble_CurCdn;//[Offset: 0x40c, Size: 12]
	FString BP_LobbyLogic_ClassPath;//[Offset: 0x418, Size: 12]
	bool BP_Lobby_RankChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	int BP_LobbyPlayerNum;//[Offset: 0x428, Size: 4]
	bool EmulatorCheck_FirstinLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	int BP_PlayerDiamond;//[Offset: 0x430, Size: 4]
	FString BP_PlayerIconUrl;//[Offset: 0x434, Size: 12]
	bool BP_Lobby_BgIceThemeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	int G_Index_In_Collect;//[Offset: 0x444, Size: 4]
	int BP_PlayerTicket;//[Offset: 0x448, Size: 4]
	bool BP_UserHideLobbyAutoAdaptBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool BP_PlayerDiamondShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	BP_STRUCT_AvatarInfo BP_STRUCT_AvatarInfo;//[Offset: 0x450, Size: 12]
	bool DataMgrInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	int G_Index_In_Login;//[Offset: 0x460, Size: 4]
	int BP_SystemTargetCameraIndex;//[Offset: 0x464, Size: 4]
	int BP_PlayerLevel;//[Offset: 0x468, Size: 4]
	int BP_PlayerGender;//[Offset: 0x46c, Size: 4]
	int BP_LobbyTargetCameraBlendTime;//[Offset: 0x470, Size: 4]
	int BP_LobbyTargetCameraIndex;//[Offset: 0x474, Size: 4]
	int BP_PlayerQQVip;//[Offset: 0x478, Size: 4]
	int BP_PlayerGold;//[Offset: 0x47c, Size: 4]
	FString BP_PlayerName;//[Offset: 0x480, Size: 12]
	BP_STRUCT_AvatarInfo[] BP_ARRAY_AvatarList;//[Offset: 0x48c, Size: 12]
	bool BP_Lobby_BgResidentEvilThemeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	int BP_Lobby_Role_Avatar_Frame;//[Offset: 0x49c, Size: 4]
	FString BP_LOBBY_AdjustURL;//[Offset: 0x4a0, Size: 12]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4ac, Size: 4]

--------------------------------
Class: BP_STRUCT_TransformUseList
	int index_0_8EB710D74F66FC0D18778A85F4279B6B;//[Offset: 0x0, Size: 4]
	bool inUse_1_3808403449351BB245F037A0F1CA2BB0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: BP_STRUCT_ActivityBtnDisplay
	int Priority_0_46159A294AD8CE52B8706D9F5544BD82;//[Offset: 0x0, Size: 4]
	FString ActivityName_1_BDDD54604B8656536C99C0A3F5074B3F;//[Offset: 0x4, Size: 12]
	FString IconPath_2_C79C7E02493AE6F3925939B80B14DE6D;//[Offset: 0x10, Size: 12]
	FString JumpUrl_3_883F04534B750337906ECABA456B4935;//[Offset: 0x1c, Size: 12]
	int ActivityType_4_7B7F6AC01B53CA476EC6B45A012F6925;//[Offset: 0x28, Size: 4]
	FString StartTime_5_0DE1164068816D5B70CB6F1A0F06AC25;//[Offset: 0x2c, Size: 12]
	FString EndTime_6_3CF0D880683B9FF41A4A6FDC06FE3125;//[Offset: 0x38, Size: 12]
	int StartTimeUTC_7_3FB0314032DCC95F676A48D10AC25AE3;//[Offset: 0x44, Size: 4]
	int EndTimeUTC_8_7BB893801BAE54260B5CEF1D0312C563;//[Offset: 0x48, Size: 4]
	bool IsShowCountDownIcon_9_6D7870C063D0BBF506ED453F0E94291E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int ID_10_2D1D924048CB30255B81D0290B79F134;//[Offset: 0x50, Size: 4]
	bool IsNew_11_7B6DC8806D46DD1850C8F9260F2ED357;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int Weight_12_22892900165223A8223D6BCE00308404;//[Offset: 0x58, Size: 4]
	FString blueprintPath_13_462107802B97827E233DEB9C09D53018;//[Offset: 0x5c, Size: 12]
	FString DependItems_14_629A43800E6BDF380FC988F50BA4DB73;//[Offset: 0x68, Size: 12]
	int Type_28_F48C26234BFB2785226A46AD4DE39B4A;//[Offset: 0x74, Size: 4]
	int ActId_24_88F8EDE14F623CA79EB4B98348D756DA;//[Offset: 0x78, Size: 4]
	int CreatedUtc_25_20BA60F147D962530E97FE9C28E33A82;//[Offset: 0x7c, Size: 4]
	int CreatedProcess_31_B59A26594774D053E758AB8F7F56B648;//[Offset: 0x80, Size: 4]

--------------------------------
Class: BP_STRUCT_AvatarInfo
	int patternID_0_5FECBAC0567F500B20D9B5D5001BA9A4;//[Offset: 0x0, Size: 4]
	int colorID_1_0EBAE30065ECB54C348EC20305BAD1D4;//[Offset: 0x4, Size: 4]
	int resID_5_3BCBFAFC45B08783019855A321922B12;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x324, Size: 12]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x330, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x33c, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x348, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x354, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x360, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x36c, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x374, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x37c, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x384, Size: 104]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	int iEnableRegionID;//[Offset: 0x41c, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x420, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x42c, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x438, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x444, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x450, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x45c, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x468, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x474, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x480, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x48c, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x498, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x4a4, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x4b0, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x4bc, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x4c8, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x4d4, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x4e0, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x4ec, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x4f8, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x504, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x510, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x51c, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x528, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x534, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x540, Size: 12]
	FString AutoTestMissionType;//[Offset: 0x558, Size: 12]
	FString CustomLineStr;//[Offset: 0x564, Size: 12]
	enum GamePlayMode;//[Offset: 0x570, Size: 4]
	Vector2D FOVRange;//[Offset: 0x574, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x57c, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	float SwimRotateX;//[Offset: 0x588, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58c, Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x5b0, Size: 4]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x5b4, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x5b8, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x5bc, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x5c0, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x5c4, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x5c8, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x624, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x628, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x62c, Size: 12]
	float DefaultGray;//[Offset: 0x638, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x678, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x2bbd2f4
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x2bbd2f4
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x2bbd2f4
	void UpdateWorldCullDistanceVolumes();// 0x21dcf20
	void TestAyncLoad();// 0x21dcf0c
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x21dcd88
	void SuperBattle(FString IP);// 0x205b930
	void StopRemoteControl();// 0x1f4cfe0
	void StartRemoteControlWithFile();// 0x1f4cfe0
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x21dcad4
	void SetWorldDoorCullDistance(int Distance);// 0x21dca5c
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x21dc8c0
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x21dc804
	void SetWaterReflectionSetting(bool bDoOpen);// 0x21dc784
	void SetUserVulkanSetting(bool Enable);// 0x21dc704
	void SetUserSetingShadowQuality(bool bShadow);// 0x21dc684
	void SetUserSetingMobilceContentSCale(float mcs);// 0x21dc60c
	bool SetSoundEffectQuality(int Type);// 0x21dc58c
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x21dc4e0
	void SetKillZValue(float KillZ);// 0x21dc468
	void SetHZBMobileState();// 0x1f4cfe0
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x21dc3f0
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x21dc248
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x21dc0a0
	static void SetCustomRouteLine();// 0x21dc08c
	static void SetAutoMissionType();// 0x21dc078
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x2bbd2f4
	void ReSetFOVScreenSizeCullingFactor();// 0x21dc064
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x2bbd2f4
	void RenderForLowFPS();// 0x21dc050
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x21dbfd8
	void RefuseRenderForLowFPS();// 0x21dbfc4
	void QuitGame();// 0x21dbfb0
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x21dbeb0
	void OnStopAutoTest();// 0x21dbe9c
	void OnStartAutoTest();// 0x21dbe88
	void ObjectPoolServerSwitch(bool bOn);// 0x21dbe08
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x2006b7c
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x21dbdf4
	bool IsViewedByReplay(const Actor* InActor);// 0x21dbd74
	bool isUsingAssumedNameInReplay();// 0x21dbd4c
	bool IsSupportTagCulling();// 0x21dbd30
	bool IsSupportSwitchSoundEffectQuality();// 0x21dbd08
	bool IsSupportSwitchRenderLevelRuntime();// 0x21dbce0
	bool IsSupportMSAA();// 0x21dbcb8
	bool IsSupportLDR();// 0x21dbc90
	static bool IsSecAutoRunTest();// 0x210c9c0
	bool IsRunningOnVulkan();// 0x21dbc68
	bool IsPVENightChangeCullDistance();// 0x21dbc40
	bool IsPlayingObservingReplay();// 0x21dbc18
	bool IsOpenMSAA();// 0x21dbbf0
	bool IsOpenHDR();// 0x21dbbc8
	bool IsIOSOneGigabyteDevice();// 0x2049ba0
	bool IsInTournamentMap();// 0x21dbba0
	static bool IsGAutomatorTest();// 0x21dbb78
	bool IsFoldingScreenDevice(float baseValue);// 0x21dbaf8
	static bool IsAutoRunTestGamePVEProfile();// 0x21dbad0
	static bool IsAutoRunTestGamePVE();// 0x21dbaa8
	static bool IsAutoRunTestGameBindCompoment();// 0x21dba80
	static bool IsAutoRunTestGame();// 0x21dba58
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x2bbd2f4
	void GMStandalone(FString Map);// 0x21db900
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x21db8d8
	WonderfulPlayback* GetWonderfulPlayback();// 0x21db8b0
	bool GetWaterReflectionSetting();// 0x21db888
	bool GetUserVulkanSetting();// 0x21db860
	bool GetUserSetingShadowQuality();// 0x21db838
	int GetUserQualitySettingLevel();// 0x21db81c
	int GetSuppotMSAA();// 0x21db800
	int GetSoundEffectQuality();// 0x21db7d8
	RenderQualitySettings GetRenderQualityLastSet();// 0x21db780
	RenderQualitySettings GetRenderQualityApplying();// 0x21db728
	ObservingReplay* GetObservingReplay();// 0x21db700
	FString GetLoadWeatherName(FString InWeatherName);// 0x21db5b4
	bool GetIsFirstInitWaterReflectionSetting();// 0x21db58c
	static STExtraGameInstance* GetInstance();// 0x21db564
	int GetExactDeviceLevel();// 0x21db53c
	int GetDeviceUpdateVersionFlag();// 0x21db50c
	FString GetDeviceProfilerLevel();// 0x21db44c
	byte GetDeviceMaxSupportSoundEffect();// 0x21db424
	byte GetDeviceMaxSupportLevel();// 0x21db3fc
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x21db37c
	int GetDeviceLimit();// 0x21db354
	int GetDeviceLevel();// 0x1f8d6f0
	bool GetDefaultSoundEffectQuality();// 0x21db32c
	DeathPlayback* GetDeathPlayback();// 0x21db304
	FString GetCurrentRHI();// 0x21db244
	CompletePlayback* GetCompletePlayback();// 0x21db21c
	ClientInGameReplay* GetClientInGameReplay();// 0x21db1f4
	static int GetAutoRunTestServerIdx();// 0x21db1cc
	static FString GetAutoRunPassWD();// 0x21db114
	static FString GetAutoRunLuaTest();// 0x21db05c
	static FString GetAutoRunAccount();// 0x21dafa4
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x21daf7c
	bool GetApplyingShadowQuality();// 0x21daf54
	FString GetActiveDeviceProfile();// 0x21dae94
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x21dac24
	void EnableStreamingLevelLOD(bool bEnable);// 0x21daba4
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x21daaa4
	bool DeleteSavedFiles(bool allfilesSaved);// 0x21daa1c
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x21da958
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x21da894
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x21da78c
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x21da70c
	void bHideGroundLevels(bool Disable);// 0x21da68c
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x21da60c
	void AutoActiveUltralHighRenderItems();// 0x21da5f8
	void AutoActiveLDR();// 0x21da5e4
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x21da56c
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x21da4b0
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x21da3a0
	void ActiveStyle_PP(byte Level);// 0x21da320
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x21da210
	void ActiveStyle(byte Level);// 0x21da190
	void ActiveNightVision(bool bSet);// 0x21da110
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x21da048
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x21d9ee4

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d0, Size: 224]
	delegate EnginePreTick;//[Offset: 0x2b0, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x2dc, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x2e4, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x304, Size: 12]
	FString[] HighWeatherNames;//[Offset: 0x310, Size: 12]
	int HighWeatherMinRenderQuality;//[Offset: 0x31c, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x320, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x23e29c4
	void OpenAssetLoadLog();// 0x1f4cfe0
	void OnPreBattleResult__DelegateSignature();// 0x2bbd2f4
	void LuaLeakDetect();// 0x23e29b0
	void LuaDoString(FString LuaString);// 0x23e28f4
	float GetWeatherTime();// 0x23e28d8
	int GetWeatherID();// 0x23e28b8
	LuaStateWrapper* GetLuaStateWrapper();// 0x23e2890
	FString GetLoadWeatherName(FString InWeatherName);// 0x21db5b4
	FString GetGameID();// 0x23e27c4
	int GetDeviceLevel();// 0x1f8d6f0
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x23e2700
	UAEDataTable* GetDataTable(FString tableName);// 0x23e263c
	FrontendHUD* GetAssociatedFrontendHUD();// 0x200c378
	void CloseAssetLoadLog();// 0x1f4cfe0

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int8 WeatherID;//[Offset: 0x80, Size: 1]
	FString WeatherLevelName;//[Offset: 0x84, Size: 12]
	float WeatherTime;//[Offset: 0x90, Size: 4]
	int[] MrpcsData;//[Offset: 0x94, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0xa4, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x60, Size: 4]
	int UserVulkanSetting;//[Offset: 0x64, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x232cb98
	void StartRecord();// 0x232cb84
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x232c948
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x232c814
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x232c538
	void BuildOutputData();// 0x232c524
	void BuildContinuousKillOutputData();// 0x232c510

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	enum WonderfulKeepState;//[Offset: 0xdb, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0xe0, Size: 200]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x1d8, Size: 56]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x210, Size: 88]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x1fe0d44
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x1fe0cc4
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x1fe0bb0
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x1fe0a70
	void OnKillOrPutDownMessageEvent();// 0x1fe0a5c
	void OnBattleResultStopRecordingNotify();// 0x1fe0a48
	bool IsSwitchedOffByDevice();// 0x1fe0a20
	bool HaveWonderfulPlaybackData();// 0x1fe09f8
	bool HaveDeathPlaybackData();// 0x1fe09d0
	enum GetWonderfulKeepState();// 0x1fe0990
	FString GetCompressedFileName();// 0x1fe08d0
	int[] GetAllWonderfulPeriodType();// 0x1fe0810
	void EnableWonderfulPlayback(bool bEnable);// 0x1fe0790
	void EnableDeathPlayback(bool bEnable);// 0x1fe0710
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x1fe0698
	void ClearWonderfulPeriod();// 0x1fe0684
	void AddWonderfulPeriod(enum InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x1fe04a0

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x28, Size: 40]
	enum ReplayType;//[Offset: 0x50, Size: 1]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xc8, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0xcc, Size: 12]
	bool StopRecordingReplay();// 0x1fe89c0
	bool StopPlay();// 0x2055e2c
	bool StartRecordingReplay();// 0x1fe897c
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x2055c84
	void SetReplayStreamer(FString InReplayStreamer);// 0x2055aec
	void SetIsGMSpectator(bool bGM);// 0x2055a70
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x20559f8
	void SetCanChangeViewTarget(bool bCanChange);// 0x2055978
	void ResetPlaybackData();// 0x2055964
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x20558ec
	void ReplayOnWeaponChanged();// 0x20558d8
	void ReplayOnSimulatedWeaponChanged();// 0x20558c4
	void ReplayOnBulletNumChanged();// 0x20558b0
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x2055838
	bool PlayReplay();// 0x2055808
	bool PauseReplay(bool bPaused);// 0x2055778
	bool IsInRecordState();// 0x2055750
	bool IsInPlayState();// 0x2055728
	bool IsFastForwarding();// 0x2055700
	bool HaveRecordingData();// 0x20556d0
	void HandleChangeStatePC();// 0x20556bc
	STExtraBaseCharacter* GetViewCharacter();// 0x2055694
	FString GetSpectatorName();// 0x1ffaa58
	PlayerCameraManager* GetPlayerCameraManager();// 0x205566c
	float GetCurrentReplayTotalTimeInSeconds();// 0x2055644
	float GetCurrentReplayCurTimeInSeconds();// 0x205561c
	bool GetCanChangeViewTarget();// 0x20555f4

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	int DamageType;//[Offset: 0x28, Size: 4]
	int SubType;//[Offset: 0x2c, Size: 4]
	FString CauseName;//[Offset: 0x30, Size: 12]
	FString CauseActionName;//[Offset: 0x3c, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	int AliasID;//[Offset: 0x4c, Size: 4]
	FString AliasTitle;//[Offset: 0x50, Size: 12]
	FString AliasNation;//[Offset: 0x5c, Size: 12]
	int AliasRank;//[Offset: 0x68, Size: 4]
	FString AliasPartnerName;//[Offset: 0x6c, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x78, Size: 4]
	int AliasRankID;//[Offset: 0x7c, Size: 4]
	int SegmentLevel;//[Offset: 0x80, Size: 4]
	float KDNum;//[Offset: 0x84, Size: 4]
	int GameCount;//[Offset: 0x88, Size: 4]
	float Distance;//[Offset: 0x8c, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0x90, Size: 28]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xac, Size: 28]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	FString OpenID;//[Offset: 0x1c, Size: 12]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x28, Size: 12]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0xc, Size: 16]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 12]
	int SegmentLevel;//[Offset: 0x24, Size: 4]
	float TotalTime;//[Offset: 0x28, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x2c, Size: 12]
	FString AppVersion;//[Offset: 0x38, Size: 12]
	FString SrcVersion;//[Offset: 0x44, Size: 12]
	enum ErrorCode;//[Offset: 0x50, Size: 1]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xc2c, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xc30, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc34, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xc38, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xc74, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xc75, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xc78, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xc7c, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xc88, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xcd4, Size: 60]
	FName FeatureActorName;//[Offset: 0xd10, Size: 8]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xd18, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xd24, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xd30, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3c, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xd3d, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xd40, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xd44, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xd48, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xd4c, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xd50, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xd54, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xd58, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xd5c, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xd60, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xd64, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xd68, Size: 4]
	Vector2D StartPosition;//[Offset: 0xd6c, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xd74, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xd7c, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xd88, Size: 12]
	FString FollowCandidateName;//[Offset: 0xd98, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xda4, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xde0, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xdf0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xe20, Size: 1]
	bool GMShowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xe22, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xe24, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2a, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xe2c, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xe38, Size: 16]
	byte AutoAimType;//[Offset: 0xe48, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe51, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe62, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0xe64, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xe70, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xe7c, Size: 180]
	SensibilityConfig SensibilityConfig;//[Offset: 0xf30, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 1]
	int UseMotionControlType;//[Offset: 0x1098, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x10a0, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x10ac, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x10b8, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x10c4, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x10d0, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x10dc, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x10e8, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x10f4, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x1100, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x110c, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x1118, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1124, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x1130, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x113c, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1148, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1154, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x1160, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x116c, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1178, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x1184, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1190, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x119c, Size: 12]
	delegate OnNightEnded;//[Offset: 0x11a8, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x11b4, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x11c0, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x11c4, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x11d0, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x11dc, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x11e8, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x11f4, Size: 12]
	delegate OnPickupItem;//[Offset: 0x1200, Size: 12]
	delegate OnDropItem;//[Offset: 0x120c, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x1218, Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0x1224, Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0x1230, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x125c, Size: 68]
	delegate OnKillOrPutDownMessage;//[Offset: 0x12a0, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x12ac, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x12b8, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x12c4, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x12d0, Size: 12]
	delegate OnFingerMove;//[Offset: 0x12dc, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x12e8, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x12f4, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1300, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x130c, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x1318, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1324, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x1330, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x133c, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x1348, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x1354, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1360, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x136c, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1378, Size: 12]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x1384, Size: 12]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x1390, Size: 12]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x139c, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x13a8, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x13b4, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x13c0, Size: 12]
	delegate OnRank;//[Offset: 0x13cc, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x13d8, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x13e4, Size: 12]
	delegate OnUseMainSlot;//[Offset: 0x13f0, Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0x13fc, Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0x1408, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1414, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x1420, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x142c, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x143c, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x1448, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1454, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x1460, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x146c, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1478, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1484, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1490, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x149c, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x14a8, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x14b4, Size: 12]
	delegate OnSelfPlayerKilledOthersPlayer;//[Offset: 0x14c0, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x14cc, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x14d8, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x14e4, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x14f0, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x150c, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x1518, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1534, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1538, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x1544, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1550, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1570, Size: 12]
	delegate OnLostConnection;//[Offset: 0x157c, Size: 12]
	delegate OnReconnected;//[Offset: 0x1588, Size: 12]
	delegate OnExitGame;//[Offset: 0x1594, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x15a0, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x15ac, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x15b8, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x15c4, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x15c8, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x15cc, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x15d0, Size: 4]
	HiggsBosonComponent* HiggsBosonComponent;//[Offset: 0x15d4, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x15d8, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15dc, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x17b0, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x17bc, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cc, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cd, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ce, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cf, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d0, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d1, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d2, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x17d4, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x17d8, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x17dc, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x17e0, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x17e4, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x17e8, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ec, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x17f0, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1814, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1838, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1840, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1848, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x186c, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1874, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x187c, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x18a0, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x18dc, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x18e0, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x18e4, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1920, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192c, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192d, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1934, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1938, Size: 1]
	byte CurCameraMode;//[Offset: 0x1939, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x193c, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1948, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1950, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1954, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1955, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1956, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1957, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1958, Size: 4]
	float CanMoveCDTime;//[Offset: 0x195c, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1960, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1964, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1968, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x196c, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1970, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1974, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1980, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1984, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1988, Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c4, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c5, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c6, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x19c8, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19cc, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19cd, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x19d0, Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d8, Size: 1]
	float AccumulateYawInput;//[Offset: 0x19dc, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x19e0, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e4, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e5, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e6, Size: 1]
	float NoRespondArea;//[Offset: 0x19e8, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x19ec, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f0, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f1, Size: 1]
	byte sprintOptType;//[Offset: 0x19f2, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x19f4, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x19f8, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x19fc, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1a00, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1a04, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a08, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1a09, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1a0c, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a10, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1a14, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1a50, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1a54, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1a58, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1a5c, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1a60, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a64, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1a68, Size: 4]
	byte TouchFireType;//[Offset: 0x1a6c, Size: 1]
	float TestForce;//[Offset: 0x1a70, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1a74, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1a80, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8c, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8d, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8e, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8f, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1a90, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1a94, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1a98, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1a9c, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1aa0, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1aa4, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1aac, Size: 4]
	float MinFovChangeView;//[Offset: 0x1ab0, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1ab8, Size: 40]
	int GameTipMsgID;//[Offset: 0x1ae0, Size: 4]
	FString GameTipParam1;//[Offset: 0x1ae4, Size: 12]
	FString GameTipParam2;//[Offset: 0x1af0, Size: 12]
	float AutoSprintCD;//[Offset: 0x1b38, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1b3c, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1b78, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1bb4, Size: 60]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf4, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x1bf8, Size: 12]
	delegate OnReceiveHasSignal;//[Offset: 0x1c04, Size: 12]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1c30, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1cf8, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1cfc, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1d00, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1d04, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1d14, Size: 4]
	FString[] ForbitPickList;//[Offset: 0x1d20, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d38, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x1d3c, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d40, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d41, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1d44, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1d48, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4c, Size: 1]
	float FreeViewUpRate;//[Offset: 0x1d50, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1d54, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1d58, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5c, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5e, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x1d60, Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x1d6c, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d80, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x1d81, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d82, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d83, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x1dcc, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x1dcd, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1e34, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1ec0, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1ec4, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x1ec8, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x1ecc, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x1ed0, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1ed4, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x1edc, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef5, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x1ef6, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x1ef8, Size: 12]
	BattleItemData[] ObservedItemList;//[Offset: 0x1f20, Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x1fc8, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x1fd4, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x1fe0, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x1fec, Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x1ff8, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2004, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2008, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x2018, Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x201c, Size: 12]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x2028, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x2034, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x2040, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x204c, Size: 60]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x2088, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x2094, Size: 60]
	ObservedData ObservedData;//[Offset: 0x20d0, Size: 72]
	delegate OnSignalHPChanged;//[Offset: 0x2124, Size: 12]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2135, Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x2138, Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2148, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x2154, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x2168, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x2174, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2180, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x218c, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x2198, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x21a4, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x21b0, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x21cc, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x21d0, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x21d4, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x21d8, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d9, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21da, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x21dc, Size: 12]
	int FireMode;//[Offset: 0x21e8, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21ec, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21ed, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21ee, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21ef, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x21f0, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x21fc, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2208, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2214, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2220, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x222c, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2238, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x223c, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2248, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2254, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2260, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x226c, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2279, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x227c, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2288, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2294, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2298, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x22a4, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b0, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x22b4, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x22b8, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x22bc, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x22c0, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x22c4, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x22d4, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x22f0, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2304, Size: 12]
	Actor* ThePlane;//[Offset: 0x2310, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x231c, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x2320, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x232c, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2338, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x233c, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2354, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2368, Size: 4]
	FString LastBreathMurder;//[Offset: 0x2370, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237c, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2380, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x2388, Size: 4]
	FString murderName;//[Offset: 0x238c, Size: 12]
	FString FinalMurderName;//[Offset: 0x2398, Size: 12]
	uint64 MurderUID;//[Offset: 0x23a8, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b0, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b1, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b2, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x23f8, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x2434, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2478, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x247c, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2480, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x2484, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c0, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x2594, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2598, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x259c, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x25e4, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e8, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x25ec, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f0, Size: 1]
	enum ServerStateType;//[Offset: 0x25f1, Size: 1]
	enum ClientStateType;//[Offset: 0x25f2, Size: 1]
	bool bRepServerMsgType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f3, Size: 1]
	enum GameStateMsgType;//[Offset: 0x25f4, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260c, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260d, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260e, Size: 1]
	float ObservingTime;//[Offset: 0x2610, Size: 4]
	KillerTracker* tracker;//[Offset: 0x2614, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2628, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2629, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x2674, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x2678, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2698, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x26a4, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a8, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a9, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x26ac, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x26b0, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x26b4, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x26ec, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x26f8, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x26fc, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x2700, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x273c, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x277c, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2780, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x278c, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x27e0, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x27e4, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x27e8, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2814, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2820, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2830, Size: 16]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2858, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2864, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2870, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x287c, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2888, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2894, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2895, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2898, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x289c, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x28a8, Size: 8]
	int IdCardMarkType;//[Offset: 0x28b4, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d4, Size: 1]
	int VehicleControlMode;//[Offset: 0x28d8, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28dc, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x28e0, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x28ec, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x28f8, Size: 4]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28fc, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2900, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290c, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2910, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x291c, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2920, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2924, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2928, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2934, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2940, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2944, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2950, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295c, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295d, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2960, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x296c, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2978, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2984, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2990, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x299c, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x29a0, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a4, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a5, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b0, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b1, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b2, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x29b4, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x29b8, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x29c4, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x29d0, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29dc, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x29e0, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x29ec, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x29f8, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2a04, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2a10, Size: 12]
	Actor* InteractiveActor;//[Offset: 0x2a1c, Size: 4]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2a20, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2a2c, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2a38, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2a44, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2a50, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2a68, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2a74, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2ab0, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2ab4, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab8, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2abc, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2ac0, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2ac4, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad0, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae0, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2ae4, Size: 12]
	double LastFlyLeapPlatfromTime;//[Offset: 0x30a0, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e4, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e5, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x30e8, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x3138, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x3148, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x3158, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3188, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318a, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318b, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x318c, Size: 4]
	<int,enum> PlayerAvatarHideState;//[Offset: 0x3190, Size: 60]
	void VW_Seat(int change);// 0x2230064
	void VisualizeItem();// 0x1f4cfe0
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x222ff60
	void ViewPlane();// 0x222ff4c
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x2bbd2f4
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x222fedc
	void VehicleResetTo(float X, float Y, float Z);// 0x222fddc
	void VehicleMoveTo(float X, float Y, float Z);// 0x222fcdc
	void UseZombieModeSkill();// 0x222fcc8
	void UserDropItemOperation(ItemDefineID DefineID);// 0x222fc40
	void UseItem(int ID);// 0x222fbc8
	void UpdateSurfboardUI();// 0x222fbb4
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x222fb34
	void UpdatePoseViewPitchLimit();// 0x222fb20
	void UpdatePoseState(byte PoseType);// 0x222faa8
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x222f9e0
	void UnPossess();// 0x222f9c4
	void UnLoadAllCollision(bool Unload);// 0x222f944
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x222f7a4
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x222f4f4
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x222f5fc
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x222f4f4
	void TriggerHunterRevival();// 0x222f4e0
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x222f424
	void TouchMove(Vector Loc, byte FingerIndex);// 0x222f368
	bool TouchEnd(byte PressType);// 0x222f2e8
	void TouchBegin(byte PressType);// 0x222f270
	void ToggleVehicleSync(bool Val);// 0x1fd3400
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x1fd3400
	void ToggleUserCmdDeltaFlag(bool Val);// 0x1fd3400
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x1fd3400
	void ToggleUserCmdDelta(bool Val);// 0x1fd3400
	void ToggleServerAcknowledgePossession(bool Val);// 0x1fd3400
	void ToggleOBTPPFollowFreeView();// 0x222f25c
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x222f1dc
	void ToggleCheatLocation(bool Val);// 0x1fd3400
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x222f0dc
	void TestLowProbCircle(bool UseLowProb, int LoopCount);// 0x222f014
	void TestLaunchFly(float Speed);// 0x222ef9c
	void TestAutoMoveToShootingMachine();// 0x222ef88
	void TestAutoMoveToLocation(float X, float Y, float Z);// 0x222ee88
	void TestAutoMoveToCharacter(FString TargetPlayerUID);// 0x222ed30
	void TempleStopMoving();// 0x222ed1c
	void TempleStartMoving();// 0x222ed08
	void TempleSpawnBoss();// 0x222ecf4
	void TempleDisappear();// 0x222ece0
	void TeleportToTemple(byte bOutCollisionTeleportPoint);// 0x222ec68
	void TeleportAIToLoc(float X, float Y, float Z);// 0x222eb68
	void TeamNoAlwaysRelevant();// 0x222eb54
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x222ea78
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x222e898
	void SwitchViewTarget();// 0x1f4cfe0
	void SwitchToTeamByNumPressed();// 0x222e884
	void SwitchToPlayerByNumPressed();// 0x222e870
	void SwitchToDeadBox();// 0x222e85c
	void SwitchShowUI();// 0x222e848
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x222e74c
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x222e5fc
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x222e538
	void SwitchMouseCursorShowState();// 0x222e524
	void SwitchGenerateItem();// 0x222e4c8
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x222e40c
	void SwitchCameraModeByOrder();// 0x222e3f8
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x222e29c
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x222e194
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x222e0bc
	void StopAbsorb();// 0x222e060
	void StartReadyCountDown();// 0x222e04c
	void StartLandOnGroundAfterJumpPlane();// 0x222e038
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x222df20
	void StartGame();// 0x222df0c
	void StartFreeCamera(byte FigerIndex);// 0x222de94
	void StartAirDropSpecified(float X, float Y);// 0x222ddd8
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x222dcd8
	void StartAirDrop(int Index);// 0x222dc60
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x222db60
	void StartAirAttack(int Index);// 0x222dae8
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x222da20
	void SpawnVehicleWithPath(FString Path, int Num);// 0x222d920
	void SpawnVehicle();// 0x222d90c
	void SpawnFloatingTemple();// 0x222d8f8
	void SpawnAllVehicle(FString Path);// 0x222d83c
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x222d73c
	void SpawnAI(int Num, bool bSpawnAll);// 0x222d678
	void SpawnActorWithPath(FString Path, float X, float Y, float Z);// 0x222d4ec
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x222d474
	bool SkipChangeViewTarget();// 0x222d444
	void ShutDownItemGenerate(bool IsOpen);// 0x222d3c4
	void ShowWeaponRecordInfo();// 0x1f4cfe0
	void ShowVaultEnable();// 0x217a274
	void ShowStringMsg(const FString Message, FString FromPlayerName, int MsgID);// 0x222d110
	void ShowResultWeaponRecordInfo();// 0x1f4cfe0
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x222cfcc
	void ShowOpenSequence(float Time);// 0x222cf54
	void ShowNavOperator();// 0x222cf40
	void ShowMovePath(const Vector[] Path);// 0x222ce7c
	void ShowGameTips(int TipsID, FString Params);// 0x222cd74
	void ShowFireBtn(bool bShow);// 0x2bbd2f4
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x222ccac
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x222cbdc
	void ShowAllRoles();// 0x1f4cfe0
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x222cb10
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x222ca90
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x222ca10
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x222c990
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x222c918
	void SetViewYawLimit(float YawMin, float YawMax);// 0x222c85c
	void SetViewTargetTest(Actor* NewViewTarget);// 0x222c7e4
	void SetVehicleWeakTickEnable(bool InVal);// 0x222c764
	void SetUAETriggerEnable(bool IsEnbale);// 0x222c6e4
	void SetTimeSpeedFactor(float Val);// 0x2006b7c
	void SetTimeSpeedCheck(bool Val);// 0x1fd3400
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x222c5d4
	void SetStateLeftTime(int leftTime);// 0x222c55c
	void SetSpeed(float Modifier);// 0x222c4e4
	void SetSnowBoradRotationInAir(float Pitch, float Yaw, float Roll);// 0x222c3e4
	void SetSkillFingerIndex(byte FingerIndex);// 0x222c36c
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x222c2ec
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x222c224
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x1fd3400
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x222c15c
	void SetReconnectZombieWaveDataToClient(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x222bfb8
	void SetPoisonFogEnable(bool IsEnbale);// 0x222bf38
	void SetPlayerTeamBodyInstMask(int Mask);// 0x222bec0
	void SetPlayerMark(Vector Loc);// 0x222be14
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x222bc54
	void SetPlayerBodyInstMask(int Mask);// 0x222bbdc
	void SetPlaneEnabled(bool InEnable);// 0x222bb5c
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x222ba48
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x222b984
	void SetObservingTime(float Time);// 0x222b90c
	void SetMovable(bool IsMovable);// 0x222b88c
	void SetMaxHealth(float HP);// 0x222b814
	void SetLowProbCircle(float X, float Y, float R, float Prob);// 0x222b6cc
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x222b5fc
	void SetLaunchFlyStateOnServer(enum StateType);// 0x222b584
	void SetLaunchFlyState(enum StateType);// 0x222b50c
	void SetJoyStickScale(float JSScale);// 0x222b494
	void SetJoyStickPtrFireMode(int FireMode);// 0x222b41c
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x222b360
	void SetJoyStickOpacity(float JSOpacity);// 0x222b2e8
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x222b278
	void SetJoyStickCenter(Vector2D JSCenter);// 0x222b208
	void SetIsSnowy(bool bSnowy);// 0x222b188
	void SetIsShowBlood(bool InIsShowBlood);// 0x222b108
	void SetIsRainy(bool bRainy);// 0x222b088
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x222b008
	void SetIsBlizzard(bool bBlizzard);// 0x222af88
	void SetInfectResetPlayerInterTime(float InterTime);// 0x222af10
	void SetHasResultState(bool InState);// 0x222ae90
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x222acc0
	void SetFuelByPercent(float percent);// 0x222ac48
	void SetEnterInteractiveActor(Actor* IActor, bool IsIn);// 0x222ab84
	void SetEnableWingAvatar(bool Val);// 0x222ab04
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x222aa40
	void SetDisableTouchMoveInput(bool bDisable);// 0x222a9c0
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x222a8c0
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x222a7c0
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x222a678
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x222a57c
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x222a464
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x222a2e0
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x222a150
	void SetCircleCenter(FString PointString);// 0x222a094
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x2229f88
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x2bbd2f4
	void SetCanDropItem(bool bCanDrop);// 0x2229f08
	void SetBeKickedPlayerName(FString InPlayerName);// 0x2229db0
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x2229ce8
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x2229bd4
	void SetAllInfectedAreaLevel(int LevelId);// 0x2229b5c
	void SetAirDropEnable(bool Enable);// 0x2229adc
	void SetAirAttackEnable(bool Enable);// 0x2229a5c
	void Set2x2ForceCircleLastR(float R);// 0x22299e4
	void Set2x2ForceCircle(float X, float Y, float R);// 0x22298e4
	void Set2x2CircleCenter(int Index, float X, float Y);// 0x22297e4
	void Set2x2Circle3Center(float x1, float y1, float x2, float y2, float x3, float y3);// 0x222960c
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x2229450
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x22292e8
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x2229234
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x2229180
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x22290cc
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x2229018
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x2228e64
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x2228b24
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x22287e4
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x2228730
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x2228634
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x222838c
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x22281a8
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x2228064
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x2227fb0
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x2227eb4
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x2227e00
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x2227d04
	void ServerSetSelfForceHideState(int SlotID, bool bSelfHide);// 0x2227bf4
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x2227ab0
	void ServerSetObsverLocation(const Vector locat);// 0x2227a04
	void ServerSetIsFreeView(bool isFreeView);// 0x222793c
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x2227828
	void ServerSetFreeCamera(Rotator InRotation);// 0x222777c
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x2227668
	void ServerSetControlRotation(const Rotator NewRotation);// 0x22275bc
	void ServerSendLogToLobby(FString ErrorLog);// 0x2227500
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x2227394
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x2227130
	void ServerRemoteDestroyAllActor();// 0x222711c
	void ServerRemoteDestroyActor(int SingleId);// 0x22270a4
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x2226f48
	void ServerReceiveThePlane(int64 TimeStamp);// 0x2226e90
	void ServerReceiveServerStateType(enum ReceivedType, enum ClientType, int64 TimeStamp);// 0x2226d38
	void ServerQuitSpectating();// 0x2226cdc
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x22268e8
	void ServerOpenParachute();// 0x222688c
	void ServerObserveKiller();// 0x2226830
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x222677c
	void ServerObserveAirDropBox(int boxId);// 0x22266c8
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x22265b8
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x2226504
	void ServerJumpFromPlane();// 0x22264a8
	void ServerInterruptGame();// 0x222644c
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x2226358
	void ServerHandleMsg(enum Msg);// 0x22262a4
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x2226174
	void ServerGetTotalPlayers();// 0x2226118
	void ServerGetPlayerAliasInfoList();// 0x22260bc
	void ServerGetCircleInfo();// 0x2226060
	void ServerFight();// 0x2226004
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x2225f50
	void ServerExitFreeCamera();// 0x2225ef4
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x2225d90
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x2225c80
	void ServerDoPickupRevivalFlag();// 0x2225c24
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x2225b08
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x2225a0c
	void ServerCMD_RPC(FString Cmd);// 0x2225918
	void ServerCMD(FString Cmd);// 0x1f6add0
	void ServerClearTeammatesCache();// 0x22258bc
	void ServerChangeWeaponScheme(int Index);// 0x2225808
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x2225754
	void ServerChangeStatePC(enum TargetStateType);// 0x22256dc
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x2225578
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x2225500
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int msgExtraParam);// 0x22252ec
	void SendStringDirect(FString Message);// 0x2225230
	void SendLogToLobbyOnece(byte LogType);// 0x22251b8
	void SendGameStateInitOK();// 0x222515c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x2225090
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x2224f14
	void ScopeOut();// 0x2224f00
	void ScopeIn();// 0x2224eec
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x2224d04
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x2224bac
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x2224a54
	void RunOnNextFrameEvent();// 0x2224a40
	void RunOnNextFrame__DelegateSignature();// 0x2bbd2f4
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x222497c
	void RPC_UseInteractiveActor();// 0x2224920
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x22248c4
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x2224740
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x2224380
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x2224010
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x2223ca0
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x2223bec
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x2223b38
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x2223a74
	void RPC_Server_SendLog(FString ErrorLog);// 0x2223980
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x2223924
	void RPC_Server_ReqHealth();// 0x22238c8
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x22237d4
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x2223714
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x2223570
	void RPC_Server_PrintHP();// 0x2223514
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x2223418
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x2223364
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x22232b0
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x22231bc
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x22230c8
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x2222f74
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x2222dc0
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x2222ccc
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x2222920
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x22228b8
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x2222720
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray);// 0x22225d0
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x22224dc
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x22223e8
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x22222f4
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x22221f8
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x22220b0
	void RPC_Server_ClientHasReactivated();// 0x2222054
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x2221ef0
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x2221d8c
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x2221c90
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x2221bdc
	void RPC_ReviveState_GiveUpRevive();// 0x2221b80
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x2221acc
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x22218b8
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x22216f4
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x2221578
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x2221478
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x22213c4
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x222126c
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x2221110
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x2220f08
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x2220d00
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x2220c38
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x2220a60
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x2220964
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x2220868
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x222076c
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x2220614
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x22204fc
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x22203c0
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x222027c
	void RPC_GiveUpGame();// 0x2220220
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x22200e0
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x221ffa8
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x221ff28
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x221fe20
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x221fc0c
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x221fa40
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x221f874
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x221f6a8
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x221f5a0
	void RPC_Client_RemoteDestroyAllActor();// 0x21a0c30
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x221f520
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x221f38c
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x221f0f4
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x221efdc
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x221ed34
	void RPC_Client_NotifyHealth(float Health);// 0x221ec80
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x221ec00
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x221ea9c
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x221e9a8
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x221e8ac
	void RPC_Client_BeginInteractiveProcess();// 0x221e890
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc);// 0x221e758
	void RPC_CancelUseInteractiveActor();// 0x221e6fc
	void RevivalTemateSuccess();// 0x221e6e0
	void RevivalTemateFail(FString Reason);// 0x221e61c
	float RetriveMobileContentScaleFactor();// 0x221e5f4
	void RetrievePlayerBattleResultData();// 0x1f4cfe0
	void RestoreDefaultInteractionSize(int JSIndex);// 0x221e57c
	void RespHasSignalBar(bool bHas);// 0x221e4f4
	void RespawnRecoverData(UAEPlayerController* PC);// 0x221e47c
	void ResetVehicleEngine();// 0x221e468
	void ResetMissingUIUpdate();// 0x2bbd2f4
	void RequireNetCullingDistanceByDevice();// 0x221e40c
	void RequireDeviceInfo();// 0x221e3f0
	void RequestServerHandleMsg();// 0x221e394
	void RequestPlayerNewbieInfo();// 0x221e380
	void RequestHasSignalBar();// 0x221e324
	bool RequestChangeWearInBattle(int NewIndex);// 0x221e2a4
	bool RequestChangeWear(int NewIndex);// 0x221e224
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x221e15c
	void ReqRecordEnterIceMountain();// 0x221e100
	void ReqLeaveVehicle();// 0x221e0ec
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x221e038
	void ReqExchangeVehicleCharacter(int Param);// 0x221dfc0
	void ReqEnterVehicle(float dis);// 0x221df48
	void ReqEnterSnowBoard();// 0x221df34
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x221debc
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x221dd60
	void ReportAntiCheatInfo();// 0x221dd4c
	void ReplaceVehicleWithPath(FString Path);// 0x221dc90
	void ReplaceVehicle();// 0x221dc7c
	void Rep_RefreshInteractiveActor();// 0x221dc68
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x221dbf0
	void RemoveCustomSensibility(int WeaponId);// 0x221db78
	void RemoveAllDoors();// 0x221db64
	void ReleaseFire();// 0x2bbd2f4
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x221daec
	void ReInitParachuteItem();// 0x221dad8
	void RefreshTopMostUIPanel(byte Type);// 0x2bbd2f4
	void RefreshShootDetailInfo();// 0x221dac4
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x2bbd2f4
	void RecoverStatusAfterReconnecting();// 0x221daa8
	void RecordPathPoint();// 0x221da94
	void ReceiveClientRestart();// 0x2bbd2f4
	void ReceiveBackpackComponent();// 0x221da78
	void QuitSpectating();// 0x221da64
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x221d914
	void PrintMovementLog(int PrintLog);// 0x221d89c
	void PrintDownCollision();// 0x221d888
	void PrintAllPickupWarpper();// 0x221d874
	void PressGrenade(bool isThrow);// 0x2bbd2f4
	void PressFire(int FingerIndex);// 0x2bbd2f4
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x221d7b8
	void PlayerKillingDelegate__DelegateSignature();// 0x2bbd2f4
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x2bbd2f4
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x2bbd2f4
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x2bbd2f4
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x2bbd2f4
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x2bbd2f4
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x2bbd2f4
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x2bbd2f4
	void PlayBattleSound(FString BankName, FString SoundName);// 0x221d678
	void PickupInitialItemListForRobustness();// 0x221d664
	void OpenParachute();// 0x221d650
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x2bbd2f4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x2bbd2f4
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x2bbd2f4
	void OnWallFeedBack(bool _WallFeedBack);// 0x221d5d0
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x221d558
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x221d49c
	void OnViewTargetPlayerStateChanged();// 0x221d488
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x221d410
	void OnViewTargetChangeVehicleSeat();// 0x221d3fc
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x221d384
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x2bbd2f4
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x2bbd2f4
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x2bbd2f4
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x2bbd2f4
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x2bbd2f4
	void OnUseVehicleWarWeapon();// 0x221d370
	void OnUseVehicleWarItem();// 0x221d35c
	void OnUseVehicleWarEyes();// 0x221d348
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x2bbd2f4
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x2bbd2f4
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x2bbd2f4
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x2bbd2f4
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x221d168
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnTeammatesAllDie();// 0x221d154
	void OnTeammateLogin(int InTeamID);// 0x221d0dc
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x2bbd2f4
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x2bbd2f4
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x2bbd2f4
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x2bbd2f4
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x2bbd2f4
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x2bbd2f4
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x2bbd2f4
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x2bbd2f4
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x2bbd2f4
	void OnStopFireDelegate__DelegateSignature();// 0x2bbd2f4
	void OnStartFireDelegate__DelegateSignature();// 0x2bbd2f4
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x2bbd2f4
	void OnSpectatorChange__DelegateSignature();// 0x2bbd2f4
	void OnSpectatorCameraChange(bool bDie);// 0x2bbd2f4
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime, bool bCanCancelSkill);// 0x2bbd2f4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x2bbd2f4
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x2bbd2f4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x221d00c
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x2bbd2f4
	void OnServerFinishPickupRevivalFlag();// 0x221cff0
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x2bbd2f4
	void OnSelfPlayerKilledOthersPlayer__DelegateSignature(int CauserWeaponAvatarID);// 0x2bbd2f4
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x2bbd2f4
	void OnRepTeammateChange__DelegateSignature();// 0x2bbd2f4
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x2bbd2f4
	void OnRepPlayerState__DelegateSignature();// 0x2bbd2f4
	void OnRepNotify_SetBattleOwner();// 0x221cfdc
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x1f4cfe0
	void OnRep_WeatherFog();// 0x221cfc8
	void OnRep_WeaponSystemReconnectReplicateData();// 0x221cfb4
	void OnRep_WeaponFunctionChanged();// 0x221cfa0
	void OnRep_WeaponAvatarDataList();// 0x221cf84
	void OnRep_UsedSimulation();// 0x221cf68
	void OnRep_SwitchWeather();// 0x221cf54
	void OnRep_STExtraBaseCharacter();// 0x221cf40
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x221cf2c
	void OnRep_ShowWeaponHitDetailInfo();// 0x221cf18
	void OnRep_ServerStateType();// 0x221cf04
	void OnRep_RefreshTotalPlayers();// 0x221cef0
	void OnRep_RefreshAirDropBox();// 0x221cedc
	void OnRep_Plane();// 0x221cec8
	void OnRep_ObservedItemList();// 0x221ceb4
	void OnRep_InWateringRangeBP();// 0x2bbd2f4
	void OnRep_InWateringCRange();// 0x221ce60
	void OnRep_InitialEquipmentAvatar();// 0x221ce44
	void OnRep_InitialConsumableAvatar();// 0x221ce28
	void OnRep_ImprisonmentTeammateSucess();// 0x221ce14
	void OnRep_GameStateMsgType();// 0x221ce00
	void OnRep_ForbitPickEffect();// 0x221cdec
	void OnRep_ForbitPick();// 0x221cdd8
	void OnRep_FiringPlayerList();// 0x221cdc4
	void OnRep_EnableDeathPlaybackDelay();// 0x221cdb0
	void OnRep_DeadTombBox();// 0x221cd9c
	void OnRep_CanOpenParachute();// 0x221cd88
	void OnRep_CanJump();// 0x221cd74
	void OnRep_CanImprisonmentTeammate();// 0x221cd60
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x221cd4c
	void OnRep_BackpackComponent();// 0x221cd38
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x2bbd2f4
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x2bbd2f4
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x2bbd2f4
	void OnReleaseFire();// 0x221cd24
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x2bbd2f4
	void OnReconnected__DelegateSignature();// 0x2bbd2f4
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x2bbd2f4
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x2bbd2f4
	void OnPressVehicleWarMatchData();// 0x221cd10
	void OnPressVampireClothSlotBtn();// 0x221ccfc
	void OnPressTurnplateQuickMsgBtn();// 0x221cce8
	void OnPressTriggerEntireMapBtn();// 0x221ccd4
	void OnPressShowTagVehileSeatListBtn();// 0x221ccc0
	void OnPressRolewearChangeBtn(int Index);// 0x221cc48
	void OnPressItemSKillBtn();// 0x221cc34
	void OnPressFire();// 0x221cc20
	void OnPressBackpackBtn();// 0x221cc0c
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x2bbd2f4
	void OnPlayerUseRecoverItem();// 0x221cbf8
	void OnPlayerStateChanged();// 0x221cbe4
	void OnPlayerReConnected(int LostPlayerKey);// 0x221cb30
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x2bbd2f4
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x2bbd2f4
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x2bbd2f4
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x2bbd2f4
	void OnPlayerLostConnection(int LostPlayerKey);// 0x221ca7c
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x2bbd2f4
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x2bbd2f4
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x2bbd2f4
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x221c9fc
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x2bbd2f4
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x2bbd2f4
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x2bbd2f4
	void OnPlayerClickDriveBtn();// 0x221c9e8
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x2bbd2f4
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x2bbd2f4
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x221c8a4
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x2bbd2f4
	void OnPickUpExpand();// 0x221c83c
	void OnPickUpCollapsed(bool isCollapsed);// 0x221c7bc
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x2bbd2f4
	void OnOneFloatValueDelegate__DelegateSignature(float TheValue);// 0x2bbd2f4
	void OnOccupyNewbieGuide(int inGuideID);// 0x221c744
	void OnObserverLevelLoaded();// 0x221c730
	void OnObservedUsingWeaponChanged();// 0x221c71c
	void OnObservedPoisonFogStageChanged();// 0x221c708
	void OnObservedItemsChanged();// 0x221c6f4
	void OnObservedBulletNumChanged();// 0x221c6e0
	void OnNightStateChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x221c668
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x2bbd2f4
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x2bbd2f4
	void OnLostConnection__DelegateSignature();// 0x2bbd2f4
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x2bbd2f4
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x2bbd2f4
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float RatioSignalHP);// 0x2bbd2f4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x2bbd2f4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x2bbd2f4
	void OnKillerNotify(Actor* Killer);// 0x221c5f0
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x221c4e0
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x221c400
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x221c2f0
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x2bbd2f4
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x2bbd2f4
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x2bbd2f4
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x2bbd2f4
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x2bbd2f4
	void OnGameStartDelegate__DelegateSignature();// 0x2bbd2f4
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x2bbd2f4
	void OnGameModeStateChanged();// 0x2bbd2f4
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x2bbd2f4
	void OnExitGame__DelegateSignature();// 0x2bbd2f4
	void OnEquipWeaponDelegate__DelegateSignature();// 0x2bbd2f4
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x2bbd2f4
	void OnEquipmentAvatarChange__DelegateSignature();// 0x2bbd2f4
	void OnEnterBattleResultStep();// 0x221c2dc
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x2bbd2f4
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x2bbd2f4
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x2bbd2f4
	void OnDeadBoxExpand();// 0x221c2c8
	void OnDeadBoxCollapsed(bool isCollpased);// 0x221c248
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x2bbd2f4
	void OnConsumableAvatarChange__DelegateSignature();// 0x2bbd2f4
	void OnClientWillGotoSpectating();// 0x221c234
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamId, Actor*[] PeerVisualFieldActorList);// 0x2bbd2f4
	void OnClickVehicleWarBuff();// 0x221c220
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x2bbd2f4
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x2bbd2f4
	void OnCharacterRecoveryHealthEvent();// 0x221c20c
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x2bbd2f4
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x2bbd2f4
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x2bbd2f4
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x2bbd2f4
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x2bbd2f4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x221c18c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x2bbd2f4
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x2bbd2f4
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x2bbd2f4
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x2bbd2f4
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x221c10c
	void OnBuyRevivalSign();// 0x221c0f0
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x2bbd2f4
	void OnAutoSprintActive__DelegateSignature();// 0x2bbd2f4
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x221bf88
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void ObserveWhoKilledMe();// 0x221bf74
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x221bec0
	void ObserveCharacter(FString InPlayerName);// 0x221bd68
	void ObserveAirDropBox(int boxId);// 0x221bcf0
	void OBCameraTurnSlower();// 0x221bcdc
	void OBCameraTurnFaster();// 0x221bcc8
	void OBCameraMoveSlower();// 0x221bcb4
	void OBCameraMoveNear();// 0x221bca0
	void OBCameraMoveFaster();// 0x221bc8c
	void OBCameraMoveFar();// 0x221bc78
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x221ba60
	void NotifyIsInResultView(bool isInResultView);// 0x221b9dc
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x2bbd2f4
	void NotifyDeadBoxExpand();// 0x2bbd2f4
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x2bbd2f4
	void MoveUp(float Rate);// 0x221b964
	void MoveToVehicle(int ItemId);// 0x221b8ec
	void MoveToNearestVehicle(float IgnoreDistance);// 0x221b874
	void MoveToItem(int ItemId);// 0x221b7fc
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x221b670
	void MoveToAIByDropItem(int ItemId);// 0x221b5f8
	void MoveToAI();// 0x221b5e4
	void MoveTo(float X, float Y, float Z);// 0x221b4e4
	void MoveTempleToSelf();// 0x221b4d0
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x221b414
	void ModifyStreamingDistance(int Distance);// 0x221b39c
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x221b29c
	void MemberVoice(int member, int Status);// 0x2bbd2f4
	void MarkStartFireFrame();// 0x221b288
	void MakeVehicleFly(int isFly, bool bIsUp);// 0x205b10c
	void LogAIItemCount(int ItemId, float Distance);// 0x221b1cc
	void LocalProfileFootprint();// 0x221b1b8
	void LocalGetGameStateReconnectInfo();// 0x221b1a4
	void LoadAllLand(bool bLoadAll);// 0x221b124
	void LerpFPPCamera();// 0x221b110
	void KillSomeOne(FString InPlayerName);// 0x221b054
	void KillAllEnermyVehicle();// 0x221b040
	void KillAll();// 0x221b02c
	void Kill(int GivenNumber);// 0x221afb4
	void KickPlayerFromGame();// 0x221afa0
	void JumpFromPlane();// 0x221af8c
	void JoystickTriggerSprint(bool bIsSprint);// 0x2bbd2f4
	bool IsViewTarget(const Actor* pActor);// 0x221af04
	bool IsUse3DTouch();// 0x221aedc
	bool IsTouchToRotControl();// 0x221aeac
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x221ae2c
	bool IsToggleOBBulletTrackEffect();// 0x221ae04
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x221ad84
	bool IsStandalone();// 0x221ad50
	bool IsShowBlood();// 0x221ad30
	bool IsSameTeam(Pawn* Other);// 0x221acb0
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x221ac30
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x221abb0
	bool IsMurderSelfDefense(FString InformMurderName);// 0x221aaec
	bool IsMoveable_DontConsiderFollowingState();// 0x221aac4
	bool IsMoveable();// 0x221aa9c
	bool IsLastBreathOrRescueingOther();// 0x221aa74
	bool IsInRevival();// 0x221aa4c
	bool IsInPlane();// 0x221aa24
	bool IsInParachuteOpen();// 0x221a9fc
	bool IsInParachuteJump();// 0x221a9d4
	bool IsInParachute();// 0x221a9ac
	bool IsInObservingPlayback();// 0x221a984
	bool IsInInitial();// 0x221a95c
	bool IsInFreeCameraView();// 0x221a940
	bool IsInFinish();// 0x221a918
	bool IsInFight();// 0x221a8f0
	bool IsInDeathReplay();// 0x221a8c8
	bool IsInDead();// 0x221a8a0
	bool IsForbitPickMakeEffect();// 0x221a878
	bool IsForbitPick(out const FName TombName);// 0x221a7e4
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x221a718
	bool IsCanViewEnemy();// 0x221a6f0
	bool IsCanSpectateTeammate();// 0x221a6c8
	bool IsCanImprisonmentTeammate();// 0x221a6a0
	bool IsCacheReceiveRespawnZombie();// 0x221a678
	bool IsAutoParachuteEnable();// 0x221a650
	bool IsAllowActorTouchMove();// 0x221a628
	bool IsAGMPlayer();// 0x221a600
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x221a544
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x221a4cc
	void InputCameraMoveTest(float DeltaSeconds);// 0x221a454
	void InitWeatherConfigComponent();// 0x221a440
	void InitTaskDatas(uint32 InPlayerKey);// 0x221a3c8
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x2bbd2f4
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x221a1e0
	void InitTaskComponent();// 0x221a1cc
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x2bbd2f4
	void InitJoyStickAfterActivation();// 0x2bbd2f4
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x2bbd2f4
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x221a0cc
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x2bbd2f4
	void InfectionEndRound();// 0x221a0b8
	void ImprisonmentTeammate(FString TeammateName, bool IsSelfDef);// 0x2219f68
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x2bbd2f4
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x2219df0
	void HandleUpdateShovelingRelease();// 0x2219ddc
	void HandleUpdateShovelingPressed();// 0x2219dc8
	void HandleUpdateShoveling();// 0x2219db4
	void HandleTogglePlayerListInOB();// 0x2219da0
	void HandleToggleOBTeamList(bool InShow);// 0x2219d20
	void HandleToggleMapInOB();// 0x2219d0c
	void HandleToggleHitDamageDisplay();// 0x2219cf8
	void HandleToggleBulletTrack();// 0x2219ce4
	void HandleTipInfo(FString FullMsg);// 0x2219c28
	void HandleSwitchToTeammatePrev();// 0x2219c14
	void HandleSwitchToTeammateNext();// 0x2219c00
	void HandleSwitchToTeam(int InTeamID);// 0x2219b88
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x2219b10
	void HandleMsg(enum Msg);// 0x2219a98
	void HandleLeaveFreeViewInOB();// 0x2219a14
	void HandleLandOnGroundEnd();// 0x2219a84
	void HandleFlyLeapPlatform();// 0x2219a28
	void HandleEnterFreeViewInOB();// 0x2219a14
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x2219944
	void HandleClientHasReactivated();// 0x2219930
	void HandleChangeRolewearDone();// 0x2bbd2f4
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x2219874
	int GotoSpectating(int TeammatePlayerid);// 0x22197ec
	void GotoFlying();// 0x22197d8
	void GotoDoubleCircleEdge(float Z);// 0x2219760
	void GMTeleport(FName Teleporter);// 0x22196e8
	void GMSpawnTrueAI(int playerCount);// 0x2219670
	void GMSetScalarParam(FString Name, FString ShaderName, float Value);// 0x22193bc
	void GMSetCampId(int CamId);// 0x2219344
	void GMSetBoolPoisonCircle();// 0x2219330
	void GMSetBoolAirDrop();// 0x221931c
	void GMSetBoolAirAttack();// 0x2219308
	void GMSetBoolAI();// 0x22192f4
	void GMSendDailyTaskReport();// 0x22192e0
	void GMOpenWeather(int OpenWeatherID);// 0x2219268
	void GMFormationAITeam();// 0x2219254
	void GMEnableRandom();// 0x2219240
	void GMEnableAllComponent();// 0x221922c
	void GMDisableRandom();// 0x2219218
	void GMDisableAllComponent();// 0x2219204
	void GMCloseWeather(int CloseWeatherID);// 0x221918c
	void GMChangeFinalCircleAI();// 0x2219178
	void GMBroastSyncTaskInfo();// 0x2219164
	void GMBeginCircle(int CurIndex, float PosX, float PosY);// 0x2219064
	int GetWriteCircleDistance();// 0x221903c
	bool GetWidgetRenderCanChange();// 0x2219014
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x2218fec
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x2218ef0
	int GetWeaponDIYPlanID(int WeaponId);// 0x2218e70
	int GetWeaponAvatarItemId(int BPID);// 0x2218de8
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x2218d1c
	float GetViewPortDPIScale();// 0x2218cec
	VehicleUserComponent* GetVehicleUserComp();// 0x2218cc4
	bool GetUseMotionControlLog();// 0x2218c9c
	bool GetUseMotionControlEnable();// 0x2218c74
	int GetUnlockWearCount();// 0x2218c4c
	float GetTouchForce(byte FingerIndex);// 0x2218bcc
	Actor* GetThePlane();// 0x2218bac
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x2218b2c
	SpringArmComponent* GetTargetedSpringArm();// 0x2218b04
	int GetStatTriangles();// 0x1f722e8
	FString GetStatMemory();// 0x21ec1a8
	int GetStatDrawCalls();// 0x1f722e8
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x22189ac
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x22188a4
	int[] GetSpecialAreaList();// 0x22187e4
	int GetSpecialAreaID();// 0x22187bc
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x2218794
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x22186fc
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x22185a0
	int GetRevivalCountDownTime();// 0x2218578
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x2bbd2f4
	QuickSignComponent* GetQuickSignComponent();// 0x2218550
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x2218528
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x2218440
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x2218418
	CharacterParachuteComponent* GetParachuteComponent();// 0x22183f0
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x221832c
	Transform GetPaintDecalTargetTransform();// 0x22182cc
	ObservingReplay* GetObservingPlayback();// 0x22182a4
	Vector GetNewestAirDropBoxPos();// 0x221825c
	PlayerInfoInOB[] GetNearPlayerList();// 0x221814c
	STExtraPlayerController*[] GetMyObservers();// 0x22180e4
	FString GetMurderUIDStr();// 0x2217fe8
	FString GetMurderName();// 0x2217f28
	bool GetMurderIsAI();// 0x2217ef0
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x2217cb4
	byte GetMaxTouchForceFinger();// 0x2217c74
	Vector2D GetJoyStickVisualSize();// 0x2217c34
	Vector2D GetJoyStickCenter();// 0x2217bf4
	int GetItemUseSpecialAreaID(int ItemId);// 0x2217b74
	bool GetIsRespawn();// 0x2217b54
	bool GetIsMurderSameTeam();// 0x2217b1c
	bool GetIsFreeCamera();// 0x2217afc
	enum GetInfectionPawnSubType();// 0x2217ad4
	enum GetInfectionPawnMainType();// 0x2217aac
	IdeaDecalManager* GetIdeaDecalManager();// 0x2217a84
	void GetGameStateReconnectInfoOnServer();// 0x2217a28
	void GetGameScreenSize();// 0x1f4cfe0
	void GetGameResult();// 0x2217a14
	LastGameRemainItemData GetGameRemainItems();// 0x2217924
	int GetFriendDistance();// 0x1f722e8
	Vector GetFocalLocation();// 0x22178d4
	FString GetFinalMurderName();// 0x22177b4
	WeaponHitDetailInfo GetDetailHitInfo();// 0x2217680
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x2217504
	enum GetCurrentStateType();// 0x22174dc
	Vector GetCurrentLevelOffset();// 0x2217494
	STExtraPlayerState* GetCurPlayerState();// 0x221746c
	int GetCurPlayerId();// 0x2217444
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x221741c
	Vector GetCurPawnLocation();// 0x22173d4
	Pawn* GetCurPawn();// 0x22173ac
	float GetCurFPS();// 0x1f722e8
	Rotator GetControlLookRotation();// 0x221735c
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x2217270
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x2217118
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x2217098
	ChatComponent* GetChatComponent();// 0x2217070
	uint32 GetBeKickedPlayerKey();// 0x2217048
	BackpackComponent* GetBackpackComponent();// 0x2217020
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x2216f54
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x2216df0
	void GameModeGotoNextState();// 0x2216ddc
	void GameModeGotoFightingState();// 0x2216dc8
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x2216d0c
	void ForceServerSetControlRotationOnVehicle();// 0x2216cf8
	void ForceReleaseCurTouchMoveFinger();// 0x2216ce4
	void ForceDropItemsWithType(int TypeItem);// 0x2216c6c
	void ForceDropItems(out const int[] ItemTableList);// 0x2216ba0
	void ForceDropAllItem();// 0x2216b8c
	void FlushItem(int onlyStatic);// 0x2216b14
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x2216aa4
	void FireOrGrenade();// 0x2216a90
	void FindAIDropItem(int ItemId);// 0x2216a18
	void Fight();// 0x2216a04
	void FadeSceneToGrayOnDeath(bool bSet);// 0x2216984
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x22167e0
	void ExitNightState();// 0x22167cc
	void ExitFreeCamera(bool IsForceReset);// 0x221674c
	void ExecDSCommand(const FString DSCommand);// 0x2216688
	void EquipIceDrinkItems(out const int[] ItemList);// 0x22165bc
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x2bbd2f4
	void EnterNightState();// 0x22165a8
	void EnterExtreme(bool enterOrQuit);// 0x2216528
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x2216420
	void EndForceTouchFire(Vector Loc);// 0x22163b0
	void EnablePlayerInHouse(bool bIsIn);// 0x2216330
	void EnableMyLandscapeDraw();// 0x1f4cfe0
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x2bbd2f4
	void EnableAutoParachute(bool bEnable);// 0x22162b0
	void DynamicCreateComponents();// 0x221629c
	void DsLuaGM(const FString CmdString);// 0x2216144
	void DsLuaDoString(FString LuaString);// 0x2216088
	void DropItemsWithType(int TypeItem);// 0x2216010
	void DropItem(int ID);// 0x2215f98
	void DropAllItem();// 0x2215f84
	void DoUITouchMove(Vector Loc);// 0x2bbd2f4
	void DoubleClickCancel(const byte FingerIndex);// 0x2215f0c
	void DoTouchMove(float Yaw, float Pitch);// 0x2bbd2f4
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x2215e58
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x2215da4
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x2bbd2f4
	void DisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x2215b98
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x22158e0
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x2215628
	void DisplayGameTipWithMsgID(int ID);// 0x22155b0
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x22152f8
	void DisplayBattleGeneralTip(int ID, FString param1, FString param2);// 0x2215040
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x2214fc8
	void DispatchPlayerReconnectedEvent();// 0x2214fb4
	void DispatchPlayerLostEvent();// 0x2214fa0
	void DispatchPlayerExitEvent();// 0x2214f8c
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x2214f14
	void DisableMyLandscapeDraw();// 0x1f4cfe0
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x2bbd2f4
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x2bbd2f4
	void DelayGotoSpectating();// 0x2214f00
	void DelayForceExitFreeCamera();// 0x2214eec
	void DebugWorldPlayerAvatarInfo();// 0x2214ed8
	void DebugSetUIVisibility(bool bUIVisibility);// 0x2bbd2f4
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x2214e58
	void DebugEnableDrawSearchLine(int bEnabled);// 0x2006b7c
	void DebugEnableBulletImpact(int bEnabled);// 0x2006b7c
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x2214cc8
	void DealGetAllNearShotWeapon(float disRate);// 0x2214c50
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x2214b94
	void DealGetAllNearMoveCharacter(float checkDis);// 0x2214b1c
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x2214a58
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x221489c
	void ConsumeRevivalSign();// 0x2214880
	void CollectAllPlayerWeaponPosInfo();// 0x1f4cfe0
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x2214768
	void ClientStopShoveling();// 0x221470c
	void ClientStartOnlineGame();// 0x22146f0
	void ClientShowInfectAreaWarning();// 0x2214694
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x221450c
	void ClientSetPoisonSmogStage(int SmogStage);// 0x2214458
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x2214350
	void ClientSetControlRotation(const Rotator NewRotation);// 0x22142d8
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x22141dc
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x2214114
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x2214000
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x2213f30
	void ClientQuitViewEnemy();// 0x2213f14
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x2213e14
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x2bbd2f4
	void ClientOnHurt();// 0x2213df8
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x2bbd2f4
	void ClientOnDamageToOther(float _DamageToOther);// 0x2213d78
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x2bbd2f4
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x2213c64
	void ClientInterruptGame();// 0x2213c08
	void ClientInitIngameUIAfterRespawn();// 0x2213bac
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x2213af0
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x2213a28
	void ClientGotoSpectating();// 0x2213a0c
	void ClientGiveUpRevivalTemmates();// 0x22139f8
	void ClientGameStarted();// 0x22139dc
	void ClientFriendBattleEnd();// 0x22139c0
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x2213938
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x22138b0
	void ClientEnterViewBox(int boxId);// 0x2213830
	void ClientEndOnlineGame();// 0x2213814
	void ClientDisplayNormalTips(FString Content);// 0x2213750
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x221353c
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x2213378
	void ClientDisplayGameTipWithMsgID(int ID);// 0x22132c4
	void ClientCheckStartShovelingFail();// 0x2213268
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x22131b4
	void ClientChangeStatePC(enum TargetStateType);// 0x2213134
	void ClearParachuteAnimAssetCache();// 0x2213120
	void ClearDeadTombBox();// 0x221310c
	void ClearBossBornPoint();// 0x22130f8
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x2213058
	bool CientRevivalTemmates();// 0x2213030
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x2212f64
	void CheckConsumeGlideItem();// 0x2212f50
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x2212ec8
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x2212e48
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x2212dd0
	void ChangeToWalkingDead();// 0x2212dbc
	void ChangeStatePC(enum TargetStateType);// 0x2212d44
	void ChangeSpectatorStateToFreeView();// 0x2212d30
	bool ChangeRolewearIndex(int NewIndex);// 0x2212cb0
	void ChangePVELevel(int Lv);// 0x2212c38
	void ChangeFinishTime(int RestTime);// 0x2212bc0
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x2bbd2f4
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x2bbd2f4
	void ChangeAIBehaviorTree(int TreeIndex);// 0x2212b48
	void CanSeeAllUI(bool bUIVisibility);// 0x1fd3400
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x2212aa8
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x2212998
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x2212910
	void CallZombieFlowAirDrop(int ZombieID);// 0x2212898
	void CallZombieAirDrop(int ZombieID);// 0x2212820
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x2212768
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x2212584
	void CallShowTouchInterface(bool InShow);// 0x22124fc
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x2211f2c
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x2211dcc
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x2211d54
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x2211cdc
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x2bbd2f4
	void C2S_RequestSkillPrompt();// 0x2211c80
	void C2S_RequestBeingRescuedRemainingTime();// 0x2211c24
	void BroadcastFatalDamageToClient(FString CauserName, FString VictimName, FString FuzzyCauserName, FString FuzzyVictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int Relationship, int PreviousHealthStatus, FString RealKillerName, int realKillerNewKillNum, FString CauserNation, FString VictimNation, uint32 causerKey, uint32 victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, int CauserClothAvatarID, int CauserType, int VictimType);// 0x22112a4
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x2211040
	bool BPGetIsAndroidSimulator();// 0x2211018
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x2210dcc
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x2210c08
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x2bbd2f4
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x2210b90
	void BindVoiceCheckFunction();// 0x2210b7c
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x2210afc
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x2210a40
	void BeginAbsorb();// 0x22109e4
	void BackToGameDataRefresh();// 0x22109d0
	bool AutoSelectViewTarget();// 0x22109a8
	void AutoSelectTeammateToView();// 0x2210994
	void AddWeaponPendantItem(int WeaponId, int pendantID);// 0x22108d8
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x22107cc
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x22106cc
	void AddItemAttachList(int BaseItemID);// 0x2210654
	void AddItem(int ID, int Count, int PickupType);// 0x2210554
	void AddCharacterVirtualItemToBackpack();// 0x2210540
	void AddBossBornPoint(float BornX, float BornY);// 0x2210484
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x221033c
	void AddAIItem(int ID, int Count, float Distance);// 0x221023c
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x2210178
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x22100f8

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xb88, Size: 12]
	delegate OnDeath;//[Offset: 0xb94, Size: 12]
	delegate OnBulletChange;//[Offset: 0xba0, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xbac, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xbb8, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xbc4, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xbd0, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xbdc, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xbe8, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xbf4, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xc00, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xc0c, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xc18, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xc24, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xc50, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xc5c, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xc68, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xc74, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xc80, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xc8c, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xc98, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xca4, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xcb0, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xcec, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xcf8, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xd04, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xd10, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xd1c, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xd28, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xd34, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xd40, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xd4c, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xd58, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xd64, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xd70, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xd7c, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xd88, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xd94, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xd98, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xd9c, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xda0, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xda4, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xda8, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdac, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdac, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdac, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xdb0, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb4, Size: 1]
	float Money;//[Offset: 0xdb8, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdbd, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdbd, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbe, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbf, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xdc0, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc4, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc5, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc6, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc7, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xdcc, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xdd4, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0xdd8, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xddc, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0xde0, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0xde4, Size: 4]
	FName HeadSocketName;//[Offset: 0xde8, Size: 8]
	FName LFootSocketName;//[Offset: 0xdf0, Size: 8]
	FName RFootSocketName;//[Offset: 0xdf8, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xe00, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xe04, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xe08, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xe0c, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xe10, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xe14, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xe18, Size: 4]
	GroupPhysicsComponent* GroupPhysics;//[Offset: 0xe1c, Size: 4]
	bool bClientDoNotSetTransformOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xe24, Size: 12]
	byte PoseState;//[Offset: 0xe30, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xe34, Size: 4]
	Actor* ThePlane;//[Offset: 0xe38, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xe3c, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xe40, Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 1]
	float RadialDamageScale;//[Offset: 0xe60, Size: 4]
	byte LastPoseState;//[Offset: 0xe64, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0xe68, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6c, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xe70, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe79, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7a, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xe7c, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe81, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xe84, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xe88, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0xe94, Size: 12]
	Actor*[] InventoryData;//[Offset: 0xea0, Size: 12]
	AkComponent* SoundComp;//[Offset: 0xefc, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xf00, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf04, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf05, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xf08, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xf0c, Size: 4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xf10, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0xf4c, Size: 4]
	int CurrentTaskTriggerAreaID;//[Offset: 0xf50, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0xf54, Size: 4]
	float ProduceSoundInterval;//[Offset: 0xf58, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0xf5c, Size: 4]
	float HearRadius;//[Offset: 0xf60, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 1]
	Actor* WaterObj;//[Offset: 0xf6c, Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xf72, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xf74, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xf78, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xf7c, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xf84, Size: 4]
	float NearDeathBreath;//[Offset: 0xf88, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xf90, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0xf9c, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xfa0, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0xfa8, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xfb0, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xfb8, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xfc0, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xfc8, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x1004, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1010, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x101c, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1020, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x102c, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1030, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1034, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x103c, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1048, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x104c, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1050, Size: 4]
	float ScopeLagScale;//[Offset: 0x1058, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x105c, Size: 4]
	float ScopeFov;//[Offset: 0x1060, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1068, Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x106c, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1070, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1074, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1078, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x107c, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x1088, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x1098, Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x109c, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x10a0, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x10a4, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x10a8, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x10ac, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x10b0, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x10b8, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x10c8, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x10d4, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x10e0, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x10ec, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f9, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fa, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x10fc, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1100, Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x110c, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1118, Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1124, Size: 4]
	float PickUpRadius;//[Offset: 0x1128, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x112c, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1132, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x1134, Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1140, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1168, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x117c, Size: 12]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1188, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x1198, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x119c, Size: 12]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x11a8, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x11ac, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b4, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x11b8, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x11c0, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x11cc, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x11d8, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x11e8, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1210, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1214, Size: 4]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121c, Size: 1]
	float AIThrowPitch;//[Offset: 0x1220, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x1224, Size: 8]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1230, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x126c, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x127c, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x1280, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x128c, Size: 4]
	Vector CurInputVector;//[Offset: 0x1290, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x129c, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x12ac, Size: 4]
	float voiceCheckCD;//[Offset: 0x12b0, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x12b4, Size: 4]
	float VoiceCheckDis;//[Offset: 0x12b8, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x12bc, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x12c4, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x12e0, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x131c, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x132c, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1330, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x1334, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1338, Size: 4]
	int HandFolderRatio;//[Offset: 0x133c, Size: 4]
	float SwimUpRate;//[Offset: 0x1340, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x1344, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1349, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134a, Size: 1]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1351, Size: 1]
	PickUpItemData[] CacheDropList;//[Offset: 0x1354, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1361, Size: 1]
	Vector MoveInputState;//[Offset: 0x138c, Size: 12]
	float SwitchPoseCD;//[Offset: 0x13b8, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x13f0, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x13f8, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1410, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1440, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1488, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x148c, Size: 4]
	float DelayHideDuration;//[Offset: 0x1490, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1494, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1498, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149c, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x14a0, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ac, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x14b0, Size: 164]
	AnimParamList CurAnimParamList;//[Offset: 0x1554, Size: 296]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x167c, Size: 120]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x16f4, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1724, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1744, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1764, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x1770, Size: 1]
	byte PrevThrowGrenadeMode;//[Offset: 0x1771, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1780, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1781, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1784, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178c, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1790, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1794, Size: 4]
	float HighWalkSpeed;//[Offset: 0x17a8, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x17ac, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x17b0, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x17b4, Size: 4]
	float MaxProneSpeed;//[Offset: 0x17b8, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x17bc, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x17c0, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c4, Size: 4]
	float HealthPredict;//[Offset: 0x17c8, Size: 4]
	float BreathAmount;//[Offset: 0x17cc, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d0, Size: 1]
	int PoisonSmogStage;//[Offset: 0x17d4, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x17d8, Size: 4]
	float AntidoteExeTime;//[Offset: 0x17dc, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x17e0, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x17e4, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x17e8, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x17ec, Size: 12]
	byte HealthStatus;//[Offset: 0x17f8, Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x17fc, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1838, Size: 1]
	float SpeedRate;//[Offset: 0x183c, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1840, Size: 4]
	float RecoveryScale;//[Offset: 0x1844, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1848, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x184c, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1850, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1854, Size: 48]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1884, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1890, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1894, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1898, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x189c, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x18a0, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x18a8, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x18ac, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x18b4, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b8, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x18bc, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x18c0, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x18c4, Size: 4]
	float StandHalfHeight;//[Offset: 0x18c8, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x18cc, Size: 4]
	float ProneHalfHeight;//[Offset: 0x18d0, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x18d4, Size: 4]
	float StandRadius;//[Offset: 0x18d8, Size: 4]
	float DyingRadius;//[Offset: 0x18dc, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x18e0, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x18e4, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x18f0, Size: 12]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x18fc, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1908, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1918, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x191c, Size: 12]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1928, Size: 1]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x192c, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x1930, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x1934, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x1938, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1942, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1944, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1960, Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x1964, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x1968, Size: 4]
	<enum,int> AvatarRectifyData;//[Offset: 0x196c, Size: 60]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x19a8, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x19b0, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x19bc, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x19c8, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x19d4, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x19ec, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x19fc, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x1a08, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1adc, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae0, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1ae4, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x1ae8, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x1af0, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1b2c, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x1b44, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1b48, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b68, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x1b6c, Size: 4]
	float MoveRightInputValue;//[Offset: 0x1b70, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b74, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1b78, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7c, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7d, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1b80, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1b84, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x1b8c, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x1b90, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x1b9c, Size: 4]
	enum FollowState;//[Offset: 0x1ba0, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x1ba4, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x1bb0, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x1bbc, Size: 12]
	FString LatestInviter;//[Offset: 0x1bc8, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd4, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x1bdc, Size: 4]
	float maxShowAlpha;//[Offset: 0x1be4, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x1be8, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x1bec, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x1bf0, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1c1c, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1c20, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x1c24, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x1c7c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x1c8c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x1d08, Size: 4]
	Vector EmoteColBox;//[Offset: 0x1d48, Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x1d5c, Size: 4]
	float CompVisionOpDis;//[Offset: 0x1d60, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x1d64, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d68, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x1d78, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db4, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x1dbc, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x1dc0, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x1dc4, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x1dc8, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x1dcc, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x1dd0, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x1dd4, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x1dd8, Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ddc, Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x1de8, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x1dec, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1df0, Size: 1]
	float EquipingScopeDelay;//[Offset: 0x1df4, Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1df9, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x1dfc, Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x1e0c, Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x1e24, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1e34, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e60, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e61, Size: 1]
	int AloneDistance;//[Offset: 0x1e64, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x1e68, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x1e70, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x1e98, Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x1e9c, Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x1ea0, Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x1eac, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x1eb0, Size: 12]
	Vector ChangeWearingColBox;//[Offset: 0x1efc, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x1f08, Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x1f0c, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f10, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f11, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x1f14, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1f18, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1f1c, Size: 4]
	Actor* DecalActor;//[Offset: 0x1f20, Size: 4]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x1f24, Size: 4]
	Actor* PuzzleTraceLineActor;//[Offset: 0x1f28, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 1]
	float OutBattleStateTime;//[Offset: 0x1f30, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x1f38, Size: 12]
	BonfireActor* CurBonfire;//[Offset: 0x1f44, Size: 4]
	BonfireActor* BuiltBonfire;//[Offset: 0x1f48, Size: 4]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x1f50, Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x1f78, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x1f84, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x1f90, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x1f9c, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x1fa8, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x1fa9, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1faa, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x1fac, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x1fb8, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x1fbc, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1ff8, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200a, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x200c, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x2018, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x201c, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x2028, Size: 152]
	byte MeleeAutoAimType;//[Offset: 0x20c0, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20cc, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x20d0, Size: 28]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ec, Size: 1]
	TimerHandle CharacterShowWeaponTimerHandle;//[Offset: 0x20f0, Size: 8]
	float CharacterShowWeaponTime;//[Offset: 0x20f8, Size: 4]
	enum CharacterMainType;//[Offset: 0x20fc, Size: 1]
	enum CharacterSubType;//[Offset: 0x20fd, Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x2100, Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x210c, Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x2110, Size: 4]
	delegate BulletTrackShowDelegate;//[Offset: 0x2114, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x2120, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x212c, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x2138, Size: 4]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x213c, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2140, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2141, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2142, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x2144, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x2150, Size: 4]
	float FallingTime;//[Offset: 0x2158, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215c, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215d, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x2160, Size: 4]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2164, Size: 1]
	Actor* MyConstActor;//[Offset: 0x2168, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x216c, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x2170, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x217c, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x2184, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x2190, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x2194, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x2198, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x21ac, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b0, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b1, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b2, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x21b4, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x21bc, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x21d0, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x2200, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2204, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x2210, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2218, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2219, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2220, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x2248, Size: 12]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2254, Size: 4]
	float RTNoDamageTime;//[Offset: 0x2258, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225c, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2264, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2270, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2274, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x2278, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2284, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x2290, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x229c, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a4, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a5, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x22a8, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x22ac, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x22b0, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x22bc, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x22c8, Size: 4]
	int PrepareEmoteId;//[Offset: 0x22d0, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x22d4, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x22e0, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e4, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e5, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e6, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x22e8, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ed, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ee, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ef, Size: 1]
	bool bRepShoulderState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f0, Size: 1]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f1, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x22f4, Size: 12]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x2300, Size: 4]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x21ab2e8
	void VaultFailPawnCPP(const FString Content);// 0x21ab224
	void VaultFailPawnBluePrint(out const FString Content);// 0x21ab150
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x21ab094
	void UseSpringJump(int SpringID);// 0x21ab01c
	void UserCancelRescue();// 0x21ab008
	void UpdateUnderGroundArea(bool bEnterUnderGroundArea);// 0x21aaf88
	bool UpdateShovelingState();// 0x21aaf60
	void UpdateShovelingHoldStateRelease();// 0x21aaf4c
	void UpdateShovelingHoldStatePressed();// 0x21aaf38
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x21aae7c
	void UpdateFallingTime(float Delta);// 0x21aae04
	void UpdateDynamicHoldGunOption();// 0x21aadf0
	void UpdateCurrentShootWeaponTick();// 0x21aaddc
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x21aac48
	void UpdateAllInstanceBodyTransform(int Type);// 0x21aabd0
	void UnequipWeaponFinish();// 0x1f4cfe0
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x21aab0c
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x21aa944
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x21aa874
	void TryFollowInitialParachuteLeader(FString Name);// 0x21aa71c
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x21aa648
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x21aa5c0
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x2bbd2f4
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x2bbd2f4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x21aa45c
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x21aa3dc
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x21aa308
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x21aa1a0
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x21aa0d0
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x21aa000
	void SwitchShoulderStateServer(bool bShoulder);// 0x21a9f38
	void SwitchShoulderStateLocal(bool bShoulder);// 0x21a9eb0
	void SwitchShoulderState(bool bShoulder);// 0x21a9e30
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x21a9c70
	void SwapMainWeapon();// 0x21a9c5c
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x21a9ad4
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x21a99c4
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x21a9944
	void StopMove();// 0x21a9930
	bool StopFireFilter();// 0x21a9900
	void StopFire();// 0x21a98ec
	void StopFillGas();// 0x21a98d8
	bool StopChangeWearingAnim();// 0x21a98b0
	void StopCarryBack();// 0x21a989c
	void StartWaitRefreshShootDetailInfo();// 0x21a9888
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x21a9808
	void StartFireSimple(byte ShootMode);// 0x21a9788
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x21a9700
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x21a9514
	void StartFillGas();// 0x21a9500
	bool StartChangeWearingAnim();// 0x21a94d8
	void SpawnFootprint(enum FootprintType);// 0x21a9460
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x21a93ac
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x21a932c
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x21a92ac
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x21a90f0
	void ShowPlayerDebugInfo(bool bShow);// 0x1fd3400
	void ShowNightVisionFrame();// 0x21a90d4
	void ShowInjuryScreenEffect();// 0x21a90c0
	void ShowDebugRole();// 0x21a90ac
	void ShowDebugRecordData();// 0x21a9098
	void ShowDebugPickUpFlow();// 0x21a9084
	void ShowDebugEquipOrUnequipFlow();// 0x21a9070
	void ShowDebugBornLandFlow();// 0x21a905c
	void ShowConfirmDialogOfMisKill();// 0x21a9040
	bool ShouldUpdateHPOnUI();// 0x21a9010
	bool ShouldShowCorp();// 0x21a8fe8
	bool ShouldShowAnchor();// 0x21a8fc0
	bool ShouldAutoScopeWhenPeek();// 0x21a8f90
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x21a8da4
	void SetWeaponShootType(byte shootType);// 0x21a8d2c
	void SetViewTargetAgainForOB();// 0x21a8d18
	void SetThrowGrenadeMode(byte ThrowMode);// 0x21a8ca0
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x21a8c28
	void SetSightVision(bool Enable, enum Flag);// 0x21a8b60
	void SetSightCondition(bool Enable, enum Flag);// 0x21a8b60
	void SetRTNoDamageTimer(float Timer);// 0x21a8ae8
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x21a8a24
	void SetPrepareEmoteId(int InEmoteID);// 0x21a89ac
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x21a88e8
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x21a8860
	void SetIsDuringTransferLeader(bool isTransfer);// 0x21a87e0
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x21a8718
	void SetInsectCameraEnable(bool bEnable);// 0x21a8698
	void SetHighWalkSpeed(float WalkSpeed);// 0x21a8620
	void SetHealthSafety(float NewHealth, byte Reason);// 0x21a8564
	void SetHandFoldRatio(int Ratio);// 0x21a84ec
	void SetExitingParachute(bool ExitParachute);// 0x21a846c
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x21a83ec
	void SetEmoteSouceEventName(FString EventName);// 0x21a8294
	void SetDelayStateSwitchTime(float DelayTime);// 0x21a821c
	void SetCurScopeFov(float InFov);// 0x21a81a4
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x21a80cc
	void SetCurrentFloor(Actor* floor);// 0x21a8054
	void SetCurBonfire(BonfireActor* newBonfire);// 0x21a7fdc
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x21a7f10
	void SetCheatSpeedModifier(float NewModifier);// 0x21a7e90
	void SetCharacterHideInGame(bool bHide);// 0x21a7e10
	void SetChangeWearingPromptEnable(bool bShow);// 0x21a7d90
	void SetAntidoteMaxTime(float MaxTime);// 0x21a7d18
	void SetAntidoteExeTime(float ExeTime);// 0x21a7ca0
	void SetAnimParamIsRescueing(bool Val);// 0x21a7c20
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x21a7ba0
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x21a7b20
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x21a7a64
	void SetAmbientRTPC(FString RTPC, float Value);// 0x21a78c8
	void SetAIActive(bool bActive);// 0x21a7848
	void SetActorLocationServerAndClient(Vector Location);// 0x21a77d8
	void ServerUpdateShovelingHoldState(bool ishold);// 0x21a7710
	void ServerTriggerJump();// 0x21a76b4
	void ServerSetPoisonSmogStage(int SmogStage);// 0x21a763c
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x21a7518
	void ServerSetPeekCollision(bool HasCollision);// 0x21a7450
	void ServerSetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x21a7340
	void ServerSetMovementState(Vector Input);// 0x21a7294
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x21a71d8
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x21a6ff4
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x21a6e40
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x21a6d04
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x21a6bf0
	void ServerFollowTeammate(FString Name);// 0x21a6afc
	void ServerEndZombieModePropSkill();// 0x1f4cfe0
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x21a6a48
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x21a6994
	void ServerCancelFollow();// 0x21a6938
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x21a6800
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x21a6688
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x21a6510
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x21a63ec
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x21a62e8
	void Scoping(byte NewType);// 0x21a6270
	void ScopeOut(byte NewType);// 0x21a61f8
	void ScopeInterrupt(byte NewType);// 0x21a6180
	void ScopeIn(byte NewType);// 0x21a6108
	void SaveMeshUpdateFlag();// 0x21a60e8
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x21a6034
	void RspPlayInteractionEmote(int EmoteId);// 0x21a5f80
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x21a5ef8
	void RPC_Server_UseZombieModeSkill();// 0x21a5e9c
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x21a5d8c
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x21a5cd8
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x21a5bdc
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x21a5a10
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x21a595c
	void RPC_Server_SwapMainWeapon();// 0x21a5900
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x21a584c
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x21a5798
	void RPC_Server_SetCurScopeFov(float InFov);// 0x21a56e4
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x21a5688
	void RPC_Server_ChangeToShootGrenade();// 0x21a562c
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x21a5578
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x21a54c4
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x21a5344
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x21a5178
	void RPC_Client_SwapMainWeapon();// 0x21a511c
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x21a5068
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x21a4f24
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x21a4d30
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x21a4c7c
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x21a4bc8
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x21a4b14
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x21a49d8
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x21a4888
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x21a474c
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x21a45a0
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x21a42f8
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x21a4204
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x21a3f90
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x21a3d60
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x21a3d04
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x21a3bac
	void RestoreMeshUpdateFlag();// 0x21a3b8c
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x21a39f8
	void ResetValueLimitForHealthPredict();// 0x21a39e4
	void ResetSignalOnServer(bool bRescued);// 0x21a3964
	void ResetCharacterEnergy();// 0x21a3950
	void ResetCharacter();// 0x21a3934
	void ResetCamera();// 0x21a3920
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x21a38a8
	void RequestUserCancleRescue();// 0x21a384c
	void RequestServerSureLeaveVehicle();// 0x21a37f0
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x21a3728
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x21a3618
	bool RequestPaintDecal(int DecalId);// 0x21a3598
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x21a349c
	void ReqStartPlayEmote(int EmoteIndex);// 0x21a33e8
	void ReqStartChangeWearing();// 0x21a338c
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x21a32c4
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x21a3210
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x21a30cc
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x21a3018
	void ReqInteruptChangeWearing();// 0x21a2fbc
	void ReqEmotePlayFinished(int EmoteIndex);// 0x21a2f08
	void ReqChangeWearingFinished(int Index);// 0x21a2e54
	void ReqAcceptInteractionEmote();// 0x21a2df8
	void ReportAntiCheatInfo();// 0x1f4cfe0
	void RemoveClientLeaveStateCheck(enum State);// 0x21a2d80
	void RemoveBuffWhenGotoPlane();// 0x21a2d6c
	bool ReloadWeaponFilter();// 0x21a2d3c
	bool ReloadCurrentWeapon();// 0x21a2d14
	void RegisterPlayerPickUpList();// 0x21a2d00
	void RefreshPersonPerspective();// 0x21a2cec
	void RefreshPawnVaultTypeServer();// 0x21a2c90
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x21a2c08
	void RefreshMoveAttrModifier();// 0x21a2bf4
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x21a2ae8
	void RecordFinalParachuteLeader();// 0x21a2ad4
	void PrintAIPolicyDecisionData();// 0x21a2ac0
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x21a2a48
	void PostGetPlayerAnimation();// 0x2bbd2f4
	void PostCollectDropWrapperList();// 0x2bbd2f4
	void PlaySwitchSightSound();// 0x21a2a34
	void PlaySwitchFireModeSound();// 0x21a2a20
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x21a29a8
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x21a2850
	void PlaySelfThrowAwayWeaponSound();// 0x21a283c
	void PlayPullBoltSound();// 0x21a2828
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x21a25b8
	void PlayMountAccessoriesSound();// 0x21a25a4
	void PlayMagOUTSound();// 0x21a2590
	void PlayMagINSound();// 0x21a257c
	void PlayLocalShellDropFX();// 0x21a2568
	void PlayLoadBulletSound();// 0x21a2554
	void PlayFootstepSound(byte FootStepState);// 0x21a24d4
	bool PlayerConfirmToRescue();// 0x21a24ac
	void PlayChangeMagazineSound();// 0x21a2498
	void PlayAmbientSound();// 0x21a2484
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x21a2250
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x21a202c
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x21a1ee4
	void PawnVaultStopCPP();// 0x21a1ec8
	void PawnVaultStopBluePrint();// 0x21a1eac
	void PawnVaultServerStopCheckCPP();// 0x21a1e50
	void PawnVaultServerStopCheckBluePrint();// 0x21a1e34
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x21a19ac
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x21a15d0
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x21a125c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x21a0ecc
	void PawnLeaveState(enum State);// 0x21a0e4c
	bool PawnHasState(enum PawnState);// 0x21a0dc4
	bool PawnEnterState(enum State);// 0x21a0d3c
	bool PawnAllowState(enum State, bool withLog);// 0x21a0c68
	void OnWeaponEquipmentUpdateHandled();// 0x21a0c4c
	void OnWeaponEquipmentUpdate();// 0x21a0c30
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x21a0bb8
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x21a0b40
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x21a0a7c
	void OnUnEquipWeapon();// 0x2bbd2f4
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x21a097c
	void OnStateLeave(enum EnteredState);// 0x21a08fc
	void OnStateEnter(enum EnteredState);// 0x21a087c
	void OnShowName(bool _IsShow, FString _Name);// 0x2bbd2f4
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x21a07fc
	void OnScopeNotHandFold();// 0x21a07e8
	void OnScopeHandFold();// 0x21a07d4
	void OnRepAttachmentDelegate__DelegateSignature();// 0x2bbd2f4
	void OnRep_ZombieModeSkillPropLevel();// 0x21a07c0
	void OnRep_ZombieModeSkillPropChanged();// 0x21a07ac
	void OnRep_WaterObj();// 0x21a0798
	void OnRep_VehicleSeatIdx();// 0x21a0784
	void OnRep_UnmannedVehicleSyncData();// 0x21a0768
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x21a06f0
	void OnRep_Temperature(float LastValue);// 0x21a0670
	void OnRep_SwitchWeaponSpeedScale();// 0x21a065c
	void OnRep_StatusChanged(byte prevStatus);// 0x21a05dc
	void OnRep_SignalHPRemainingTime();// 0x21a05c8
	void OnRep_SignalHP(float PrevVal);// 0x21a0548
	void OnRep_SightVisionMask();// 0x21a0534
	void OnRep_ShowRevivalPointIcon();// 0x21a0520
	void OnRep_ShoulderStateChanged();// 0x21a0504
	void OnRep_ScopeFov();// 0x21a04f0
	void OnRep_ResetDataOnRespawn();// 0x21a04dc
	void OnRep_ReplicatedParachuteState();// 0x1f4cfe0
	void OnRep_ReplicatedMoveState();// 0x21a04c8
	void OnRep_ReplicatedIsStartParachute();// 0x21a04b4
	void OnRep_RemainUseSupplySpotTimes();// 0x21a04a0
	void OnRep_RemainUseEnhancerSpotTimes();// 0x21a048c
	void OnRep_PoseStateNotify(byte LastState);// 0x21a0414
	void OnRep_PoisonFogStageChange();// 0x21a0400
	void OnRep_PlayerKey();// 0x21a03e4
	void OnRep_PeekHasCollision();// 0x21a03d0
	void OnRep_MoneyNotify();// 0x21a03bc
	void OnRep_IsWingUpControl();// 0x21a03a8
	void OnRep_IsRescueingOtherStatusChange();// 0x21a0394
	void OnRep_IsInvincible();// 0x21a0378
	void OnRep_IsFPPChanged();// 0x21a0364
	void OnRep_IsFakeOnVehicle();// 0x21a0348
	void OnRep_IsBeingRescuedStatusChange();// 0x21a0334
	void OnRep_InAssistantState();// 0x21a0320
	void OnRep_HealthPredict();// 0x21a030c
	void OnRep_Health(float PrevHealth);// 0x1f4a9c8
	void OnRep_HandFolderRatio();// 0x21a02f8
	void OnRep_FollowState();// 0x21a02e4
	void OnRep_EnergyChange();// 0x21a02d0
	void OnRep_DisabledPawnStates();// 0x21a02b4
	void OnRep_DamageMagnifierIdx();// 0x21a02a0
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x21a0228
	void OnRep_CurrentStates(uint64 prevStates);// 0x21a01a4
	void OnRep_CurBonFire();// 0x21a0190
	void OnRep_CharacterHideInGame();// 0x21a017c
	void OnRep_CharacterFallingVelocityZFactor();// 0x21a0168
	void OnRep_ChangeHalloweenVampireCloth();// 0x21a0154
	void OnRep_CarryBackStateChanged();// 0x21a0138
	void OnRep_BreathAmmountChange();// 0x21a0124
	void OnRep_bIsCallingForRevival();// 0x21a0110
	void OnRep_AntidoteMaxTimeSync();// 0x1f4cfe0
	void OnRep_AntidoteExeTimeSync();// 0x1f4cfe0
	void OnRep_AngleSightRotOffsetChanged();// 0x21a00fc
	void OnRep_AnchorPlat();// 0x21a00e8
	void OnRep_AKEventNotify();// 0x21a00d4
	void OnPostFlushHealthChangeHistoryOnServer();// 0x21a00b8
	void OnPoseStateChange(byte LastState, byte CurState);// 0x2bbd2f4
	void OnPlayEmoteStop(int EmoteIndex);// 0x21a0040
	void OnPlayEmoteEnd(int EmoteIndex);// 0x219ffc8
	bool OnPlayEmote(int EmoteId);// 0x219ff48
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x219fe80
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x219fdbc
	void OnNotifyHurt();// 0x2bbd2f4
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex);// 0x219fd00
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x219fb44
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x219facc
	void OnInterruptCurrentEmote();// 0x219fab8
	void OnInterruptChangeWearing();// 0x219faa4
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x219f9e8
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x2bbd2f4
	void OnFollowStateChange();// 0x219f9d4
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x219f900
	void OnEquipWeapon(byte Slot);// 0x2bbd2f4
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x219f888
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x219f7cc
	void OnEndChangeWearing(int StopReason);// 0x219f754
	void OnDetectPaintDecalTarget(bool bStart);// 0x2bbd2f4
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x219f698
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x219f598
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x219f498
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x219f420
	bool OnChangeWearing(int Index);// 0x219f3a0
	void OnBPMoneyChange();// 0x2bbd2f4
	void OnBPIsInvincibleChange();// 0x2bbd2f4
	void OnBPHealthChange();// 0x2bbd2f4
	void OnBeforeGetUp();// 0x2bbd2f4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex);// 0x219f198
	void OnAsyncLoadChangeWearingAnim();// 0x219f184
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x219f01c
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x219ef44
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x219ee48
	void MulticastStartPlayEmote(int EmoteIndex);// 0x219ed94
	void MulticastStartChangeWearing();// 0x219ed38
	void MulticastPlayerSoundByID(int SoundID);// 0x219ec84
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x219ebd0
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x219eb1c
	void MulticastInteruptChangeWearingOnServer();// 0x219eac0
	void MulticastInteruptChangeWearing();// 0x219ea64
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x219e9e4
	void MeleeServer();// 0x219e988
	void MeleeReleased();// 0x219e974
	void MeleeLocal();// 0x2bbd2f4
	void MeleeBroadcastOtherClients();// 0x219e918
	void Melee(bool IsForCE);// 0x219e898
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x219e884
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x219e80c
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x219e6e4
	bool LocalStartPlayEmote(int EmoteIndex);// 0x219e664
	bool LocalStartChangeWearing();// 0x219e63c
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x219e5bc
	bool LocalInteruptChangeWearing();// 0x219e594
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x219e4d8
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x219e458
	void LeaveState(enum State);// 0x219e3d8
	void LeaveServerState(enum State);// 0x219e324
	void LeaveBattleState();// 0x219e310
	bool IsWeaponOwnerLocallyControlled();// 0x219e2e0
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x219e198
	bool IsValidPaintDecalTarget_Simple();// 0x219e178
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x219e040
	bool IsUsingGrenade();// 0x219e018
	bool IsThermalImagingValid();// 0x219dff0
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x219df70
	bool IsSameTeamWithLocal();// 0x219df48
	bool IsSameTeam(Pawn* Other);// 0x219dec0
	bool IsReplayViewTarget();// 0x219de98
	bool IsProneMove();// 0x219de70
	bool IsOnVehicleNotUAV();// 0x219de30
	bool IsOnVehicle();// 0x219de0c
	bool IsOnFireBalloon();// 0x219dde4
	bool IsNowUpWater();// 0x219ddbc
	bool IsNightVisionValid();// 0x219dd94
	bool IsNearDeath();// 0x219dd6c
	bool IsLocalViewed();// 0x219dd3c
	bool IsLocalControlorView();// 0x219dd14
	bool IsInFlyingTeam();// 0x219dcec
	bool IsInExtreme();// 0x219dcc4
	bool IsInEditor();// 0x2049ba0
	bool IsInCarryBackState();// 0x219dc9c
	bool IsInBeCarriedBackState();// 0x219dc74
	bool IsHealthyAlive();// 0x219dc4c
	bool IsHandleInFold();// 0x219dc24
	bool IsGunADS();// 0x219dbf4
	bool IsFirstPerson();// 0x219dbcc
	bool IsExitingParachute();// 0x219dba4
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x219db24
	bool IsEnableBulletFlySound();// 0x219daf4
	bool IsDetectingPaintDecalTarget();// 0x219dad4
	bool IsDefaultCharType();// 0x219daa4
	bool IsClientCarryBackViewTarget();// 0x219da7c
	bool IsClient_WeaponOwner();// 0x219da4c
	bool IsCharacterSprinting();// 0x219da24
	bool IsChangeWearingState();// 0x219d9fc
	bool IsCarryBackEnable();// 0x219d9d4
	bool IsCanDriveSnowBoard();// 0x219d9ac
	bool IsBattleState();// 0x219d984
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x219d8fc
	bool IsAngledSight();// 0x219d8d4
	bool IsAllowScopeIn();// 0x219d8ac
	bool IsAlive();// 0x219d87c
	void InviteTeammate(FString Name, enum InvitationType);// 0x219d77c
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x219d6c0
	void InitCharacterSkillList();// 0x219d6ac
	bool InDarkArea();// 0x219d684
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x219d5c8
	void HidePlayerMagOnGunReload();// 0x219d5b4
	void HideNightVisionFrame();// 0x219d598
	bool HaveAngledSight();// 0x219d570
	bool HasState(enum State);// 0x219d4e8
	bool HasSightCondition(enum Flags);// 0x219d468
	bool HasCarryBackState(enum InState);// 0x219d3e8
	bool HasAnySightVision(enum Flags);// 0x219d368
	void HandleWeaponShootLost();// 0x219d34c
	void HandleWeaponOnShoot();// 0x219d338
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x219d238
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x219d1b8
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x219d138
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x219d0b8
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x219cffc
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x219cf7c
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x219cec0
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x219ce04
	void HandleOpenPickUpBoxAction();// 0x219cdf0
	void HandleOnCharAnimLoadingFinished();// 0x219cdd4
	void HandleMoveAntiShootVerifyMiss();// 0x219cdb8
	void HandleConsumeItemSkillBreak();// 0x219cda4
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x219cd00
	void HandleAutoSwitchWeaponDelay();// 0x219ccec
	void GrenadeBackToWeaponServerCall();// 0x219cc90
	void GMTestZengzuo();// 0x219cc7c
	void GMShowName();// 0x1f4cfe0
	Actor* GetWeaponUserConst();// 0x219cc4c
	float GetWeaponOwnerPawnHealth();// 0x219cc1c
	WeaponManagerComponent* GetWeaponManager();// 0x219cbec
	Rotator GetViewRotation();// 0x219cb9c
	PlayerVaultComponent* GetVaultComponent();// 0x219cb74
	float GetValueLimitForHealthPredict();// 0x219cb4c
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x219cb24
	Vector GetUIHelmetPosition();// 0x219cad4
	enum GetUAVState();// 0x219cab8
	byte GetThrowGrenadeMode();// 0x219ca98
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x219ca18
	STExtraBaseCharacter* GetTargetPlayer();// 0x219c9f8
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x219c9c8
	AkComponent* GetSoundComponent();// 0x219c9a0
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x219c7c0
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x2bbd2f4
	SecuryInfoComponent* GetSecuryComponent();// 0x219c798
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x219c778
	int GetRedClothIDByEmote(int EmoteIndex);// 0x219c6f0
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x219c660
	BoxComponent* GetProneShapeComponent();// 0x219c640
	byte GetPlayerWeaponFireMode();// 0x20e32cc
	byte GetPlayerWeaponEquipSlot();// 0x219c618
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x219c554
	PlayerVehAnimList GetPlayerVehAnimation();// 0x219c520
	int GetPlayerTeamIndex();// 0x219c4f8
	STExtraPlayerState* GetPlayerStateSafety();// 0x219c4d0
	STExtraPlayerState* GetPlayerState();// 0x219c4a0
	FString GetPlayerNameSafety();// 0x219c3d8
	Vector GetPlayerMovementDir();// 0x219c388
	FString GetPlayerDetailInfo();// 0x219c2c8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x219c298
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x219c270
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x219c120
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x219c098
	PlayerAnimList GetPlayerAnimation();// 0x219bfd0
	Vector GetOwnerShootStartLocation();// 0x219bf80
	int GetNearTeamPlayerNum();// 0x219bf58
	Vector GetMoveInputLocalDir();// 0x219bf10
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x219bee0
	FString GetLatestInviter();// 0x219be20
	STExtraPlayerState* GetLastInviterPlayerState();// 0x219bdf8
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x219bdc8
	float GetKdValue();// 0x219bda0
	bool GetIsPlayingEmote();// 0x219bd80
	bool GetIsFPP();// 0x219bd50
	bool GetIsChangeWearing();// 0x219bd30
	float GetInjuryFreeRate(int BodyPart);// 0x219bca8
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x219bb34
	Vector GetHeadLocation(bool bUseHeadBone);// 0x219ba9c
	int GetHandFolderRatio();// 0x219ba6c
	Vector GetGunOwnerHeadLocation();// 0x219ba1c
	GroupPhysicsComponent* GetGroupPhysicsComponent();// 0x219ba00
	FString GetGrenadeNameByGrenadeID(int InGrenadeID);// 0x2bbd2f4
	enum GetGender();// 0x219b9e4
	BaseFPPComponent* GetFPPComp();// 0x219b9bc
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x219b92c
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x219b89c
	float GetExtraDamageBySignalHP(float InDamge);// 0x219b81c
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x2bbd2f4
	FString GetEmote(int ItemDefineID);// 0x2bbd2f4
	STExtraWeapon* GetCurrentWeapon();// 0x219b7f4
	int GetCurrentVehicleAnimVehicleType();// 0x219b7cc
	STExtraVehicleBase* GetCurrentVehicle();// 0x219b79c
	uint64 GetCurrentStatesInterface();// 0x219b76c
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x219b744
	STExtraWeapon* GetCurrentShieldWeapon();// 0x219b71c
	int GetCurrentFloorType();// 0x219b6f4
	FString GetCorpName();// 0x219b634
	Controller* GetControllerSafety();// 0x219b604
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x219b5dc
	float GetCharacterXYPlaneVelocity();// 0x219b5b4
	enum GetCharacterSubType();// 0x219b58c
	enum GetCharacterMainType();// 0x219b564
	CharacterEnergyData GetCharacterEnergy();// 0x219b378
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x219b348
	STCharacterCarryBackComp* GetCarryBackComp();// 0x219b320
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x219b2f8
	CapsuleComponent* GetCapsuleComponentInterface();// 0x219b2c8
	Rotator GetCachedControlRotation();// 0x219b280
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x219b258
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x219b230
	CharacterAvatarComponent2* getAvatarComponent2();// 0x219b208
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x219b188
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x219b0c4
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x219b010
	SpringArmComponent* GetActiveSpringArm();// 0x219afe0
	void GeneratePlayerBackpackWrappersToGround();// 0x219afc4
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x219acf8
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x219aab4
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x219aa34
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x219a968
	void ForcePlayerUpdateAnimation();// 0x219a954
	void ForceDestroyWeaponInventoryAndClearData();// 0x219a940
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x219a850
	void FollowTeammate(FString Name);// 0x219a6f8
	enum FindBuffRelatedPawnState(FName _buffName);// 0x219a678
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x219a4e0
	bool FillGasWeaponFilter();// 0x219a4b8
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x219a3f4
	void ExecFollowTeammate(FString Name);// 0x219a29c
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x219a1e0
	void EquipWeaponFinish();// 0x1f4cfe0
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x219a11c
	bool EnterState(enum State);// 0x219a094
	void EnterServerState(enum State);// 0x2199fe0
	void EnterFire();// 0x2199fc4
	void EnterBattleState();// 0x2199fb0
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x2199f30
	void EnableStanbyAnim(bool bIsEnable);// 0x2199eb0
	bool EmoteAnimFinishedSuccessfully();// 0x2199e88
	void DoPuzzleActorTickable(bool bStart);// 0x2199e08
	void DoDetectPaintDecalTarget(bool bStart);// 0x2199d88
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x2199d10
	void DisappearOnDeath();// 0x2199cfc
	void DettachWeapon();// 0x1f4cfe0
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x2199c30
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x2199b5c
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x2199b48
	void DelayResetStandState();// 0x2199b34
	void DelayMoveEnd();// 0x2199b20
	void DelayMove(float Time);// 0x2199aa8
	void DelayHidden();// 0x2199a8c
	void DelayCustomDepth(float Time);// 0x2199a14
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x21998c4
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x219983c
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x21997bc
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x219973c
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x21996bc
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x21995b0
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x2199434
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x21992e8
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x21991e0
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString param1, FString param2);// 0x2199054
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x2198f40
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x2198ec8
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x2198e04
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x2198d38
	void ClientResponseFeedback(enum res);// 0x2198cb8
	void ClientPlayVehicleOverlapCameraShake();// 0x2198c5c
	void ClientPlayInteractEmote(int EmoteId);// 0x2198bdc
	void ClientOnPossessBy(Controller* NewController);// 0x2198b28
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x2198958
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x2198774
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShot);// 0x21985a4
	void ClientChangeCharacterMesh(int MeshID);// 0x2198524
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x21983c0
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x21982fc
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x2198240
	void ClearHPUI();// 0x2198224
	void ClearClientJump();// 0x2198210
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x2198188
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x21980f0
	bool CheckPickWeaponCanAutoUse();// 0x21980c0
	bool CheckOnMoveablePlatform();// 0x2197cac
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x2197ffc
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x2197f28
	bool CheckIsWearingThisCloth(int InClothID);// 0x2197ea8
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x2197e20
	void CheckCharacterDelayHide();// 0x2197e0c
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x2197d84
	bool CheckBuffTarget(STBuff* Buff);// 0x2197cfc
	bool CheckBaseIsMoving();// 0x2197cd4
	bool CheckBaseIsMoveable();// 0x2197cac
	void CharacterStateReset();// 0x2197c98
	void CharacterShowWeaponDelay();// 0x2197c84
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x2197c0c
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x2197b00
	bool ChangeWearingAnimFinishedSuccessfully();// 0x2197ad8
	void ChangeVehWeaponCameraData(bool Enable);// 0x2197a58
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x2197950
	bool CanRegisterToPickUpList(Actor* Actor);// 0x21978c8
	bool CanPaintDecal(int DecalId);// 0x2197848
	bool CanHearWeaponLockSound();// 0x2197818
	bool CanEnterWaterArea(enum[] disallowedState);// 0x21976b8
	bool CanEnterState(enum NewState);// 0x2197638
	bool CanChangeThrowMode();// 0x2197610
	void CancelFollow();// 0x21975fc
	void CalculateUseBuffFlow(int InBuffID);// 0x2197584
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x21974c8
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2197354
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x2197170
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x2196fdc
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x2196f20
	void CalculateBornLandThrowGrenade(int ID);// 0x2196ea8
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x2196de4
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x2196d28
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x2196c50
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x2196b04
	void BulletChange();// 0x2196aa8
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x2196844
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x2196590
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x21963cc
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2196100
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2195e84
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2195a90
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2195758
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2195470
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x21951a4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2194f28
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2194c5c
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x21949e0
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2194700
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2194470
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x21941a4
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2193f28
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2193c5c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x21939e0
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2193710
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2193490
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x21931b8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2192f30
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2192bf8
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2192910
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2192794
	void BPResetCharacter();// 0x2bbd2f4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x2bbd2f4
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2bbd2f4
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bbd2f4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bbd2f4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bbd2f4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bbd2f4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2192620
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x2bbd2f4
	void BP_ResetDataOnRespawn();// 0x2192604
	int BP_GetWeaponSyncTicket();// 0x21925d4
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x219254c
	void AutoScopeWhenPeek();// 0x2192538
	void AttachWeapon();// 0x1f4cfe0
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x21924c0
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x2192368
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x21922f8
	bool AllowState(enum State, bool withLog);// 0x2192224
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x21920d0
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x2191f10
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x2191e10
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x2191c5c
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x2191ba0
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x2191b28

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x838, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x844, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x878, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x884, Size: 12]
	uint64 CurrentStates;//[Offset: 0x920, Size: 8]
	float Health;//[Offset: 0x928, Size: 4]
	float HealthMax;//[Offset: 0x92c, Size: 4]
	float SignalHP;//[Offset: 0x930, Size: 4]
	float PreSignalHP;//[Offset: 0x934, Size: 4]
	float PreviousSignalHP;//[Offset: 0x938, Size: 4]
	float SignalHPMax;//[Offset: 0x93c, Size: 4]
	FString EnergyBuffListName;//[Offset: 0x940, Size: 12]
	float ResetSignalHP_FatalDamage;//[Offset: 0x94c, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x950, Size: 4]
	int[] TypeIds;//[Offset: 0x954, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x960, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x964, Size: 1]
	float threatenValue;//[Offset: 0x968, Size: 4]
	float HurtParticleOffset;//[Offset: 0x96c, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0x978, Size: 12]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x984, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x990, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x994, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x99c, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x9a4, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x9a8, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	FString CharacterStateType;//[Offset: 0x9b4, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 1]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xa0c, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xa18, Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xa3c, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xa40, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xa44, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xa48, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xa4c, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xa50, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xa5c, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xa7c, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xa88, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xa94, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa99, Size: 1]
	byte TeamNum;//[Offset: 0xaa8, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xaac, Size: 4]
	float SpeedScale;//[Offset: 0xab8, Size: 4]
	float SpeedValue;//[Offset: 0xabc, Size: 4]
	float Temperature;//[Offset: 0xac0, Size: 4]
	float TemperatureMax;//[Offset: 0xac4, Size: 4]
	float TemperatureMin;//[Offset: 0xac8, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xae0, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xae4, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xae8, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xaec, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xb28, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x21d1e70
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x21d1da4
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x21aa648
	bool TriggerEntryEventWithID_Implementation(int SkillID, byte SkillEventType);// 0x21d1cd8
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x21aa5c0
	void TriggerCustomEvent_Implementation(byte EventType);// 0x21d1c58
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x21d1b84
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x21d1ac0
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x21d19fc
	void ResetPawnStateDisabled(enum State);// 0x21d1984
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x21d1874
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x21d171c
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x21d15f8
	void RemoveBaseBuffSystemComponent();// 0x21d15e4
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x21d1484
	void OnRep_UnmannedVehicleSyncData();// 0x21a0768
	void OnRep_Temperature(float LastValue);// 0x21a0670
	void OnRep_SignalHP(float PrevVal);// 0x21a0548
	void OnRep_HealthMax();// 0x21d1468
	void OnRep_Health(float PrevHealth);// 0x1f4a9c8
	void OnRep_DisabledPawnStates();// 0x21a02b4
	void OnRep_CurrentStates(uint64 prevStates);// 0x21a01a4
	void OnRep_ActivitySyncData();// 0x21d1454
	void OnLeaveStateForBp(enum State);// 0x2bbd2f4
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x2bbd2f4
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x2bbd2f4
	void OnEnterStateForBp(enum State);// 0x2bbd2f4
	void LeaveState(enum State);// 0x219e3d8
	bool IsPawnStateDisabledByWeapon(enum State);// 0x21d13cc
	bool IsPawnStateDisabled(enum State);// 0x21d134c
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x21d12a8
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x21d1204
	bool IsAlive();// 0x219d87c
	bool HasState(enum State);// 0x219d4e8
	bool HasBuffID(int BuffID);// 0x21d117c
	bool HasBuff(FName BuffName);// 0x21d10f4
	STExtraVehicleBase* GetUnmannedVehicle();// 0x21d10d8
	UTSkillManagerComponent* GetSkillManager();// 0x21d10a8
	float GetScaledSpeed();// 0x21d1078
	FString GetPlayerNameSafety();// 0x219c3d8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x219c298
	enum GetObserverType();// 0x21d1048
	enum[] GetDamageableGameObjectType();// 0x21d0f80
	UTSkill* GetCurSkill();// 0x21d0f50
	STExtraVehicleBase* GetCurrentVehicle();// 0x219b79c
	float GetBuffExpiry(FName BuffName);// 0x21d0ec8
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x21d0dfc
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x21d0d7c
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x21d0bf4
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x21d0ab4
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x21d09c8
	bool EnterState(enum State);// 0x219a094
	void DelayHidden();// 0x2199a8c
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x21d07f4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x21d06a8
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x21d055c
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x21d0378
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x21d014c
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x21cffa8
	void ClearBuff();// 0x21cff8c
	void CheckSignalHP();// 0x21cff78
	bool CanBeAttackedByWeapon(int WeaponId);// 0x21cfef0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bbd2f4
	bool AllowState(enum State, bool withLog);// 0x2192224
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x21cfde0
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x21cfc88
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x21cfae4

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x638, Size: 4]
	FName PlayerType;//[Offset: 0x640, Size: 8]
	FString PlayerName;//[Offset: 0x648, Size: 12]
	FString Nation;//[Offset: 0x654, Size: 12]
	uint32 PlayerKey;//[Offset: 0x660, Size: 4]
	FString PlayerUID;//[Offset: 0x664, Size: 12]
	int TeamID;//[Offset: 0x670, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	int CampID;//[Offset: 0x678, Size: 4]
	int resID;//[Offset: 0x67c, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x680, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x684, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x690, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x6bc, Size: 24]
	int planeAvatarId;//[Offset: 0x6d4, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6d8, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x6dc, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	FString LuaFilePath;//[Offset: 0x710, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x71c, Size: 60]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27b759c
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27b7460
	void OnRep_UseWholeModel();// 0x27b744c
	void OnRep_TeamID();// 0x27b7438
	void OnRep_PlayerUID();// 0x27b7424
	void OnRep_PlayerKey();// 0x21a03e4
	void OnRep_CampID();// 0x27b7410
	bool IsDefaultCharType();// 0x219daa4
	int GetTeamId();// 0x1ff1920
	FString GetPlayerKey();// 0x27b7350
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x27b7288
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x27b71c0
	ActorComponent*[] GetNonSimulatedComponents();// 0x27b70f8
	ActorComponent*[] GetNonDedicatedComponents();// 0x27b7030
	int GetCampId();// 0x27b7008
	void ClientAcknowledgeReconnection(uint32 Token);// 0x1f4339c

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x414, Size: 4]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	enum VehicleType;//[Offset: 0x41a, Size: 1]
	enum VehicleShapeType;//[Offset: 0x41b, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x420, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x438, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x450, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x458, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x480, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x484, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x4c0, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x4fc, Size: 4]
	byte CameraDataType;//[Offset: 0x500, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x504, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x508, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x510, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x518, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x520, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x528, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	int MainMaterialIndex;//[Offset: 0x530, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x534, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x544, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x550, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x558, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	float BackpackCapacity;//[Offset: 0x564, Size: 4]
	FName BackpackName;//[Offset: 0x568, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x570, Size: 12]
	int[] marr_MidIndexes;//[Offset: 0x57c, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x588, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x58c, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x590, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x598, Size: 4]
	float voiceCheckCD;//[Offset: 0x59c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x5a0, Size: 4]
	float VoiceCheckDis;//[Offset: 0x5a4, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x5a8, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x5ac, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	Vector[] RouteList;//[Offset: 0x5d0, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x5dc, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x5e8, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x5ec, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x5f8, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x604, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x610, Size: 12]
	delegate OnSeatChange;//[Offset: 0x61c, Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	FString LuaFilePath;//[Offset: 0x62c, Size: 12]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x63c, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x642, Size: 1]
	ParticleSystem* ParticleExplosion;//[Offset: 0x67c, Size: 4]
	enum VehicleHealthState;//[Offset: 0x680, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x683, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x688, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x694, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x698, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x69c, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x6a0, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x6a4, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x6a8, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x6ac, Size: 4]
	VehicleComponent*[] TickedComponents;//[Offset: 0x6b0, Size: 12]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x6bc, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x6d0, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x6ec, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x6f0, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x700, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x704, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x710, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71e, Size: 1]
	bool bServerResolvePeneIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71f, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x728, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x734, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x740, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x750, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x754, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x758, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x768, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x76c, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x778, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x77c, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x780, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x78c, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x798, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x79c, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x7a8, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x7ac, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x7b0, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x7e8, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x7ec, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x7f0, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x7f4, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x7f8, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x7fc, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x800, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x804, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x808, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x80c, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x810, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x814, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x818, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x81c, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x820, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x824, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x828, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x82c, Size: 4]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x830, Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x83c, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x844, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x8a0, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x8fc, Size: 92]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0x958, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0x9b4, Size: 4]
	float RPMSfxScale;//[Offset: 0x9ec, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x9f0, Size: 4]
	float PlayMusicChance;//[Offset: 0x9fc, Size: 4]
	int CurMusicIndex;//[Offset: 0xa00, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xa11, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa14, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xa28, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xa2c, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xa30, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xa70, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xa80, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xa94, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xa98, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 1]
	float StuckMinImpulse;//[Offset: 0xac0, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xac4, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xac8, Size: 4]
	float StuckResovingTime;//[Offset: 0xacc, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xad4, Size: 4]
	float StuckResovingTimer;//[Offset: 0xad8, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xb24, Size: 4]
	float RespawnTickInterval;//[Offset: 0xb28, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xbc0, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xbcc, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xbd8, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc14, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xc34, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xc38, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xc40, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xc68, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd05, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd06, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xd08, Size: 12]
	FName SeekLockSocket;//[Offset: 0xd18, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xd20, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xd28, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xd34, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xd38, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xd4c, Size: 4]
	float OverlapDamageRate;//[Offset: 0xd54, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xd58, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xd5c, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xd60, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xd64, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xd68, Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xd70, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xd74, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xd7c, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xd8c, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xd94, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xd98, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda9, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xdac, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xdb0, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xdb4, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xdb8, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xdbc, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xdc8, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xdd4, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xdd8, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddc, Size: 1]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddd, Size: 1]
	int CandidateAvatarID;//[Offset: 0xde0, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde4, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xdf0, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf4, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xe04, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	int TeamID;//[Offset: 0xe0c, Size: 4]
	int CampID;//[Offset: 0xe10, Size: 4]
	float VehicleGoStraight;//[Offset: 0xe14, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xe1c, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xe20, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xe28, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xe34, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xe38, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3c, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3d, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xe40, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xe44, Size: 4]
	enum UAVOperateState;//[Offset: 0xe4c, Size: 1]
	float SingleMoveRate;//[Offset: 0xe50, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xe58, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xe70, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xe88, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xe98, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xea4, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xeb8, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xec0, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xec4, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeca, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xecc, Size: 4]
	float StaticFixAngel;//[Offset: 0xed0, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xed4, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xed8, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xee0, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xee4, Size: 4]
	int CannotEnterTips;//[Offset: 0xef0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xef8, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xf04, Size: 12]
	Actor* AttachedActor;//[Offset: 0xf10, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xf14, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xf24, Size: 4]
	void WeakTick(float DeltaTime);// 0x226d740
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x226d6c8
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x226d650
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x226d5d8
	void TickEnableAvatarOutline();// 0x226d5c4
	void StopEngine();// 0x226d5a8
	void StopAutoDriving();// 0x226d594
	void StartFireSimple(byte ShootMode);// 0x226d51c
	void StartEngine();// 0x21a0768
	void StartAirDrop();// 0x226d508
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x226d45c
	void ShowBoostingEffect(bool bShow);// 0x2bbd2f4
	bool ShouldUseSpecialHitEffect();// 0x226d42c
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x226d240
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x226d1c0
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x226d0b4
	void SetUsingHorn(bool bUse);// 0x226d034
	void SetUAVOperateState(enum NewState);// 0x226cfbc
	void SetSpawnedInReady(bool bFlag);// 0x226cf40
	void SetSimulatePhysics(bool bSimulate);// 0x226cec0
	void SetPhysActive(bool bActive, float Delay);// 0x226cdf8
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x226cd88
	void SetDefaultMusic(out const FString[] InMusic);// 0x226cc54
	void SetBoosting(bool bEnalbed);// 0x226cbcc
	void ServerSetUsingHorn(bool bUse);// 0x226cb04
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x226ca3c
	void ServerSetBoosting(bool bEnalbed);// 0x226c974
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x226c8fc
	void ServerSetAirControlF(float Rate);// 0x226c848
	void ServerSetAirControlB(float Rate);// 0x226c794
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x226c6c4
	void SendVehicleInAirChangedTimeToServer();// 0x226c668
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x226c5b4
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x226c500
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x20c3e74
	void SafeSleepVehicle();// 0x226c4ec
	void ResetJoystickMove();// 0x226c4d8
	void RequestChangeVehicleAvatar();// 0x226c47c
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x226c36c
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x226c214
	void RemoveAntiStuckBox();// 0x226c200
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x226c188
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x226c110
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x226c098
	void ProcessAvatarOutline();// 0x226c07c
	void PrintStats();// 0x226c060
	bool PreChangeVehicleFPPAvatar();// 0x226c038
	bool PreChangeVehicleBrokenAvatar();// 0x226c010
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x226bf4c
	void PostLoadFPPMesh();// 0x21d1468
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x226bed4
	bool PawnHasState(enum PawnState);// 0x226be4c
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x226bd88
	void OnUpdateEffects();// 0x2bbd2f4
	void OnStopFire();// 0x2bbd2f4
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x226bccc
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x226bc10
	void OnSetTailLightValue(float LightValue);// 0x2bbd2f4
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x2bbd2f4
	void OnRep_VehicleSyncFlag();// 0x226bbfc
	void OnRep_VehicleHealthState();// 0x226bbe8
	void OnRep_TeamID();// 0x1f9f658
	void OnRep_SimulateViewData();// 0x226bbd4
	void OnRep_SimulateFreeCameraViewData();// 0x226bbc0
	void OnRep_ServerLastReplicatedServer();// 0x226bbac
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x226bb98
	void OnRep_IsForbidNightVehicle();// 0x226bb84
	void OnRep_IsEngineStarted();// 0x226bb70
	void OnRep_IsBoosting();// 0x226bb5c
	void OnRep_IsAirdroppingVehicle();// 0x226bb48
	void OnRep_FrozenStatic();// 0x226bb34
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x226babc
	void OnRep_CandidateAvatar();// 0x2bbd2f4
	void OnRep_CampID();// 0x1f4cfe0
	void OnRep_AttachedRelLoc();// 0x226baa8
	void OnRep_AttachedActor();// 0x226ba94
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x226ba14
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x2bbd2f4
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x2bbd2f4
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x226b8a8
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x226b830
	void OnEngineStop();// 0x2bbd2f4
	void OnEngineStart();// 0x2bbd2f4
	void OnBoostingChanged();// 0x2bbd2f4
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x226b75c
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x226b65c
	void LoadFPPVehicleModel();// 0x226b648
	bool IsVehicleWarVehicle();// 0x1fa7388
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x226b57c
	bool IsUsingFPPModel();// 0x226b554
	bool IsUCAV();// 0x226b52c
	bool IsUAV();// 0x226b4fc
	bool IsSpawnedInReady();// 0x226b4e0
	bool IsSimulatePhysics();// 0x226b4b8
	bool IsNotInWater();// 0x226b488
	bool IsMotorbike();// 0x226b460
	bool IsInMidAir();// 0x226b430
	bool IsInBuffSpeedState();// 0x226b414
	bool IsHelicopter();// 0x226b3ec
	bool IsEntirelyUnderWater();// 0x226b3c4
	bool IsElectronic_Failure();// 0x226b39c
	bool IsClient_WeaponOwner();// 0x226b36c
	bool IsCanEnter();// 0x226b33c
	bool IsAutoDriving();// 0x226b314
	bool IsArmedVehicle();// 0x226b2ec
	bool IsAmphibiousVehicle();// 0x226b2c4
	bool IsAlive();// 0x226b294
	bool IsAirVehicle();// 0x1fa73b8
	bool IsAI();// 0x226b264
	bool IsActiveEffect(FName EffectName);// 0x226b1e4
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x226b0c8
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x226b048
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x226af84
	bool HasSkillID(int SkillID);// 0x226af04
	bool HasBuffID(int BuffID);// 0x226ae7c
	bool HasAutoDriveTarget();// 0x226ae54
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x21e7adc
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x226add4
	void HandleOnVehicleAvatarDataCopied();// 0x226adc0
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x226acb8
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x226ab20
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x226aa18
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x225fe00
	void HandleMoveAntiShootVerifyMiss();// 0x226a9fc
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x226a97c
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x226a8fc
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x226a884
	Actor* GetWeaponUserConst();// 0x226a854
	Actor* GetWeaponUser();// 0x226a824
	int GetWeaponReconnectIdx();// 0x226a7f4
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x226a7c4
	uint32 GetWeaponOwnerPlayerKey();// 0x226a794
	float GetWeaponOwnerPawnHealth();// 0x226a764
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x226a734
	WeaponManagerComponent* GetWeaponManager();// 0x226a704
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x226a6dc
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x226a618
	VehicleSyncComponent* GetVehicleSync();// 0x226a5fc
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x226a5d4
	int GetVehicleSkinItemID();// 0x226a5ac
	VehicleSeatComponent* GetVehicleSeats();// 0x226a590
	VehicleDamageComponent* GetVehicleDamage();// 0x226a574
	VehicleCommonComponent* GetVehicleCommon();// 0x226a558
	VehicleAvatarComponent* GetVehicleAvatar();// 0x226a530
	VehicleAIComponent* GetVehicleAIComponent();// 0x226a514
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x226a4ec
	bool GetUsingHorn();// 0x226a4c4
	int GetTeamId();// 0x226a49c
	MaterialInstanceDynamic* GetTailLightDIM();// 0x226a474
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x208ae80
	Vector GetRotationInputDir();// 0x2182b24
	float GetReloadAllWeaponTime();// 0x226a44c
	SkeletalMeshComponent* GetMesh();// 0x226a430
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x226a400
	BattleItemHandleBase* GetItemHandle();// 0x226a3e4
	bool GetIsPhysSleep();// 0x226a3b4
	bool GetIsOpenVertify();// 0x226a398
	Vector GetGunOwnerHeadLocation();// 0x226a348
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x226a320
	float GetForwardSpeed();// 0x2182af4
	STExtraPlayerCharacter* GetFirstPassenger();// 0x226a2f8
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x226a2d0
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x226a2a0
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x226a284
	STExtraPlayerCharacter* GetDriver();// 0x226a25c
	uint64 GetCurrentStatesInterface();// 0x226a22c
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x226a160
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x2269fd4
	int GetCampId();// 0x2269fac
	BuoyancyForceComponent* GetBuoyancyForce();// 0x2269f90
	int GetAvatarID();// 0x2269f68
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x2269e9c
	void ExitFPPVehicle();// 0x2269e88
	void EnterFPPVehicle();// 0x2269e74
	void EnableWeakTick(bool Enabled);// 0x2269dec
	void EnablePlayMusic(bool InEnable);// 0x2269d70
	void EnableAvatarOutline(enum OutlineType);// 0x2269cf8
	void DestroyAndRespawnSelf();// 0x2269ce4
	void DeactiveEffect(FName EffectName);// 0x2269c6c
	void CreateAntiStuckBox();// 0x2269c58
	void ClientPlayVehicleCameraShake();// 0x2269bfc
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x2269b48
	void ClearInputs();// 0x2269b34
	void ClearDecals();// 0x2269b20
	void ClearBuff();// 0x2269b04
	void ClearAllComponentWeakTick();// 0x2269af0
	void ClearAllComponentTick();// 0x2269adc
	bool CheckHaveSpecialAttachActor();// 0x225bd14
	void CheckEnableAvatarOutline();// 0x2bbd2f4
	bool CheckAllWeaponIsReadyForFire();// 0x2269ab4
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x2269a34
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x22699bc
	bool CanVehicleJump();// 0x2269994
	bool CanPushUpCharacterWhenPenetrating();// 0x2269978
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x22698f0
	bool CanAutoDrivingNoDriver();// 0x22698c8
	bool CanAutoDriving();// 0x22698a0
	void CallbackLoadedParticleExplosion();// 0x226988c
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x22697c4
	void BroadcastClientVehicleExplosionEffect();// 0x2241c28
	void BPPostLoadFPPMesh();// 0x2bbd2f4
	void BPPlayOverlapDamageCameraShake();// 0x2bbd2f4
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x2269744
	void AutoLoadEffect();// 0x2269730
	bool ApplyAnimation();// 0x2269708
	void AfterBeginPlay();// 0x2bbd2f4
	void AddHealthSafety(float AddVal);// 0x2269688
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x2269578
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2269420
	void ActiveEffectAsync(FName EffectName);// 0x22693a8
	void ActiveEffect(FName EffectName);// 0x2269330

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x158, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x15c, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x168, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x174, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x180, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x18c, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x198, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1a4, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1b0, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1bc, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x1cc, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x1d8, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x1e4, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x1f0, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x1fc, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x208, Size: 12]
	delegate OnDriverChange;//[Offset: 0x214, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x220, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x230, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x238, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x240, Size: 4]
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void ReAttachCharacterOnSeat(STExtraBaseCharacter* InCharacter);// 0x22f63f8
	void ReAttachAllCharacters();// 0x22f63e4
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x22f6328
	void OnRep_VehicleWeapons();// 0x22f6314
	void OnRep_Occupiers();// 0x22f6300
	void OnRep_Attachments();// 0x22f62ec
	bool IsSeatIndexAvailable(int SeatIndex);// 0x22f626c
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x22f61ec
	bool IsSeatAvailable(enum SeatType);// 0x22f616c
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x22f60ec
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x22f606c
	int GetSeatNum();// 0x21d85bc
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x22f5e50
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x20b8b48
	int GetInUseSeatNum();// 0x22f5e28
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x22f5da8
	STExtraPlayerCharacter* GetFirstPassenger();// 0x22f5d80
	int GetDriverSeatIndex();// 0x22f5d58
	STExtraPlayerCharacter* GetDriver();// 0x22f5d30
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x22f5cb0
	int GetAvailableSeatIndex(enum SeatType);// 0x22f5c30
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x22f5b34
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x22f5a70
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x22f592c
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x22f5860

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x10c, Size: 60]
	FString LuaFilePath;//[Offset: 0x148, Size: 12]
	void UnRegistLuaTick();// 0x4f90028
	void RegistLuaTick(float TickInterval);// 0x4f90444

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	byte SeatSpecialType;//[Offset: 0x22, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Rotator CharRotVsVehiRot;//[Offset: 0x30, Size: 12]
	byte SeatSideType;//[Offset: 0x3c, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x40, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x50, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float Radius;//[Offset: 0x5c, Size: 4]
	float HalfHeight;//[Offset: 0x60, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xcc0, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc6, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xcc8, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xcd0, Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcec, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xcf0, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xcf8, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xcfc, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xd00, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0xd04, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xd08, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xd10, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xd18, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd20, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd21, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd22, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd23, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd39, Size: 1]
	FName CharacterSocket;//[Offset: 0xd40, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd49, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4a, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4b, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4c, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4d, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xd50, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0xd58, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xd60, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd64, Size: 1]
	float FuelConsumptionRate;//[Offset: 0xd68, Size: 4]
	float StartReloadDelayTime;//[Offset: 0xd80, Size: 4]
	float EndReloadDelayTime;//[Offset: 0xd90, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xd94, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	Actor* OwnerActor;//[Offset: 0xd9c, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xda0, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0xda8, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0xdac, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0xdb0, Size: 4]
	void StartReloadAnim();// 0x22f7ddc
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x22f7cc8
	void OnVehicleExplode();// 0x20c3b5c
	void OnRep_OwnerActor();// 0x22f7cb4
	void NetMulticastReturnBullets();// 0x22f7c58
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x22f7afc
	void K2_SetSpecialMeshHide(bool isHide);// 0x2bbd2f4
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x2bbd2f4
	void K2_OnReturnBullets();// 0x2bbd2f4
	MeshComponent* K2_GetWeaponMeshComp();// 0x2bbd2f4
	void HnadleScopeInAfterReload();// 0x22f7ae8
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x22f7a2c
	void HandleWeaponStartReload();// 0x22f7a18
	void HandleWeaponEndReload();// 0x22f7a04
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x22f7984
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x22f7900
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x22f78d8
	STExtraVehicleBase* GetOwnerVehicle();// 0x22f78b0
	Rotator GetOwnerCameraRotator();// 0x22f7868
	Transform GetCharacterSocketTransform();// 0x22f7808
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x22f7790
	bool CheckIsAutonomousOrObTarget();// 0x22f7768
	void AfterReloadEnd();// 0x22f7754

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	float voiceCheckCD;//[Offset: 0x7cc, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x7d0, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x7f0, Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82d, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x830, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x83c, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x848, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x854, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x860, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x86c, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x878, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x884, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x890, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x89c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x8a8, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x8b4, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x8c0, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x8cc, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x8d8, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0x8e4, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x8fc, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0x908, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x914, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0x920, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0x92c, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0x938, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0x944, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0x948, Size: 4]
	delegate OnScopeIn;//[Offset: 0x94c, Size: 12]
	delegate OnScopeOut;//[Offset: 0x958, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x964, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x970, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0x974, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0x978, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0x97c, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x980, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0x984, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0x994, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0x998, Size: 4]
	byte ShootMode;//[Offset: 0x99c, Size: 1]
	byte CurShootType;//[Offset: 0x99d, Size: 1]
	int CurShootTotalType;//[Offset: 0x9a0, Size: 4]
	float VoiceCheckDis;//[Offset: 0x9a4, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0x9a8, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0x9ac, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0x9b0, Size: 12]
	int AngledSightID;//[Offset: 0x9c8, Size: 4]
	byte TraceChannel;//[Offset: 0x9cc, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0x9d0, Size: 12]
	float LastImpactEffectTime;//[Offset: 0x9dc, Size: 4]
	int CurBurstShootIndex;//[Offset: 0x9e4, Size: 4]
	Transform BoltActionTransform;//[Offset: 0x9f0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	int ClientShootTimes;//[Offset: 0xa24, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xa28, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xa2c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xa30, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xa34, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xa38, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xa3c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xa40, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xa4c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5d, Size: 1]
	float DropDuration;//[Offset: 0xa60, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xa64, Size: 4]
	float AIShootLoudness;//[Offset: 0xa68, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xa6c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xa70, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xa74, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xa78, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xa7c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xa81, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xa90, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xa94, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xa98, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xa9c, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9d, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9e, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9f, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xaa0, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xaac, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xab8, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xac4, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xad0, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xadc, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xae8, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xaf4, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xb00, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xb0c, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb18, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xb24, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xb30, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xb3c, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xb58, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xb64, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xb68, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xb74, Size: 12]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xb80, Size: 12]
	uint32 ShootID;//[Offset: 0xb8c, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xb90, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xb94, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool UseNewShotGunDevation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca9, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xcac, Size: 12]
	int WeaponDurability;//[Offset: 0xcb8, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xcbc, Size: 1]
	void UpdateComponentTick();// 0x224ca3c
	bool StopFireFilter();// 0x224ca0c
	void StopFire(byte ToState);// 0x224c98c
	void StopFillGas();// 0x224c978
	int StartReload();// 0x1f92890
	bool StartFireFilter();// 0x21513a4
	void StartFire();// 0x1fa6754
	void StartFillGas();// 0x224c964
	void StartDoPreBarrel(float HandledTime);// 0x224c8e4
	void StartDoBarrel();// 0x20c3e74
	void ShowDefaultScope(bool bShow);// 0x224c864
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x224c7a0
	void ShootIDIsNotValid();// 0x2172f68
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x224c648
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x224c5c8
	void SetRearSightIndex(int Index);// 0x224c550
	void SetCurShootType(byte shootType);// 0x224c4d8
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x224c374
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x224c210
	void SetCurReloadMethod(byte method);// 0x224c198
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x224c084
	void SetBaseImpactDamageEntity(float Damage);// 0x2006b7c
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x224bf74
	bool ScopeOut();// 0x224bf44
	void ScopeInContinue();// 0x224bf30
	bool ScopeIn();// 0x224bf00
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x224be80
	void RPC_ServerStopReload(int InterruptState);// 0x224bdcc
	void RPC_ServerSetMaxBulletNum();// 0x224bd70
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x224bcbc
	void RPC_Server_SetRearSightIndex(int Index);// 0x224bc08
	void RPC_ClientSetCurShootType(byte shootType);// 0x224bb54
	void RPC_ClientSetCurReloadMethod(byte method);// 0x224baa0
	void RPC_ClientNotifySimulateHitDataArray(const SimulateBulletHitInfoData[] DataArray);// 0x224b9dc
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x224b95c
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x224b860
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x224b618
	void RotateCrossHair(Rotator Rot);// 0x224b5a8
	void ResetInitialBulletNumInClip(bool bSetZero, int OverrideClipNum);// 0x224b4e0
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x224b37c
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x224b304
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x224b240
	void RefreshBulletInClip(int Count);// 0x224b1c8
	void ReduceWeaponDurability(int ReduceAmount);// 0x224b150
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x224afec
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x2bbd2f4
	void OnWeaponShootDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x2bbd2f4
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x2bbd2f4
	void OnWeaponEquipDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x2bbd2f4
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnStopFireDelegate__DelegateSignature();// 0x2bbd2f4
	void OnStartFireDelegate__DelegateSignature();// 0x2bbd2f4
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bbd2f4
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bbd2f4
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bbd2f4
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x2bbd2f4
	void OnScopeInContinue__DelegateSignature();// 0x2bbd2f4
	void OnRep_WeaponDurability();// 0x224afd8
	void OnRep_SimulateHitDataArray();// 0x224afc4
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x224af4c
	void OnRep_CurMaxBulletNumChange();// 0x224af38
	void OnRep_CurCurShootIntervalMode();// 0x224af24
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x224af10
	void OnMaxBulletChange__DelegateSignature();// 0x2bbd2f4
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x2bbd2f4
	void OnCurBulletChange__DelegateSignature();// 0x2bbd2f4
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void NotifyServerNoneShootAction();// 0x224aeb4
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x224ae3c
	void NotifyClientNoneShootAction();// 0x224ade0
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x224ac7c
	bool IsWeaponDurabilityLoss();// 0x224ac54
	bool IsWeaponAttachmentFullEquiped();// 0x224ac2c
	bool IsVehicleWeapon();// 0x224ac04
	bool IsUsingGrenadeLaunch();// 0x224abdc
	bool IsSupportAutoAim();// 0x224abb4
	bool IsInPreFire();// 0x224ab8c
	static bool IsGHasInfiniteBullets();// 0x224ab64
	bool IsEnableReloadADS();// 0x224ab48
	bool IsEnableDropBullet();// 0x224ab20
	bool IsDriverVehicleWeapon();// 0x224aaf8
	bool IsAutoDrop();// 0x224aad0
	void InitWeaponDurability(int NewVal);// 0x224aa58
	bool HasMultiBullet();// 0x224aa30
	void HandleWeaponScopeUnEquiped(enum Type);// 0x224a9b8
	void HandleWeaponScopeEquiped(enum Type);// 0x224a940
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x224a870
	void HandleAllWeaponAvatarLoaded();// 0x224a85c
	byte GetWeaponReloadType();// 0x224a834
	int GetWeaponIDFromEntity();// 0x224a80c
	int GetWeaponID();// 0x224a7dc
	int GetWeaponDurability();// 0x224a7b4
	float GetWeaponBodyLength();// 0x224a78c
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x224a5f4
	ParticleSystem* GetVisualBulletTrackFX();// 0x224a5cc
	bool GetVisualBulletTrackEnabled();// 0x224a5a4
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x224a564
	FName GetVerifyScopeSocketNameFromEntity();// 0x224a524
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x224a4fc
	float GetTraceDistanceFromEntity();// 0x224a4d4
	FName GetSilencerSocketNameFromEntity();// 0x224a494
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x224a46c
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x224a444
	byte GetShootTypeFromEntity();// 0x224a41c
	int GetShootReduceDurabilityAmount();// 0x224a3f4
	int GetShootIntervalShowNumberFromEntity();// 0x224a3cc
	float GetShootIntervalFromEntity(int BulletIndex);// 0x224a34c
	FName GetShellDropSocketNameFromEntity();// 0x224a30c
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x224a1fc
	int GetScopeID(bool bIsAngledOpticalSight);// 0x224a16c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x224a048
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x2249f30
	bool GetReloadWithNoCostFromEntity();// 0x2249f08
	float GetReloadTimeMagOutFromEntity();// 0x2249ee0
	float GetReloadTimeMagInFromEntity();// 0x2249eb8
	float GetReloadTimeFromEntity();// 0x2249e90
	FName GetReloadTIDName(byte method);// 0x2249e00
	float GetReloadTacticalTimeFromEntity();// 0x2249dd8
	int GetReloadSpecificBulletNumFromEntity();// 0x2249db0
	float GetReloadRateFromEntity();// 0x2249d88
	float GetReloadDurationStartFromEntity();// 0x2249d60
	float GetReloadDurationLoopFromEntity();// 0x2249d38
	Transform GetRelativeMuzzleTransform();// 0x2249cd0
	float GetReferenceDistance();// 0x2249ca8
	FName GetRearSightSocket(int Index);// 0x2249c20
	Rotator GetRearSightRot();// 0x2249bd8
	int GetRearSightIndex();// 0x2249bb0
	Rotator GetRearSightHandRotOffset();// 0x2249b68
	float GetRangeModifier();// 0x2249b40
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x2249a80
	float GetPreFireTimeFromEntity();// 0x2249a58
	float GetPostFireTimeFromEntity();// 0x2249a30
	float GetPostFillGasTime();// 0x2249a08
	FName GetOverrideScopeAimSocketName();// 0x22499c8
	Transform GetMuzzleTransform();// 0x2249960
	FName GetMuzzleSocketNameFromEntity();// 0x2249918
	float GetMinShootIntervalFromEntity();// 0x22498f0
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x22498c8
	float GetMaxValidHitTimeFromEntity();// 0x22498a0
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x2249878
	int GetMaxBulletNumInOneClipFromEntity();// 0x2249850
	int GetMaxBulletNumInBarrelFromEntity();// 0x2249828
	bool GetIsNeedOffsetVelocityFromEntity();// 0x2249800
	bool GetIsEnableScopeInFromEntity();// 0x22497d8
	float GetImpactEffectSkipDistanceFromEntity();// 0x22497b0
	float GetIgnoreRangeAttenuatDis();// 0x2249788
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x22496f4
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x22496cc
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x2249570
	float GetGasAddDamageRate();// 0x2249548
	float GetGameDeviationFactor();// 0x2249520
	FName GetFiringSuppressorSocketNameFromEntity();// 0x22494e0
	float GetFireSensitiveYawRate();// 0x22494b8
	float GetFireSensitivePitchRate();// 0x2249490
	int GetExtraShootIntervalShowNumberFromEntity();// 0x2249468
	float GetExtraShootIntervalFromEntity();// 0x2249440
	<int,bool> GetEquipAttachSlotMap();// 0x2249270
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x22491f0
	byte GetCurSightVisionType();// 0x22491c8
	byte GetCurSightType();// 0x2249198
	enum GetCurShootIntervalMode();// 0x224917c
	int GetCurrentBulletNumInClip();// 0x2249160
	float GetCurReloadTime();// 0x2249138
	byte GetCurReloadMethod();// 0x2249110
	float GetCurGasRate();// 0x22490e8
	float GetCurGasAngle();// 0x22490c0
	float GetCrossHairInitSize();// 0x2249098
	float GetCrossHairBurstSpeed();// 0x2249070
	float GetCrossHairBurstIncreaseSpeed();// 0x2249048
	byte GetControllerRole();// 0x203469c
	int GetConstantWeaponDurabilityFromEntity();// 0x2249020
	bool GetClipHasInfiniteBulletsFromEntity();// 0x2248ff8
	MeshComponent* GetChildMeshComp(FName compTag);// 0x2248f78
	bool GetCanRecordHitDetailFromEntity();// 0x2248f50
	float GetBurstShootIntervalFromEntity();// 0x2248f28
	float GetBurstShootCDFromEntity();// 0x2248f00
	int GetBurstShootBulletsNumFromEntity();// 0x2248ed8
	ItemDefineID GetBulletTypeFromEntity();// 0x2248e8c
	float GetBulletRangeEntity();// 0x2248e64
	float GetBulletNumSingleShotFromEntity();// 0x2248e3c
	float GetBulletMomentumFromEntity();// 0x2248e14
	float GetBulletFireSpeedFromEntity();// 0x2248dec
	float GetBaseReloadTime(bool bTactical);// 0x2248d64
	float GetBaseImpactDamageEntity();// 0x2248d3c
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x2248c24
	float GetAutoShootCDFromEntity();// 0x2248bfc
	bool GetAutoReloadFromEntity();// 0x2248bd4
	bool GetADSManualStop();// 0x2248bac
	float GetAccessoriesVRecoilFactor();// 0x2248b84
	float GetAccessoriesRecoveryFactor();// 0x2248b5c
	float GetAccessoriesHRecoilFactor();// 0x2248b34
	float GetAccessoriesDeviationFactor();// 0x2248b0c
	void ForceSyncAllClientsBulletsNumOnServer();// 0x2248af8
	void FixBulletNumWithValideData();// 0x2248ae4
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x2248a64
	void DoGrenadeLaunchStartReload();// 0x2248a50
	void CostGasByOneShoot();// 0x2248a3c
	void ClearWeaponAttrModifier();// 0x2248a28
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x224896c
	void CheckReloadAttr();// 0x2248958
	bool CheckNeedClientSetMaxBulletNum();// 0x2248930
	bool CanSwitchToGrenade();// 0x2248914
	void BP_OnSyncSimulatedClientsCurBullets();// 0x2bbd2f4
	void AddWeaponDurability(int AddAmount);// 0x224889c
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x2248818
	void AddFillGas(float AddTime);// 0x22487a0
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x2248604

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x344, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x348, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x354, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x370, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x3a0, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x3d0, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x400, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x430, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x460, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x490, Size: 48]
	int CrossHairType;//[Offset: 0x4c0, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x4c4, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x4c8, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x4cc, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x4d0, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x4d8, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x4dc, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x4e8, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x4f4, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x500, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x50c, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x518, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x524, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x530, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x53c, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x548, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x554, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x558, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x55c, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x568, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x570, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	float MaxReconnectTime;//[Offset: 0x57c, Size: 4]
	float StartReconnectTime;//[Offset: 0x580, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x588, Size: 104]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x5f8, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x608, Size: 88]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x664, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x66c, Size: 4]
	byte CurWeaponState;//[Offset: 0x670, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x674, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x678, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x680, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x6c8, Size: 4]
	MeshSynData[] synData;//[Offset: 0x6d0, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x6e0, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x6e4, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x6ec, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x704, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x70c, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x71c, Size: 12]
	byte WeaponUIType;//[Offset: 0x728, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x730, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x760, Size: 12]
	int FuncFlag;//[Offset: 0x76c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x775, Size: 1]
	FString LuaFilePath;//[Offset: 0x778, Size: 12]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x2bbd2f4
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x2bbd2f4
	void UpdateWeaponAvatar(float DeltaTime);// 0x2bbd2f4
	void TriggerWeaponEvent(enum Event);// 0x22765f4
	void SpecialResetForWeaponCrosshair();// 0x2bbd2f4
	void SetWeaponMeshHidden(bool Hidden, bool CastShadow);// 0x2276524
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x2276470
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x22763bc
	void RespawnData();// 0x2bbd2f4
	void ResetData();// 0x2bbd2f4
	void PlayLocalShellDropFX();// 0x2bbd2f4
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x2bbd2f4
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x2bbd2f4
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x2bbd2f4
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x2bbd2f4
	void OnRep_WeaponReconnectReplicateData();// 0x22763a8
	void OnRep_WeaponAttachSocketName();// 0x2276394
	void OnRep_SimulatedOwnerPawn();// 0x2276380
	void OnRep_OwnerClientCreateWeaponData();// 0x227636c
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x2276358
	void OnRep_AvatarMeshChanged();// 0x2276344
	void OnRep_AttachmentReplication();// 0x20534bc
	void OnReleaseTrigger();// 0x2276328
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bbd2f4
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bbd2f4
	void OnPushTrigger();// 0x1ffdcf8
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x2bbd2f4
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bbd2f4
	void NewInitWeapon();// 0x2276314
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x2276294
	bool IsUseAttrModify();// 0x2276264
	bool IsSimulated();// 0x227623c
	bool IsLocalOrSpectorPlayer();// 0x2276214
	bool IsAutonomous();// 0x22761ec
	void InitWeapon();// 0x22761d8
	bool HasComponentSlot(byte Slot);// 0x2276158
	void HandleReconnectNew(Actor* WeaponOwner);// 0x22760e0
	byte GetWeaponTypeNew();// 0x22760b8
	byte GetWeaponType();// 0x2276090
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x2276068
	byte GetWeaponStateType();// 0x2276040
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x2276018
	enum GetWeaponOwnerObserverType();// 0x2275ff0
	FString GetWeaponName();// 0x2275f30
	MeshComponent* GetWeaponMeshComponent();// 0x2148644
	int GetWeaponID();// 0x224a7dc
	byte GetWeaponHoldType();// 0x2275f08
	byte GetWeaponFireMode();// 0x2275ed8
	WeaponEntity* GetWeaponEntityComponent();// 0x2275eb0
	FString GetWeaponDetailInfo();// 0x2275df0
	FName GetWeaponAttachSocket();// 0x2275da8
	WeaponSpecificHandler* GetSpecificHandler();// 0x2275d80
	int GetScopeID(bool bIsAngledOpticalSight);// 0x224a16c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x224a048
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x2249f30
	FString GetOwnerPlayerName();// 0x2275cc0
	PlayerController* GetOwnerPlayerController();// 0x2275c90
	Pawn* GetOwnerPawn();// 0x2275c68
	FString GetOwnerName();// 0x2275ba8
	Controller* GetOwnerController();// 0x2275b78
	Actor* GetOwnerActor();// 0x2275b48
	ItemDefineID GetItemDefineID();// 0x2275afc
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x2275ad4
	byte GetCurSightType();// 0x2249198
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x2275990
	LinearColor GetColorByTeamID(int TeamID);// 0x2bbd2f4
	ItemHandleBase* GetBackpackItemHandle();// 0x2275968
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x2bbd2f4
	void DelayHandleAvatarMeshChanged();// 0x2275954
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x2275888
	void ClientLoadDefaultMesh();// 0x2275874
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x22757fc
	bool CheckHasFuncByInt(int Func);// 0x227577c
	bool CheckHasFunc(enum Func);// 0x227577c
	void ChangeSequenceState(byte StateType);// 0x22756fc
	void CallForceHideWeaponWidgetDel();// 0x22756e8

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool SetAutonomousLoadRes();// 0x1f5ab0c
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x2318d68
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x2318c98

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x418, Size: 4]
	delegate OnScopeEquipDelegate;//[Offset: 0x420, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x42c, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x438, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x444, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x450, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x460, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x484, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x4c0, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x4e0, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x524, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x538, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x231acb0
	void SetPendantSocketType(enum SocketType);// 0x231ac38
	bool SetAutonomousLoadRes();// 0x1f5ab0c
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x231aa9c
	void ResetAttachmentSocket();// 0x231aa88
	void ResetAttachmentParent();// 0x231aa74
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x231a930
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1f58160
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x231a8b0
	void RefreshAvatarStateChanged();// 0x1f5a774
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x231a838
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x231a7b8
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x231a6fc
	bool PutOnEquipmentByResID(int resID);// 0x21491dc
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x231a67c
	bool PutOffEquimentByResID(int resID);// 0x2149154
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x231a5b8
	void ProcessLoadAllMesh();// 0x1f5a758
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x231a4dc
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x2bbd2f4
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bbd2f4
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x2bbd2f4
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bbd2f4
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x2bbd2f4
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x2bbd2f4
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x231a410
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x231a2f8
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x1f5a3c8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x231a1cc
	bool IsTeammate();// 0x1f58130
	bool IsSelf();// 0x1f580d8
	void InitMasterComponent();// 0x231a1b8
	void InitialAvatarParam();// 0x231a1a4
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x231a12c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x231a0b4
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x231a03c
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x2319f60
	Controller* GetWeaponController();// 0x2319f38
	STExtraWeapon* GetOwnerWeapon();// 0x2319f10
	STExtraBaseCharacter* GetOwnerCharacter();// 0x2319ee8
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x2319e54
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x2319dd4
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x2319cdc
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1f59f5c
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x1f59ffc
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x2319c18
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x2319b98
	void DestroyWeapon();// 0x2319b84
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x2319a68
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x209a760
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x231999c
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x231990c
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x2319840
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1f57cc0
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x23197c8
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x2319678

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x1c0, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x1cc, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x208, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x214, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x218, Size: 60]
	int StepCount;//[Offset: 0x254, Size: 4]
	delegate asyncLoadAssetsDelegate;//[Offset: 0x258, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x264, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x308, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x30c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	enum DisplayQuality;//[Offset: 0x321, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x324, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x380, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x3c0, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x3fc, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x400, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x40c, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1f5aeb0
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1f5addc
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x1f5acb8
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x1f5abb0
	void SetDisplayQuality(enum Quality);// 0x1f5ab3c
	bool SetAutonomousLoadRes();// 0x1f5ab0c
	void RequestSyncLoadMeshes();// 0x1f5aaf8
	void RequestSyncLoadHandles();// 0x1f5aae4
	void RequestAsyncLoadMeshes();// 0x1f5aac8
	void RequestAsyncLoadHandles();// 0x1f5aaac
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x1f5aa34
	void RemoveAllDIYRTCacheInBattle();// 0x1f5aa20
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x1f5a918
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x1f5a810
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x1f5a790
	void RefreshAvatarStateChanged();// 0x1f5a774
	void ProcessLoadAllMesh();// 0x1f5a758
	void PreProcessBeforeLoadMesh();// 0x1f5a73c
	void PostProcessAfterLoadMesh();// 0x1f5a720
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x1f5a640
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x2bbd2f4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x2bbd2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1f5a5c0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x1f5a4ec
	void OnAllAvatarHandleLoadedDone();// 0x1f5a4d0
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x1f5a3c8
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x1f5a2fc
	bool IsAutonomousAvatar();// 0x1f5a2d4
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x1f5a210
	<int,MeshComponent*> GetMeshComponentList();// 0x1f5a080
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x1f59ffc
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x1f59f8c
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1f59f5c
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x1f59edc
	enum GetDisplayQuality();// 0x1f59ec0
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x1f59dec
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x1f59d28
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x1f59c60
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x1f59be0
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x1f59b10
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x1f59a4c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1f59978
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x1f598bc
	int AddAction_Modle(int SlotID, int ModleID);// 0x1f597f8
	int AddAction_Material(int SlotID, int MaterialID);// 0x1f59734
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x1f59660
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x1f594e0
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x1f593c8
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x1f592b0
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x1f591bc

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x134, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 1]
	FName LightVectorName;//[Offset: 0x140, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x148, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x150, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x160, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x170, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	FString LuaFilePath;//[Offset: 0x1b0, Size: 12]
	void RequestDownloadItemInBattle(int InItemID);// 0x1f58234
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1f58160
	bool IsTeammate();// 0x1f58130
	bool IsServerMode();// 0x1f58108
	bool IsSelf();// 0x1f580d8
	bool IsLogicRunningMode();// 0x1f580b0
	bool IsLobbyAvatar();// 0x1f58094
	bool IsLobbyActor();// 0x1f58078
	bool IsForceClientMode();// 0x1f5805c
	uint32 GetPlayerKey();// 0x1f5802c
	GameInstance* GetGameInstance();// 0x1f57ffc
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x1f57f38
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1f57cc0

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	enum ItemStoreArea;//[Offset: 0x85, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x88, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float UnitWeight;//[Offset: 0x98, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	void UpdateAttributeModify(bool bEnable);// 0x1fdca28
	bool UnEquip();// 0x23cd0ec
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x23ccfa8
	bool HanldeDropAssociationData();// 0x23ccf78
	bool HanldeCleared();// 0x20c9e40
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f6fd5c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f6f938
	bool HandleEnable(bool bEnable);// 0x1f6f420
	bool HandleDrop(int InCount, enum Reason);// 0x1f6f354
	bool HandleDisuse(enum Reason);// 0x1f608bc
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x23ccef0
	bool HandleBindToTargetItem();// 0x20556d0
	World* GetWorldInternal();// 0x23ccec0
	World* GetCurrentWorld();// 0x23cce98
	BattleItemData ExtractItemData();// 0x1f75958
	void ClearAdditionalData();// 0x23cce84
	bool CheckCanUse(out const interface class ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x23ccd24

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x23d23ec
	void RemoveAssociation(FName Name);// 0x23d2374
	void Init(ItemDefineID InDefineID);// 0x23d22e4
	ItemDefineID GetDefineID();// 0x23d22a0
	<FName,ItemAssociation> GetAssociationMap();// 0x23d2120
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x23d200c
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x23d1f60
	ItemAssociation GetAssociation(FName Name);// 0x23d1ec0
	void Constuct(out const ItemDefineID InDefineID);// 0x23d1e28
	void AddAssociation(FName Name, ItemAssociation Association);// 0x23d1d20

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0xc, Size: 12]
	int IntData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]
	Actor* TargetActor;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 40]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 40]
	ItemAssociation[] Associations;//[Offset: 0x8c, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int SortingPriority;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int ItemDurability;//[Offset: 0x20, Size: 4]
	int itemType;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x1f5ccc0
	void UnRegisterTick();// 0x1f5cca4
	void TickEntity(float DeltaTime);// 0x1f5cc24
	void SetSocketName(FName InName);// 0x1f5cba4
	void SetParentDefineID(ItemDefineID ParentID);// 0x1f5cb18
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x1f5ca40
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x1f5c9b8
	void RevertEntityMeshData();// 0x1f5c9a4
	void RenderEntity();// 0x1f5c988
	void RegisterTick();// 0x1f5c96c
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1f5c8e4
	void PutOnDefaultEquipment(int InSlotID);// 0x1f5c864
	void PrepareEntity();// 0x1f5c848
	void OnPreRender();// 0x1f5c82c
	void OnPostRender();// 0x1f5c810
	void MaskActionDirty(bool bFlag);// 0x1f5c790
	bool IsEntityAvailable(enum VisibilityType);// 0x1f5c708
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1f5c63c
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x1f5c534
	bool HasSomeAction(enum InActionType);// 0x1f5c4b4
	bool HasMainAction();// 0x1f5c48c
	FName GetSocketName();// 0x1f5c444
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1f5c3bc
	ItemDefineID GetParentDefineID();// 0x1f5c368
	MeshData GetMeshData();// 0x1f5c304
	BattleItemHandleBase* GetLoadedHandle();// 0x1f5c2dc
	ItemDefineID GetDefineID();// 0x1f5c288
	void EnterRenderPipeline();// 0x1f5c26c
	void EnterLogicPipeline();// 0x1f5c250
	void DrawOutline(bool bEnable);// 0x1f5c1c8
	bool CreateAndApplyResource();// 0x1f5c198
	void ClearRenderEntity();// 0x1f5c17c
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x1f5c0b0
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1f5bfd8
	void ClearEntity(bool ForceClear);// 0x1f5bf50

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x66c, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x670, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x674, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x678, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x1ff1960
	Actor* GetBindOwner();// 0x1ff193c
	MeshComponent* GetAttachedMeshComponent();// 0x1ff1920
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x1ff1770
	void BindOwner(Actor* Owner);// 0x1ff16f4
	void BindEvent(bool bShowWidget);// 0x1ff166c

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1f5e024

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x231be28
	void SetSocketName(FName InName);// 0x1f5cba4
	void RenderEntity();// 0x1f5c988
	void RemoveParticleEffect();// 0x231be0c
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1f5c8e4
	void PrepareEntity();// 0x1f5c848
	void OnPreRender();// 0x1f5c82c
	void OnPostRender();// 0x1f5c810
	bool IsForceEnableAnim();// 0x231bddc
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1f5c3bc
	ItemDefineID GetDefineID();// 0x1f5c288
	void EnterLogicPipeline();// 0x1f5c250
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1f5bfd8
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x231bd5c
	void ApplyParticleEffect();// 0x21840cc
	void AddWeaponHandleAction();// 0x231bd48

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Actor* PredictActorTemplate;//[Offset: 0x64c, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x650, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x678, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x6a0, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x6c8, Size: 100]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x72c, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x738, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x748, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x758, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x768, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x778, Size: 16]
	PredictProjectilePathResult PredictResult;//[Offset: 0x798, Size: 176]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x848, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x84c, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x850, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x858, Size: 12]
	int RedrawCounter;//[Offset: 0x864, Size: 4]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity);// 0x21041dc
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x2104164

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 4]
	float MaxSimTime;//[Offset: 0x20, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	byte TraceChannel;//[Offset: 0x25, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x34, Size: 12]
	float SimFrequency;//[Offset: 0x40, Size: 4]
	float OverrideGravityZ;//[Offset: 0x44, Size: 4]
	float GravityScale;//[Offset: 0x48, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x4c, Size: 4]
	byte DrawDebugType;//[Offset: 0x50, Size: 1]
	float DrawDebugTime;//[Offset: 0x54, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 136]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x674, Size: 88]
	Vector SplineUpDir;//[Offset: 0x6cc, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d8, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d8, Size: 1]
	byte ForwardAxis;//[Offset: 0x6d9, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x6dc, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x6e0, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x6e4, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x6e8, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 1]
	void UpdateMesh();// 0x4493cf4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x4493c30
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x4493b70
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x4493aac
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x44939e8
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x4493928
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x4493788
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x44936b4
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x44935f0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x449352c
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x449346c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x44933a8
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x44932e4
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x4493224
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4493160
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x449309c
	Vector GetStartTangent();// 0x4493054
	Vector2D GetStartScale();// 0x4493014
	float GetStartRoll();// 0x4492fec
	Vector GetStartPosition();// 0x4492fa4
	Vector2D GetStartOffset();// 0x4492f64
	Vector GetSplineUpDir();// 0x4492f1c
	byte GetForwardAxis();// 0x4492ef4
	Vector GetEndTangent();// 0x4492eac
	Vector2D GetEndScale();// 0x4492e6c
	float GetEndRoll();// 0x21f0c50
	Vector GetEndPosition();// 0x4492e24
	Vector2D GetEndOffset();// 0x4492de4
	float GetBoundaryMin();// 0x4492dbc
	float GetBoundaryMax();// 0x217d534

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x2bbd2f4
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x232776c
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x23276b0
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x2327688
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x2327660
	PlayerController* GetOwnerPlayerController();// 0x2327638
	Pawn* GetOwnerPawn();// 0x2327610
	Controller* GetOwnerController();// 0x23275e8
	Actor* GetOwnerActor();// 0x23275cc

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0xd8, Size: 4]
	byte WeaponType;//[Offset: 0xdc, Size: 1]
	byte weaponTypeNew;//[Offset: 0xdd, Size: 1]
	byte WeaponHoldType;//[Offset: 0xde, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xe0, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xf0, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	int MaxNoGravityRange;//[Offset: 0xfc, Size: 4]
	float LaunchGravityScale;//[Offset: 0x100, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x108, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x110, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	int UnablePeekTipID;//[Offset: 0x118, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x120, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x15c, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x198, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x19c, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1a0, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1ac, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1b0, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1c0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1f0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x220, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x250, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x310, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x340, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x37c, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3b8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x3c0, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xcc, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xd4, Size: 4]
	void UpdateComponentTick();// 0x1fe6e54
	STExtraWeapon* TryGetOwnerWeapon();// 0x231efa8
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x231ef80
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x231eebc
	bool IsWeaponOwnerOBTarget();// 0x231ee94
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x231ee14
	bool IsWeaponLogicComponentTickEnabled();// 0x231edec
	bool IsLocalOrSpectorPlayer();// 0x231edc4
	FString GetWeaponDetailInfo();// 0x231ed04
	byte GetOwnerPawnRole();// 0x231ecdc

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2dc, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x2e8, Size: 12]
	byte ThrowMode;//[Offset: 0x2f4, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x2f8, Size: 4]
	float MaxSimTime;//[Offset: 0x2fc, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x300, Size: 40]
	float GrenadeRadius;//[Offset: 0x328, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x32c, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x338, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x344, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2350, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x235c, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2368, Size: 12]
	delegate OnPlayerInteractiveStateChange;//[Offset: 0x2374, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2380, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x238c, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2398, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x23a4, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x23b0, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x23bc, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x23c0, Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x23c4, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x23c8, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x23cc, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x23d0, Size: 4]
	float IndoorCheckTime;//[Offset: 0x23d4, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x23d8, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x23dc, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e0, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x23e4, Size: 4]
	float fTickDuration;//[Offset: 0x23e8, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x23f0, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2408, Size: 1]
	enum ParachuteState;//[Offset: 0x2418, Size: 1]
	enum LastParachuteState;//[Offset: 0x241a, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x241c, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2420, Size: 1]
	float SwimZDir;//[Offset: 0x2424, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2428, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2429, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x242c, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2430, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2434, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2438, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x243c, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2440, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2444, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2448, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x244c, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2450, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2454, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x2458, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x245c, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2460, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2468, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x24b8, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2508, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2558, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x25c0, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c4, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c5, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x25c8, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x25cc, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d0, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x25dc, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x2638, Size: 4]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264b, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264c, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x2650, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2654, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x2655, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x2658, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x265c, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x2660, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x2664, Size: 72]
	FName FeatureActorName;//[Offset: 0x2700, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2708, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2709, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270a, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x270c, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x2718, Size: 4]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x2720, Size: 12]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x272c, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2738, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2739, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x273a, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x273c, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x2748, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x274c, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2750, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2751, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x2754, Size: 4]
	bool bRecommendSignalRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2761, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2768, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x276c, Size: 12]
	int CurrentActivityID;//[Offset: 0x2778, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x277c, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x2780, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2784, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x2788, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x2798, Size: 12]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x2202ac0
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x22029f4
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x220297c
	void UpdateIndoorState(bool IsInDoor);// 0x22028b4
	void UpdateEnableGoldenSuitCheck();// 0x2202898
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x22027d0
	void TriggerZombieBornSkills();// 0x22027bc
	void TouchCancelSkillLock();// 0x22027a8
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x22026f4
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x21aa3dc
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x22025e4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x2202518
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x2202454
	void SwitchCameraToParachuteOpening();// 0x2202438
	void SwitchCameraToParachuteFalling();// 0x220241c
	void SwitchCameraToNormal();// 0x2202400
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x2202388
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x2bbd2f4
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x2202374
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x2bbd2f4
	void StopCamShake();// 0x2202358
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x22022e0
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x2202268
	void StartCamShake();// 0x220224c
	void ShowNightVisionFrame();// 0x21a90d4
	void ShowConfirmDialogOfMisKill();// 0x21a9040
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x22021cc
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x2202134
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x22020bc
	void SetSpecifiedItemConsumed(int ItemId);// 0x2bbd2f4
	void SetSelfAndVehicleShadow(bool IsShow);// 0x220203c
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x2201f80
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x2201e74
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x2201db0
	void SetParachuteState(enum State);// 0x2201d30
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x2201c64
	void SetFPPDeafultFov(float InFov);// 0x2201bec
	void SetFovInTPPSpringArm(float FieldOfView);// 0x2201b74
	void SetBodyIndoor(bool IsInDoor);// 0x2201af4
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x2201a00
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x22018a4
	void ServerRPCOnOccupiedInteractiveComponent(InteractiveComponentBase* pComponent, bool bIsOccupied);// 0x2201794
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent);// 0x22016e0
	void ServerRPCCoolDownInteractiveComponent(InteractiveComponentBase* pComponent);// 0x220162c
	void ServerOnApplicationactivated(bool bActive);// 0x2201564
	void RPC_Server_OnMiniGameEnd(int Score, int Duration, ActivityActorBase* ActiveActor);// 0x2201420
	void RPC_Server_CheckActivityOverlap(ActivityActorBase* ActiveActor, bool isBeginOverlap);// 0x2201310
	void RPC_Client_NotifyActivityOverlap(ActivityActorBase* ActiveActorn, bool isBeginOverlap);// 0x2201200
	void RPC_Client_CheckedActivityOverlap(ActivityActorBase* ActiveActorn, bool IsOverlaped, bool IsBegin);// 0x2201094
	void ResetCharacter();// 0x21a3934
	void RequestLoadParachuteAnim();// 0x2201078
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x2200fb0
	void RemoveParachuteAnim();// 0x2200f9c
	void ReleaseTrigger(enum Hand);// 0x2200f1c
	void PushTrigger(enum Hand);// 0x2200e9c
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x2200d48
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x2bbd2f4
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x2bbd2f4
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x2bbd2f4
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x2bbd2f4
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x2bbd2f4
	void OnRep_STPlayerController();// 0x2200d34
	void OnRep_ParachuteState(enum State);// 0x2200cb4
	void OnRep_InjuryFreeData();// 0x2200ca0
	void OnRep_CurrentActivityID();// 0x2200c8c
	void OnRep_AngleSightStateChanged();// 0x2200c78
	void OnRep_ActivityAnimationRepData();// 0x2200c64
	void OnRank(int Kills, int Rank);// 0x2200ba8
	void OnPlayerInteractiveStateChange__DelegateSignature(STExtraBaseCharacter* BaseCharacter, ActivityActorBase* ActivityActor, enum Status);// 0x2bbd2f4
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x2200b30
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x2200ab0
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x2bbd2f4
	void OnMiniTreeTriggerServerLogicCPP();// 0x2200a94
	void OnLockUpdateAroundPickupEnd();// 0x2200a80
	void OnLoadParachuteAnimCompleted();// 0x2200a6c
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x2bbd2f4
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x2bbd2f4
	void OnBPStateCheckIn();// 0x2bbd2f4
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x2200960
	void OnAllAvatarEquippedSucc();// 0x220094c
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x22008c4
	void MiniTreeTriggerServerLogic();// 0x2200868
	bool IsSwitchCoolingDownFinish();// 0x2200834
	bool IsSpecifiedItemInCD(int ItemId);// 0x22007ac
	bool IsInLaunchSeat();// 0x220077c
	bool IsGrenadeEmpty();// 0x2200754
	bool IsBodyIndoorFuc();// 0x2200734
	bool IsBodyIndoorCheck();// 0x220070c
	bool IsAllowSyncControllerRotationInActived();// 0x22006e4
	bool IsAllowPickupActor();// 0x22006bc
	void InitAirAttackLocatorComponent();// 0x22006a8
	void HideNightVisionFrame();// 0x219d598
	bool HasParachuteAnimLoaded();// 0x2200680
	void HandleParachuteStateChanged(enum NewState);// 0x2200600
	void HandleParachuteAnimChanged(enum TargetStateType, bool bIsReconnecting);// 0x220053c
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x22003c4
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x220024c
	SpringArmComponent* GetThirdPersonSpringArm();// 0x2bbd2f4
	CameraComponent* GetThirdPersonCamera();// 0x2bbd2f4
	float GetSwimRotateX_Ex();// 0x2200224
	int GetSkillIndexByActivityID();// 0x2bbd2f4
	SpringArmComponent* GetScopeSpringArm();// 0x2bbd2f4
	CameraComponent* GetScopeCamera();// 0x2bbd2f4
	bool GetPlayerVisibile();// 0x22001fc
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x220017c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x219c298
	void GetOnVehicleDelegate__DelegateSignature();// 0x2bbd2f4
	SceneComponent* GetMoveableComp();// 0x2200154
	bool GetIsInDoor();// 0x2200124
	bool GetIsGunADS();// 0x22000f4
	float GetInjuryFreeRate(int BodyPart);// 0x219bca8
	SpringArmComponent* GetFPPSpringArm();// 0x2bbd2f4
	float GetFPPDeafultFov();// 0x22000cc
	CameraComponent* GetFPPCamera();// 0x2bbd2f4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x2bbd2f4
	CameraComponent* GetFirstPersonCamera();// 0x2bbd2f4
	enum[] GetDisallowedStates(int ActivityID);// 0x2bbd2f4
	Vector GetBonePos(FName BoneName);// 0x2200038
	void FreeFallShakeCam();// 0x2200024
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x21fffac
	void EnablePet(bool Enable);// 0x21fff24
	void DynamicCreateComponents();// 0x21fff10
	void DumpCharacterAnimBPVars();// 0x21ffefc
	void DelayRemoveParachuteAnim();// 0x21ffee8
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x21ffe1c
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x21ffd18
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x21ffca0
	void ClearHPUI();// 0x2198224
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x21ffc20
	void CallRefreshBPStateCheckIn();// 0x21ffc0c
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x21ffaa0
	void AnimInstanceCacheParachuteAnimVars();// 0x21ffa8c
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x21ffa04

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xdc, Size: 20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xf0, Size: 20]
	Vector2D AimTargetScreenPos;//[Offset: 0x104, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x110, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x114, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x124, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x128, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x12c, Size: 4]
	FName[] Bones;//[Offset: 0x13c, Size: 12]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x14c, Size: 4]
	void OnUnEquipWeapon();// 0x23187c4
	void OnShoot(STExtraWeapon* Weapon);// 0x231874c
	void OnEquipWeapon();// 0x2318738
	bool IsCurrentWeaponSupportAutoAim();// 0x2318710
	void Init(Controller* Controller);// 0x2318698
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x23185cc
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x23184bc
	bool CheckBuffStun();// 0x2318494
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x23183c8

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xc8, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xcc, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0xd8, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0xdc, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0xe8, Size: 12]
	FName ScreenPlane;//[Offset: 0xf8, Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x100, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x10c, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x118, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x128, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x22801e0
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x2280124
	void StopScreenParticleEffect(byte EffectType);// 0x22800ac
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x227ffa4
	void StopAllScreenParticleEffect();// 0x227ff90
	void StopAllScreenAppearance();// 0x227ff7c
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x227fe38
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x227fd7c
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x227fc28
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x227fafc
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x227fa2c
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x227f9ac
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x227f8ac
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x227f7f0
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x227f690
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x227f4b0
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x227f288
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x227f058
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x227efe0
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x227ef1c
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x227edc4
	void HandleEffectLoadFinish(byte EffectType);// 0x227ed4c
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x227ebe8

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x670, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x6a0, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x6d0, Size: 48]
	void SetActivate(bool _IsActivate);// 0x20d00ac

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x774, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x1fee610

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xc8, Size: 4]
	float AALOpenSensibility;//[Offset: 0xcc, Size: 4]
	float OpenAALFOV;//[Offset: 0xd0, Size: 4]
	int MaxDist;//[Offset: 0xd4, Size: 4]
	int minDist;//[Offset: 0xd8, Size: 4]
	int DangerDist;//[Offset: 0xdc, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xe0, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x108, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x130, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x134, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x138, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x148, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x14c, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x150, Size: 4]
	float ShortDis;//[Offset: 0x154, Size: 4]
	byte ChannelType;//[Offset: 0x158, Size: 1]
	Vector TargetLocation;//[Offset: 0x15c, Size: 12]
	void SetItemExsist(bool bExsist);// 0x1f381c8
	void SetFinalLocation();// 0x1f381b4
	void SetAALFov(bool bOpen);// 0x1f38134
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x1f3801c
	void OnFreeArrowLoadFinsh();// 0x1f38008
	void OnCalledActorLoadFinsh(Vector Location);// 0x1f37f98
	float GetTargetDistance();// 0x1f37f70
	bool GetAALAvaliable();// 0x1f37f48

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x320, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x324, Size: 4]
	int SkillID;//[Offset: 0x328, Size: 4]
	int IconID;//[Offset: 0x32c, Size: 4]
	float AttackAreaRadius;//[Offset: 0x330, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	Character* ClientMainCharacter;//[Offset: 0x3b8, Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x3c0, Size: 8]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool bClientActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	MeshComponent* Mesh;//[Offset: 0x3d0, Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x3d4, Size: 4]
	delegate OnActorReset;//[Offset: 0x3d8, Size: 12]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bUseDSOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	bool bEanbleSimulatedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 1]
	FString actorName;//[Offset: 0x3e8, Size: 12]
	FString ActivityName;//[Offset: 0x3f4, Size: 12]
	int SkillIndex;//[Offset: 0x400, Size: 4]
	enum SkillEntry;//[Offset: 0x404, Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x408, Size: 40]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	int ButtonShowTextID;//[Offset: 0x434, Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x438, Size: 12]
	Object* ButtonShowPic;//[Offset: 0x448, Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x470, Size: 4]
	int CancleButtonShowTextID;//[Offset: 0x474, Size: 4]
	Object* CancleButtonShowPic;//[Offset: 0x478, Size: 40]
	enum[] SpecialInteractivePawnState;//[Offset: 0x4a0, Size: 12]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	bool bEnablePickupInActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 1]
	bool bEnableSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 1]
	bool bButtonShowCheckObstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 1]
	float CoolDownTime;//[Offset: 0x4b0, Size: 4]
	int ConsumeItemType;//[Offset: 0x4b4, Size: 4]
	int ConsumeItemID;//[Offset: 0x4b8, Size: 4]
	int ConsumeItemNum;//[Offset: 0x4bc, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x4c4, Size: 4]
	int NetRegionSize;//[Offset: 0x4c8, Size: 4]
	bool bUseDefautInteractiveBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 1]
	int CodeKey;//[Offset: 0x4d0, Size: 4]
	delegate OnOccupyDelegate;//[Offset: 0x4ec, Size: 12]
	delegate OnCoolDownDelegate;//[Offset: 0x4f8, Size: 12]
	delegate OnUpdateButton;//[Offset: 0x504, Size: 12]
	delegate OnActivityEnableUpdated;//[Offset: 0x510, Size: 12]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x1f27844
	void TriggerSkillEvent(Character* Character);// 0x1f277c4
	void StartOccupied();// 0x1f277b0
	void StartCoolDown();// 0x1f2779c
	void SetEnable(bool bIsEnable);// 0x1f2771c
	void OnRep_bIsOccupied();// 0x1f27708
	void OnRep_bIsCoolingDown();// 0x1f276f4
	void OnRep_bActivityEnable();// 0x1f276e0
	void OnRep_bActived();// 0x1f276cc
	void OnOccupyFinished();// 0x1f276b8
	void OnNotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1f275f4
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x1f274ec
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1f2739c
	void OnCoolDownFinished();// 0x1f27388
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1f27184
	void NotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1f270c0
	bool LocalStartActive(Character* Character);// 0x1f27038
	void LocalReset(Character* Character);// 0x1f26fb8
	bool LocalInterruptActive(Character* Character);// 0x1f26f30
	bool LocalActiveFinished(Character* Character);// 0x1f26ea8
	bool IsOccupied();// 0x1f26e80
	bool IsCoolingDown();// 0x1f26e58
	bool IsConsumeItemEnough();// 0x1f26e30
	bool IsCharaterInActived(Character* InCharacter);// 0x1f26da8
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x1f26c84
	void GetRegionID(out RegionID OutRegionID);// 0x1f26bdc
	bool GetRegionBasedNetConsideration();// 0x1f26bac
	MeshComponent* GetMesh();// 0x1f26b90
	Character* GetMainCharacter();// 0x1f26b68
	byte GetIsWeakNetUpdate();// 0x1f26b38
	int GetConsumeItemNum();// 0x1f26b10
	int GetConsumeItemID();// 0x1f26ae8
	int GetConsumeItemCurCount();// 0x1f26ac0
	Character* GetActivedCharacter();// 0x1f26a94
	void ForceNetConsider();// 0x1f26a78
	bool ClientClickCancleButton(Character* Character, out int OutReason);// 0x1f269a4
	bool ClientClickButton(Character* Character, out int OutReason);// 0x1f268c8
	void CheckedActivityOverlap(Character* Character, bool IsServerOverlaped, bool IsBegin);// 0x1f267ac
	void CheckActivityOverlap(Character* Character, bool IsBegin);// 0x1f266e8
	void BPUpdateInteractiveUI(Character* Character);// 0x1f26668
	void BPUpdateButtonInfo();// 0x2bbd2f4
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x1f26544
	bool BPShowButton(Character* Character, bool bShow);// 0x1f26470
	void BPReset(Character* Character);// 0x1f263f0
	void BPOnCharacterAttached(Character* InCharacter);// 0x1f26370
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x1f2624c
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x1f26160
	bool BPClientClickCancleButton(Character* Character, int Reason);// 0x2bbd2f4
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x2bbd2f4
	bool BPClickButton(Character* Character, int Reason);// 0x1f26094
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x1f25fb8
	bool BPAllowInteractive(Character* Character);// 0x1f25f30
	bool BPAllowClickButton(Character* Character);// 0x1f25ea8
	void BPActiveStateChange();// 0x2bbd2f4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x1f25d84
	bool AllowShowButton(Character* Character, out int Reason);// 0x1f25ca8
	bool AllowInteractive(Character* Character, out int Reason);// 0x1f25bcc
	bool AllowClickButton(Character* Character, out int Reason);// 0x1f25af0

--------------------------------
Class: CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	int[] CustomIntValueArray;//[Offset: 0x3a8, Size: 12]
	bool SetCustomIntValue(int Index, int Value);// 0x1fec6a0
	int GetCustomIntValue(int Index);// 0x1fec620

--------------------------------
Class: DecoratorActor.LuaActor.Actor.Object
	int resID;//[Offset: 0x380, Size: 4]
	int TlogID;//[Offset: 0x384, Size: 4]
	int Health;//[Offset: 0x388, Size: 4]
	int TeamID;//[Offset: 0x38c, Size: 4]
	int IconID;//[Offset: 0x390, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool bDisableCollisionOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	delegate OnHealthChangeNotify;//[Offset: 0x398, Size: 12]
	bool bShowBulletImpactEffectInOnlyAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	void ShowIconInPlayerMap(uint32 PlayerKey);// 0x1ffe178
	void ShowIconInMap();// 0x1ffe164
	bool ShouldTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1ffdfe8
	void SetHealth(int ToHealth);// 0x1ffdf74
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x1ffde64
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x1ffdd28
	void OnRep_Health();// 0x1ffdd14
	void OnDie();// 0x1ffdcf8
	void OnBPRespawned();// 0x1f39efc
	bool IsDead();// 0x1ffdcd0
	void HideIconInMap();// 0x1ffdcbc
	int GetHitBodyType(FString HitPart);// 0x1ffdb54
	int GetActorResId();// 0x1ffdb38
	void EatEffectMulticast(FString DriverKey);// 0x1ffda74
	void Client_OnEatEffect(FString DriverKey);// 0x2bbd2f4
	void BPTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1ffd900

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x320, Size: 60]
	FString LuaFilePath;//[Offset: 0x35c, Size: 12]
	void UnRegistLuaTick();// 0x4f90028
	void RegistLuaTick(float TickInterval);// 0x4f8ffb0

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x158, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x15c, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x168, Size: 8]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x178, Size: 8]
	int CollisionsNum;//[Offset: 0x180, Size: 4]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	float CoolDownTime;//[Offset: 0x188, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x190, Size: 4]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	int SkillID;//[Offset: 0x19c, Size: 4]
	int DebugParameter;//[Offset: 0x1a0, Size: 4]
	void SetEnable(bool bIsEnable);// 0x2087c50
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x2087b8c
	void OnStartedSkill(Character* Character);// 0x1f2cc5c
	void OnResetSkill(Character* Character);// 0x1fc9b9c
	void OnRep_Occupied();// 0x2bbd2f4
	void OnRep_Enabled();// 0x2bbd2f4
	void OnRep_CurrentCharacter();// 0x2bbd2f4
	void OnRep_CoolDown();// 0x2bbd2f4
	void OnFinishedSkill(Character* Character);// 0x1fc9c1c
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x2087a44
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2087848
	bool IsEnabled();// 0x2087820
	int GetInteractiveCharacterNum();// 0x20877f8
	Character* GetCurrentOccupyingCharacter();// 0x20877d0
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x2087704
	bool CheckInteractiveDistanceByCharacter(Character* Character);// 0x2087684
	void BpShowInteractiveUI(InteractiveComponentBase* Component, bool Show);// 0x2bbd2f4
	void BpServerRPCStartCoolDown(Character* Character);// 0x1fc9d1c
	void BpServerRPCSetOccupied(Character* Character, bool bOccupied);// 0x20875b8
	void BpOnClickInteractiveButton(Character* Character, bool bResult);// 0x2bbd2f4
	bool BpAllowToInteract(Character* Character);// 0x2bbd2f4

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x330, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x33c, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x348, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x358, Size: 12]
	float CurrentScale;//[Offset: 0x364, Size: 4]
	int CurActTime;//[Offset: 0x368, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x36c, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	FName SocketBaseTags;//[Offset: 0x380, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x388, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x38c, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x390, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x394, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x398, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x3a4, Size: 12]
	int AttachedNumber;//[Offset: 0x3b4, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x3b8, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x3f4, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x40c, Size: 12]
	enum DropOffLocationType;//[Offset: 0x418, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x41c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x420, Size: 12]
	byte IsDayTime;//[Offset: 0x42c, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x430, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x43d, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x440, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool UseDropFixedPosition();// 0x23146c0
	void StopDancing_Multicast(const Actor*[] Players);// 0x23145cc
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x2314490
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x23143dc
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x23142d4
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x231425c
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x2bbd2f4
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x23141a0
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x23140fc
	void OnStopDancing(out const Actor*[] Players);// 0x2314028
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x2313f10
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x2313e90
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x2bbd2f4
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x2bbd2f4
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x2313df4
	void OnRep_SkeletalAnimationSyncData();// 0x2313de0
	void OnRep_ShowRabbitAnim();// 0x1f39efc
	void OnRep_PawnDoneList();// 0x1f39ea8
	void OnRep_IsDayTime();// 0x1fa4158
	void OnRep_CurrentScaleCPP();// 0x2313dcc
	void OnRep_CurrentScaleBP();// 0x2bbd2f4
	void OnRep_CurrentInteractingPlayerCount();// 0x2313d78
	void OnRep_CurActTimeCPP();// 0x2313d24
	void OnRep_CurActTimeBP();// 0x2bbd2f4
	void OnRep_AttachedNumber();// 0x2313cc4
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x2313b64
	void OnPlayerNumberChanged(int Number);// 0x2bbd2f4
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x2bbd2f4
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x2bbd2f4
	void OnPCCDCleared(PlayerController* PlayerController);// 0x2bbd2f4
	void OnClientCurrentInteractingPlayerCountChanged();// 0x2bbd2f4
	bool IsDropFixedRelativePositionSetUp();// 0x2313b34
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x2313ab4
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x2313a1c
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x2313898
	bool CanTriggertEvent(Pawn* CurPawn);// 0x2bbd2f4
	int CacheAssociatedSkillIndex();// 0x2bbd2f4

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	enum RegionSize;//[Offset: 0x2e1, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x374, Size: 12]
	FName TombName;//[Offset: 0x380, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x38c, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x390, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x398, Size: 24]
	int DeadTime;//[Offset: 0x3b0, Size: 4]
	int BoxLifeSpan;//[Offset: 0x3b4, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x3bc, Size: 12]
	byte AttackRules;//[Offset: 0x3c8, Size: 1]
	Actor* AttachedActor;//[Offset: 0x3cc, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	enum BoxType;//[Offset: 0x3d1, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x3d4, Size: 12]
	uint32 OwnerUniqueID;//[Offset: 0x3e0, Size: 4]
	int TargetPlayerKey;//[Offset: 0x3e4, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x3ec, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	Character* BoxOwner;//[Offset: 0x3f4, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x3f8, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x400, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x408, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	int DropGroupID;//[Offset: 0x410, Size: 4]
	Vector DropStartLocation;//[Offset: 0x414, Size: 12]
	void SwitchToDeadTombBox();// 0x1f39ea8
	void SetVisible(bool IsVisible);// 0x20f98d8
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x20f9770
	void RegisterToPlayerPickUpList();// 0x20f975c
	void RegisterToCurveAnimComponent();// 0x1fe44ec
	void OpenListenUIEvent(bool bOpen);// 0x2bbd2f4
	void OnRep_VisibilityChange();// 0x20f9748
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x20f9734
	void OnRep_ChangeBoxMesh();// 0x1f4cfe0
	void OnRep_BoxLifeSpan();// 0x20f9720
	void OnRep_AttachmentReplication();// 0x20534bc
	void OnRep_AttachedActor();// 0x20f970c
	void OnRefreshItemEffect();// 0x20f96f8
	void HideDeadTombApparence();// 0x1f39ee0
	int GetUniqueInstanceID();// 0x20f96d0
	int GetTombboxLifespan();// 0x20f96a8
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x200cf30
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x20f95fc
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x20f95d0
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x20f94b4
	void GeneratePlayerBackpackWrappers();// 0x20f94a0
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x20f9308
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x20f920c
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x20f90c4
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x20f8f64

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x640, Size: 12]
	enum BoxType;//[Offset: 0x658, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x20e4720
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x20e464c
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x2bbd2f4
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x2bbd2f4
	void OnRep_PickUpDataList();// 0x20e4638
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x2bbd2f4
	PickUpItemData[] GetDataList();// 0x20e45cc
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20e447c

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x394, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3a0, Size: 24]
	int Count;//[Offset: 0x3b8, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x3c0, Size: 12]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	FName OwnerName;//[Offset: 0x3d0, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x3d8, Size: 4]
	float OwnerTime;//[Offset: 0x3dc, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x3e4, Size: 12]
	Actor* AttachedActor;//[Offset: 0x3f0, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x3f4, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x404, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x408, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x430, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x438, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x43c, Size: 4]
	FString ItemValue;//[Offset: 0x440, Size: 12]
	FString ItemCategory;//[Offset: 0x44c, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x460, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x470, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x474, Size: 4]
	int ObjectPoolSize;//[Offset: 0x478, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x480, Size: 4]
	FString EffectPath;//[Offset: 0x484, Size: 12]
	FString DurationTime;//[Offset: 0x490, Size: 12]
	int ItemId;//[Offset: 0x49c, Size: 4]
	Color DefaultColor;//[Offset: 0x4a0, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x4b0, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x530, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x5b0, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x5f0, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x600, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x618, Size: 4]
	int SpotDataIndex;//[Offset: 0x620, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	int DropGroupID;//[Offset: 0x630, Size: 4]
	Vector DropStartLocation;//[Offset: 0x634, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x20e8f1c
	FString ToDetailString();// 0x20e8e54
	void ShowMesh(bool bShow);// 0x20e8dd4
	void ShowActor();// 0x20e8dc0
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x20e8c58
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x20e8bc8
	void SetDefineID(out const ItemDefineID DID);// 0x20e8b38
	void SetCountOnServerAfterSpawn(int _Count);// 0x20e8ac0
	void SetActorToGround(Actor* IgnoreActor);// 0x20e8a0c
	void ServerResetShowActor();// 0x20e89f8
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x20e889c
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x20e87e8
	void RegisterToCurveAnimComponent();// 0x20e87d4
	void PickUpWrapperShow__DelegateSignature();// 0x2bbd2f4
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x2bbd2f4
	void OnWrapperPickedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnRespawnedEvent();// 0x1fa4158
	void OnRep_PickUpColdCountDown();// 0x20e87c0
	void OnRep_Owner();// 0x20e1f4c
	void OnRep_DropGroundEffectInfo();// 0x20e87ac
	void OnRep_AttachmentReplication();// 0x20534bc
	void OnRep_AttachedActor();// 0x20e8798
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x20e8580
	void OnHideActor(bool bHide);// 0x20e84ec
	void OnActorDestroyed();// 0x20e84d0
	void ModifyData(int _Count);// 0x20e8458
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x20e83e0
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x20e8318
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x20e8234
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x20e7edc
	bool HasWrapperContainsAttachment(int AttachmentID);// 0x20e7e54
	StaticMeshComponent* GetPickupMesh();// 0x20e7e2c
	int GetNetGUIDOffsetValue();// 0x20e7e04
	int GetItemType();// 0x20e7dd4
	int GetItemId();// 0x20e7da4
	bool GetHasBeenPickedUp();// 0x20e7d74
	PickUpItemData[] GetDataList();// 0x20e45cc
	void ForceNetUpdate();// 0x20e7d58
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20e447c
	void ColdTimeCountDown();// 0x20e7d44
	void ClientResetShowActor();// 0x20e7d30
	bool CheckPickUpDataIsWeapon();// 0x20e7d08
	void BroadcastResetShowActor();// 0x20e7cac
	void BroadcastDataToAllClients(int Count_New);// 0x20e7bf8
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x20e7b78
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x20e7964

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x370, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x568, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e8, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e8, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4ec, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4fc, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x500, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x504, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x508, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x55c, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x560, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x566, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x270, Size: 4]
	Vector SocketOffset;//[Offset: 0x274, Size: 12]
	Vector TargetOffset;//[Offset: 0x280, Size: 12]
	float ProbeSize;//[Offset: 0x28c, Size: 4]
	byte ProbeChannel;//[Offset: 0x290, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x291, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x291, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x291, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x291, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x291, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x291, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x291, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 1]
	float CameraLagSpeed;//[Offset: 0x294, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x298, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x29c, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2a0, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x4334430
	Rotator GetTargetRotation();// 0x225d424

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x650, Size: 1008]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xa44, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xa50, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa62, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa63, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	Rotator SwimRotate;//[Offset: 0xa68, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa75, Size: 1]
	float C_SwimSpeed;//[Offset: 0xa78, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xa7c, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xa84, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa88, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa89, Size: 1]
	byte C_SeatSpecialType;//[Offset: 0xa8a, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xa8c, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xa94, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xa98, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xa9c, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xaa0, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xaa4, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xaa8, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xaac, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xab0, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xab4, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xab8, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xabc, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xac0, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xac4, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xac8, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xacc, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xad0, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xad4, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xad8, Size: 4]
	enum C_ParachuteState;//[Offset: 0xadc, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xae0, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xaec, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf9, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafa, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafb, Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xb00, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xb04, Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xb08, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xb0c, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xb10, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xb14, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xb18, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xb1c, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xb20, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xb24, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xb28, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xb2c, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb31, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xb34, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xb40, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xb4c, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xb58, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb66, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb67, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6a, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6b, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6e, Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6f, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xb74, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xb78, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7d, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7e, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7f, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xb80, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xb90, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xb98, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xb9c, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbba, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbb, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xbbc, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xbc0, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xbc4, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xbc8, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xbd4, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xbe0, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xbfc, Size: 4]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0xc00, Size: 4]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0xc04, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc11, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0xc14, Size: 4]
	void TryToFireFlareGun();// 0x21846d8
	void TryPlayStandbyAnim();// 0x21846c4
	bool ShouldDestoryParachuteAnimAsset();// 0x218469c
	void SetVelocityZFactor(float NewFactor);// 0x2184624
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x2184560
	void PostCacheParamList(float DeltaSeconds);// 0x2bbd2f4
	void PendingKillParachuteAnim(Object* InObject);// 0x21844e8
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x218442c
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x21843b4
	void HandlePlayerPickUp();// 0x1f5c82c
	FString[] GetAnimUngroupsEntry();// 0x2184258
	FString[] GetAnimSyncGroupsEntry();// 0x21840fc
	void DumpAllProperties();// 0x21840e8
	void DumpAllAnimInstancesInThisWorld();// 0x1f4cfe0
	void ClearStandbyAnimState();// 0x21840cc
	void ClearParachuteAnimVars();// 0x21840b8
	AnimParamList CacheParamList(float DeltaSeconds);// 0x2183f68
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x2183ee8
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x2183e24
	PlayerAnimList CacheAnimVarList();// 0x2183d54
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x2183cdc

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]
	byte C_LODLevel;//[Offset: 0x36b, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x36c, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x370, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x378, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x384, Size: 4]
	byte C_PoseType;//[Offset: 0x388, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x389, Size: 1]
	byte C_WeaponType;//[Offset: 0x38a, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x38b, Size: 1]
	byte C_WeaponState;//[Offset: 0x38c, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x390, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x39c, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x3a0, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x3a4, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x3a8, Size: 4]
	float C_FireAlpha;//[Offset: 0x3ac, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x3b0, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x3b4, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x3b8, Size: 4]
	float PeekFrameRate;//[Offset: 0x3bc, Size: 4]
	float PeekSpeed;//[Offset: 0x3c0, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x3c4, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x3c8, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x3cc, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x3d0, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x3d4, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x3d8, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x3e0, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x3ec, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x3f8, Size: 12]
	Vector C_MoveDir;//[Offset: 0x404, Size: 12]
	Vector C_HurtDir;//[Offset: 0x410, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x41c, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x428, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x434, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x440, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x44c, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x458, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x464, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x470, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x47c, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x488, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x494, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x4a0, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x4ac, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x4b8, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x4c4, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x4d0, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x4dc, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x4e8, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x4f4, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x500, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x50c, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x510, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x520, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x52c, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x530, Size: 12]
	Rotator FloorRotation;//[Offset: 0x53c, Size: 12]
	byte Role;//[Offset: 0x548, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x550, Size: 4]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x554, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x558, Size: 4]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x55c, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x560, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x564, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x568, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x56c, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x570, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x574, Size: 4]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x578, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x57c, Size: 4]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x580, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x584, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x588, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x58c, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x590, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x594, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x598, Size: 4]
	bool C_IsSwitchingProne_Pose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x5a4, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x5a8, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x5ac, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x5b0, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x5b4, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x5b8, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x5bc, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x5c0, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x5c4, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x5c8, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x5cc, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x5d0, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x5d5, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x5e4, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ea, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x5ec, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x5f0, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x5f4, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x5f8, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x5fc, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x600, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x604, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x608, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x60c, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x610, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x614, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x618, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x61c, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x620, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x624, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x628, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x62c, Size: 4]
	enum AnimInstanceType;//[Offset: 0x630, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x634, Size: 4]
	byte LastPoseTypeCache;//[Offset: 0x638, Size: 1]
	int ForceLODLevel;//[Offset: 0x648, Size: 4]
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x2186394
	void RefreshPeekState();// 0x2186380
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x2186300
	void PlayPostReloadWeaponAnimation();// 0x21862ec
	void PlayPostFillGasWeaponAnimation();// 0x21862d8
	void PlayPlayerDeadAnimation();// 0x21862c4
	void PlayAnimationByEventType(byte Type);// 0x218624c
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x21861cc
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x2186108
	void HandlePlayerPickUp();// 0x1f5c82c
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x2186080
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x2bbd2f4
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x2185ed8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x2185e58
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x2185cac
	byte GetRole();// 0x2185c84
	void EnableAnimFlag(enum PlayFlag);// 0x2185c0c
	void DisableAnimFlag(enum PlayFlag);// 0x2185b94
	void ClearStandbyAnimState();// 0x21840cc

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x330, Size: 4]
	FString LuaFilePath;//[Offset: 0x334, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x2bbd2f4
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x227d3ec
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x2185ed8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x2185e58
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x2185cac

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x3d8, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x3dc, Size: 4]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte PoseType;//[Offset: 0x1d, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	enum ParachuteState;//[Offset: 0xf3, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bFreeFallingShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float HandleFolderFactor;//[Offset: 0xfc, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0x100, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bNotReplaceTurnAnimWithReplaceMoveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x64, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x84, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x8c, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x98, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float Rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0xd8, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x114, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x120, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x128, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x130, Size: 4]
	float RotateAngle;//[Offset: 0x134, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x138, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x13c, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x140, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x144, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x148, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x14c, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x150, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x154, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x158, Size: 4]
	void UpdateComponentTick();// 0x1fe6e54
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x1fe6d90
	void DrawSpreadEnd();// 0x1fe6d7c
	void DrawDebugPointEnd();// 0x1fe6d68

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x3d0, Size: 4]
	float BulletFireSpeed;//[Offset: 0x3d4, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x3dc, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x3e0, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x3e4, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x3e8, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x3ec, Size: 12]
	float ShootInterval;//[Offset: 0x3f8, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x3fc, Size: 4]
	float ExtraShootInterval;//[Offset: 0x400, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x404, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x408, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x446, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x447, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x448, Size: 4]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x450, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x454, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x458, Size: 12]
	float BurstShootInterval;//[Offset: 0x464, Size: 4]
	float BurstShootCD;//[Offset: 0x468, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x46c, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x470, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x478, Size: 8]
	FName SilencerSocketName;//[Offset: 0x480, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x488, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x490, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x498, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x4a0, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x4a4, Size: 4]
	byte shootType;//[Offset: 0x4a8, Size: 1]
	int ShootTotalType;//[Offset: 0x4ac, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x4b4, Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x4b8, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x4cc, Size: 20]
	float BaseImpactDamage;//[Offset: 0x4e0, Size: 4]
	float BulletMomentum;//[Offset: 0x4e4, Size: 4]
	float BulletRange;//[Offset: 0x4e8, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x4ec, Size: 4]
	byte ImpactDirType;//[Offset: 0x4f0, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x4f4, Size: 12]
	float RangeModifier;//[Offset: 0x500, Size: 4]
	float ReferenceDistance;//[Offset: 0x504, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x508, Size: 4]
	class DamageType* DamageType;//[Offset: 0x50c, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x510, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x528, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	int InitBulletInClip;//[Offset: 0x544, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	float TraceDistance;//[Offset: 0x54c, Size: 4]
	float MaxValidHitTime;//[Offset: 0x550, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x554, Size: 60]
	float MaxDamageRate;//[Offset: 0x590, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x594, Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x5d4, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x5d8, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x630, Size: 8]
	float DamageImpulse;//[Offset: 0x638, Size: 4]
	byte ReloadType;//[Offset: 0x63c, Size: 1]
	float PreFireTime;//[Offset: 0x640, Size: 4]
	float PostFireTime;//[Offset: 0x644, Size: 4]
	float PostReloadTime;//[Offset: 0x648, Size: 4]
	float ReloadDurationStart;//[Offset: 0x64c, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x650, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x654, Size: 4]
	float ReloadTime;//[Offset: 0x658, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x65c, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x660, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x664, Size: 4]
	float ReloadRate;//[Offset: 0x668, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x670, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x678, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x684, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 1]
	float DropDuration;//[Offset: 0x68c, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x694, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x698, Size: 152]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x730, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x740, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x7a4, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x7a8, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x7ac, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x7b0, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x7f4, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x7f8, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x7fc, Size: 4]
	float GameDeviationFactor;//[Offset: 0x800, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x804, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x808, Size: 4]
	byte CrossHairType;//[Offset: 0x80c, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x810, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x814, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x818, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x81c, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x828, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x830, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x838, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x840, Size: 8]
	float WeaponBodyLength;//[Offset: 0x848, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x84c, Size: 12]
	float WeaponAimFOV;//[Offset: 0x85c, Size: 4]
	float WeaponAimInTime;//[Offset: 0x860, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x864, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x868, Size: 4]
	float GameMotionYawRate;//[Offset: 0x86c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x870, Size: 4]
	float ForegripParam;//[Offset: 0x874, Size: 4]
	float MagParam;//[Offset: 0x878, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x880, Size: 4]
	byte SightType;//[Offset: 0x884, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x888, Size: 4]
	byte SightVisionType;//[Offset: 0x88c, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x890, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x8a8, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x8ac, Size: 4]
	float RecoilKickADS;//[Offset: 0x8b0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x8b4, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x8b8, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	enum ReleaseFireType;//[Offset: 0x8bd, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x8c0, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x8c4, Size: 4]
	float AnimationKick;//[Offset: 0x8c8, Size: 4]
	int ReloadAnimSlot;//[Offset: 0x8cc, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0x8d4, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0x8dc, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x8e0, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0x8e4, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0x8f0, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0x8fc, Size: 12]
	int RearSightRotIndex;//[Offset: 0x908, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0x910, Size: 4]
	byte[] CoronaEffectCfg;//[Offset: 0x9d0, Size: 12]
	ItemDefineID GetBulletType();// 0x21361a0

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2ec, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2f4, Size: 4]
	float LaunchGravityScale;//[Offset: 0x2f8, Size: 4]
	int PunctureTimes;//[Offset: 0x2fc, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x300, Size: 4]
	class DamageType* DamageType;//[Offset: 0x304, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x308, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x310, Size: 4]
	Vector RootScale;//[Offset: 0x314, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	Vector ShootDir;//[Offset: 0x324, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x334, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x420, Size: 4]
	delegate OnResetBullet;//[Offset: 0x424, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x430, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x43c, Size: 12]
	delegate OnRecycleBullet;//[Offset: 0x448, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x454, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x458, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x508, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x50c, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x518, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x51c, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	int MaxTraceTimes;//[Offset: 0x524, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x2bbd2f4
	void ReloadNoEncodeAttr();// 0x1fa4158
	void OnShowBulletEffect();// 0x2bbd2f4
	void OnRecycleBulletDelegate__DelegateSignature();// 0x2bbd2f4
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1fa539c
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x2bbd2f4
	void OnImpact(out const HitResult _ImpactResult);// 0x1fa52f8
	bool NeedCheckBulletFlySound();// 0x225065c
	void LaunchBulletDelegate__DelegateSignature();// 0x2bbd2f4
	float GetMaxBulletFlySpeed();// 0x212e26c
	Controller* GetInstigatorControllerSafe();// 0x2250634
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x225060c
	bool ClientVerifyBlock(out Vector MuzzlePos, out Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x225049c

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x168, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x1fc5478
	void ResetTickDelay();// 0x1fc545c
	void IgnoreBounceReflectOnce();// 0x1fc5440
	void ForceStop();// 0x1fc542c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x100, Size: 4]
	float MaxSpeed;//[Offset: 0x104, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 1]
	float PreviousHitTime;//[Offset: 0x10c, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x110, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x11c, Size: 4]
	float Buoyancy;//[Offset: 0x120, Size: 4]
	float Bounciness;//[Offset: 0x124, Size: 4]
	float Friction;//[Offset: 0x128, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x12c, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x130, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x13c, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x446ac4c
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x446abd4
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2bbd2f4
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2bbd2f4
	Vector LimitVelocity(Vector NewVelocity);// 0x446ab40

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x2dc, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x318, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x31c, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x320, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x324, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x328, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x32c, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x330, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x334, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x338, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x33c, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x340, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x378, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x380, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x384, Size: 4]
	AkAudioEvent* DefaultSound;//[Offset: 0x388, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x38c, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x390, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x394, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x398, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x39c, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3a0, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3a4, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3a8, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3ac, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3b0, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3b4, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x3f4, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x3f8, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x414, Size: 28]
	DecalData DirtDecal;//[Offset: 0x430, Size: 28]
	DecalData WaterDecal;//[Offset: 0x44c, Size: 28]
	DecalData MetalDecal;//[Offset: 0x468, Size: 28]
	DecalData WoodDecal;//[Offset: 0x484, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4a0, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4bc, Size: 28]
	DecalData FleshDecal;//[Offset: 0x4d8, Size: 28]
	DecalData SteelDecal;//[Offset: 0x4f4, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x510, Size: 28]
	DecalData SandDecal;//[Offset: 0x52c, Size: 28]
	DecalData ClothDecal;//[Offset: 0x548, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x564, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x580, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x59c, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5b8, Size: 28]
	DecalData StoneDecal;//[Offset: 0x5d4, Size: 28]
	DecalData SnowDecal;//[Offset: 0x5f0, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x60c, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x628, Size: 28]
	DecalData LeafDecal;//[Offset: 0x644, Size: 28]
	DecalData CarDecal;//[Offset: 0x660, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x67c, Size: 28]
	DecalData IceDecal;//[Offset: 0x698, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6c0, Size: 240]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7b4, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7b8, Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7e0, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x85c, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x860, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 1]
	void TimerHideDecal();// 0x217f800
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x217f60c
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x217f50c
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x217f370

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector VictimLocation;//[Offset: 0x24, Size: 12]
	Vector BulletPos;//[Offset: 0x30, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte HitBodyType;//[Offset: 0x78, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 48]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x270, Size: 4]
	int SortOrder;//[Offset: 0x274, Size: 4]
	float FadeScreenSize;//[Offset: 0x278, Size: 4]
	float FadeStartDelay;//[Offset: 0x27c, Size: 4]
	float FadeDuration;//[Offset: 0x280, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 1]
	Vector DecalSize;//[Offset: 0x288, Size: 12]
	void SetSortOrder(int Value);// 0x4379e10
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4379d98
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4379c90
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4379c18
	float GetFadeStartDelay();// 0x4379bf0
	float GetFadeDuration();// 0x4379bc8
	MaterialInterface* GetDecalMaterial();// 0x4379ba0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4379b70

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 72]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48, Size: 72]
	float followTimeMax;//[Offset: 0x90, Size: 4]
	float MaxAngle;//[Offset: 0x94, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float RangeRate;//[Offset: 0x4, Size: 4]
	float SpeedRate;//[Offset: 0x8, Size: 4]
	float RangeRateSight;//[Offset: 0xc, Size: 4]
	float SpeedRateSight;//[Offset: 0x10, Size: 4]
	float CrouchRate;//[Offset: 0x14, Size: 4]
	float ProneRate;//[Offset: 0x18, Size: 4]
	float DyingRate;//[Offset: 0x1c, Size: 4]
	float DriveVehicleRate;//[Offset: 0x20, Size: 4]
	float InVehicleRate;//[Offset: 0x24, Size: 4]
	float FreeFallRate;//[Offset: 0x28, Size: 4]
	float OpeningRate;//[Offset: 0x2c, Size: 4]
	float LandingRate;//[Offset: 0x30, Size: 4]
	float adsorbMaxRange;//[Offset: 0x34, Size: 4]
	float adsorbMinRange;//[Offset: 0x38, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 152]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd8, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xdc, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xe0, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x150, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1b4, Size: 68]
	void OnWeaponStopFire();// 0x1fc5c10
	void OnWeaponStartFire();// 0x1fc5bfc
	void OnWeaponShoot();// 0x1fc5be8
	void GetDataFromWeaponEntity();// 0x1fc5bd4
	Vector GetCurRecoilInfo();// 0x1fc5b8c
	float GetCurDeviation();// 0x1fc5b64
	void CheckComponentTick();// 0x1fc5b50

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x207cdbc
	void SetHidden(bool bIsHidden);// 0x207cd34
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x207cac4
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x207c930
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x207c7dc
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x207c6d0
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x207c244
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x207bad8
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x207b6ac
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x207b5f0
	void Draw(float DeltaTime);// 0x1fc94b4
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x207b554

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	Vector MarkerPosition;//[Offset: 0x384, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x394, Size: 116]
	Texture2D* HUDMainTexture;//[Offset: 0x408, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x40c, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x410, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x418, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x424, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x43c, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x440, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x4a4, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x4b8, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4cc, Size: 20]
	CanvasIcon Marker;//[Offset: 0x4f4, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x508, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x50c, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x520, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x22850c0
	void OnAsyncLoadingFinished();// 0x22850ac
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x2284fe0
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x2284f4c
	LinearColor GetColorByTeamID(int TeamID);// 0x2284eb8
	void EnableCrosshair(bool bEnable);// 0x2284e3c
	void DrawScreenString(FText Text, float X, float Y);// 0x2284b0c
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x2284930

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float AddSpreadScale;//[Offset: 0x14, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x18, Size: 4]
	float DefaultOffset;//[Offset: 0x1c, Size: 4]
	float DefaultAlpha;//[Offset: 0x20, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x24, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x4c, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x68, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x2329a98
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x232a0b8

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x2329a98
	void ProcessTriggerEvent(enum Event);// 0x2135a3c

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xd8, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xdc, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0xe0, Size: 60]
	WeaponStateBase* GetCurrentState();// 0x2329170
	byte GetCurrentFreshWeaponStateType();// 0x2329148

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xd8, Size: 12]
	delegate OnEndState;//[Offset: 0xe4, Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0xf1, Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x344, Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x206d590
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x206d508
	FString GetItemAvatarHandlePath(int ItemId);// 0x2bbd2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x2bbd2f4
	int GetDefaultAvatarID(int InAvatarID);// 0x2bbd2f4
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x206d3cc

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x1bc, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x1d0, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x1ec, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x1f0, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x2a8, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x2ac, Size: 4]
	int itemType;//[Offset: 0x2b0, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x2b8, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x2e0, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x308, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x2bbd2f4
	void SyncChangeItemAvatar(int InItemID);// 0x208b26c
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x208b164
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x208b05c
	void ResetItemAvatar();// 0x208b048
	void RequestDownloadItemInBattle(int InItemID);// 0x1f58234
	void PreChangeItemAvatar(int InItemID);// 0x208afc8
	void OnRep_ItemAvatarChanged();// 0x208afb4
	bool IsValidAvatar();// 0x208af8c
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x208af5c
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x208ae80
	MeshComponent* GetItemBodyMesh();// 0x208ae64
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x1fa4014
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x1f57f38
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x208ad28
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x208ac5c
	void AsyncChangeItemAvatar(int InItemID);// 0x208abdc
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x208aacc
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x208a9cc
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x206d3cc

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xa0, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xb0, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd8, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x100, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f6fd5c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f6f938
	bool HandleDrop(int InCount, enum Reason);// 0x1f6f354
	bool HandleDisuse(enum Reason);// 0x1f608bc
	BackpackComponent* GetBackpackComponent();// 0x1f722e8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1f72224

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x114, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x120, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x12c, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x138, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x144, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x150, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x15c, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x168, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x174, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x180, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x18c, Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x198, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x1a4, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x1b0, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x1bc, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x1c8, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x1e0, Size: 24]
	BattleItemData[] CachItemList;//[Offset: 0x1f8, Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x204, Size: 24]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x224, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x230, Size: 60]
	int CapacityThreshold;//[Offset: 0x26c, Size: 4]
	float Capacity;//[Offset: 0x270, Size: 4]
	float OccupiedCapacity;//[Offset: 0x274, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x278, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x27c, Size: 4]
	int virtualitemid;//[Offset: 0x290, Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x298, Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x2a4, Size: 12]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x2bc, Size: 12]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x2cc, Size: 12]
	FString LuaFilePath;//[Offset: 0x2d8, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x278a58c
	float UpdateCapacity();// 0x1fd7340
	void UnlockUpdateItemListReceive();// 0x278a578
	void UnequipItem(ItemDefineID DefineID);// 0x278a4f0
	void TryMergeItemHandles(ItemDefineID DefineID, enum InItemStoreArea);// 0x278a424
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x278a300
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x278a214
	void ServerSetShowBounty(bool bInShowBounty);// 0x278a14c
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x278a008
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x2789ed8
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x2789db4
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x2789d1c
	void ReceiveItemList();// 0x21359a8
	void ReceiveCapacity();// 0x2175bfc
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x27899d4
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x27896d4
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x278938c
	void PickupBattleItemOnPlane();// 0x2789378
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x2789078
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x2788d78
	void OnRep_specialCountLimit();// 0x2788d64
	void OnRep_ItemListNet();// 0x2788d50
	void OnRep_ItemList();// 0x2788d3c
	void OnRep_Capacity();// 0x2788d28
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x2788c98
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x2788c08
	void NotifyItemListUpdated();// 0x21496ec
	void NotifyCapacityUpdated();// 0x2788bec
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x2788b54
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x2788a90
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x27889d4
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x2788920
	void ModifyAimNotAutoUse(bool bAdd);// 0x2788858
	void LockUpdateItemListReceive();// 0x2788844
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x2788680
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x2788600
	bool IsItemExist(out const ItemDefineID DefineID);// 0x2788560
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x2788530
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x278846c
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x27883a8
	bool IsAutoUse(int ItemId);// 0x2bbd2f4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x27882e4
	bool HasTagSub(int ItemId, out const FName TagName);// 0x2bbd2f4
	bool HasItemBySubType(int SubType);// 0x2788264
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x27881d4
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x2788110
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x2787fa8
	World* GetWorld_BP();// 0x2787f80
	int GetUnEquipItemNumByItemId(int ItemId);// 0x2787f00
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x2787e60
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x2787dd0
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x2787bfc
	int GetItemSubType(int ItemId);// 0x2bbd2f4
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x2787a8c
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x2787a54
	ItemHandleBase*[] GetItemHandleList();// 0x27879e4
	int GetItemCountByType(int InItemType);// 0x2787964
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x27878e4
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x2787828
	float GetItemAssociateWeights(BattleItemData InItemData);// 0x2787764
	BattleItemData GetFirstItemBySubType(int SubType);// 0x27876b8
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x27875fc
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x2787548
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x27873f0
	enum GetAIPickupType(int ItemId);// 0x2787368
	void ForceNetUpdate();// 0x20e7d58
	void EquipItem(ItemDefineID DefineID);// 0x27872e0
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x27871c0
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x27870e4
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x278704c
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x2786fb4
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x2786ee0
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x2786e60
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x2786dc4
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x2786d28
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x2786c10
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2786af8
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x2786a24
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x2786944
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x278682c
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x278670c
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x2786674
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x2786598
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int Count);// 0x2786488
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x27863ec
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x27862dc
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x27861cc
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x27860f0
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x2785e50

--------------------------------
Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo pickupInfo;//[Offset: 0x18, Size: 72]
	enum Reason;//[Offset: 0x60, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x61, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x680, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x6bc, Size: 60]
	int gender;//[Offset: 0x6f8, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x6fc, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x708, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x780, Size: 60]
	int HeadAvatarID;//[Offset: 0x7d0, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x7d4, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x7ec, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x828, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x834, Size: 60]
	int[] ignoreSlots;//[Offset: 0x870, Size: 12]
	int WholeBodyModelID;//[Offset: 0x87c, Size: 4]
	int CurrentClothID;//[Offset: 0x880, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x884, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x894, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x8d0, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x90c, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x948, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x984, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0x9c0, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0x9cc, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0x9d8, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xa14, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xa18, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xa1c, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xa20, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xa2c, Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0xa38, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xa40, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xa80, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xab8, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae3, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xae8, Size: 4]
	float CutPlaneW;//[Offset: 0xaec, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xb10, Size: 4]
	int TypeToInt(enum InSlotType);// 0x1fd0438
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x1fd03b8
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1fd027c
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1fd01a8
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1fd00d4
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1fcffb4
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x1fcfe3c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1fcfd18
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x1fcfca0
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x1fcfb8c
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x1fcfa50
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x1fcf93c
	void SetAvatarGender(int AGender);// 0x1fcdf08
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x1fcf880
	void SetAllMeshCharMode(bool bMainChar);// 0x1fcf800
	void ResetOnReCycle();// 0x1fcf7ec
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x1fcf730
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x1fcf6b0
	void ResetAllAnimDynamics();// 0x1fcf694
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1fcf5c8
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x1fcf550
	void RemoveClothParticleEffect(int SlotID);// 0x1fcf4d8
	void RemoveAttachMesh(int SlotID);// 0x1fcf460
	void ProcessClothSuits();// 0x1fcf444
	void ProcessChangedVehicleSeat();// 0x2bbd2f4
	void ProcessAvatarRectify();// 0x1fcf428
	void PreProcessBeforeLoadMesh();// 0x1fcf40c
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x2bbd2f4
	void PostProcessAfterLoadMesh();// 0x1fcf3f0
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x1fcf324
	void OnRep_EnableClothPlaneCut();// 0x1fcf310
	void OnRep_BodySlotStateChangedInternal();// 0x1fcf2fc
	void OnRep_BodySlotStateChanged();// 0x1fcf2e0
	void OnPlayerLeaveState(enum State);// 0x1fcf268
	void OnPlayerEnterState(enum State);// 0x1fcf1f0
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1fcf11c
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1fcf048
	void OnEnterOrLeaveVehicle();// 0x2bbd2f4
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1fcef28
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bbd2f4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1fcedfc
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1fced20
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1fcebe8
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x1fceadc
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bbd2f4
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bbd2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1fcea5c
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x1fce944
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles);// 0x1fce82c
	bool NeedUseUpgradeMat(int OriginID);// 0x2bbd2f4
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1fce704
	bool IsWearingAvatarNeedParachuteWind();// 0x2bbd2f4
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x1fce5dc
	bool IsTeammate();// 0x1f58130
	bool IsSelf();// 0x1f580d8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1fce4e0
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1fce3e4
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x1fce364
	bool IsNeedModifyVehicle(int TemplateID);// 0x1fce2e4
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1fce218
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1fce0e8
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x1fce024
	bool IsCutPlaneOnVehicleOpen();// 0x2bbd2f4
	enum IntToType(int InSlotID);// 0x1fcdfb0
	void InitMasterComponent();// 0x1fcdf9c
	void Initialize();// 0x1fcdf80
	void InitialAvatarParam(int AGender);// 0x1fcdf08
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x1fcde90
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x1fcdd90
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1fcdcac
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x2bbd2f4
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x1fcdc14
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1fcdb38
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x1fcdac0
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x1fcda48
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1fcd96c
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1fcd890
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x1fcd7dc
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1fcd6cc
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x1fcd618
	int GetRepalceIDOnVehicle(int OriginID);// 0x2bbd2f4
	enum GetPendantSlotType();// 0x1fcd5e8
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1fcd560
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x1fcd49c
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack, bool bPreferUpgrade);// 0x1fcd39c
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x1fcd31c
	int GetEquipmentSkinItemID(int InItemID);// 0x1fcd294
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x1fcd19c
	int[] GetDefaultBodyItemIDList();// 0x1fcd0dc
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x1fcd008
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x1fccf34
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x1fcce2c
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x2bbd2f4
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x1fccd24
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x1fccc60
	int GetAvatarIDBySlotID(int SlotID);// 0x1fccbe0
	enum GetAttachPartSlotType();// 0x1fccbb0
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1fccb28
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x1fcc9a4
	void GetAllEquipItems(out int[] EquipItems);// 0x1fcc8d8
	void GenerateVehicleTemplateConfig();// 0x2bbd2f4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x2bbd2f4
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x1fcc860
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x1fcc7a4
	bool EnableEquipAvatarPendantFeature();// 0x1fcc77c
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x1fcc6a8
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x2bbd2f4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x2bbd2f4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1fcc5c4
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x1fcc52c
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x1fcc4a4
	bool CheckIsHiddenByOther(int InItemResID);// 0x1fcc424
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1fcc350
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x2bbd2f4
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1fcc294
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1fcc1d8
	void ApplyMeshCompCollision(int SlotID);// 0x1fcc160
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x1fcc094
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1fcbfd8
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x1fcbe90
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1fcbdd4
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x1fcbd08
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x1fcbc88

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x3c4, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x400, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x43c, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x478, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x4b4, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x4c0, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x4cc, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x4d8, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x4e8, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x58c, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x590, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x5ac, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x5b8, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x5f4, Size: 4]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1fd027c
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1fd01a8
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1fd00d4
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1fcfd18
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x2149708
	void ResetSlotSyncData();// 0x21496ec
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x21495b8
	void RequestSyncLoadMeshes();// 0x21495a4
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1f58160
	void RequestAsyncLoadMeshes();// 0x2149590
	void RequestAsyncLoadHandles();// 0x214957c
	void RemoveEquippedAvatar(int InSlotID);// 0x21494fc
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x2149474
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x2149364
	void ReloadAllLogicAvatar(enum ReloadType);// 0x21492e4
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x2149264
	bool PutOnEquipmentByResID(int resID);// 0x21491dc
	bool PutOffEquimentByResID(int resID);// 0x2149154
	void PreProcessBeforeLoadMesh();// 0x1fcf40c
	void PostProcessAfterLoadMesh();// 0x1fcf3f0
	void OnSyncLoadMeshesDone();// 0x2149140
	void OnRep_BodySlotStateChanged();// 0x1fcf2e0
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1fcf048
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x2bbd2f4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1fcedfc
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x2bbd2f4
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x2bbd2f4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x2bbd2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1fcea5c
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x214906c
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x2148f98
	void OnAllAvatarHandleLoadedDoneSync();// 0x2148f84
	void OnAllAvatarHandleLoadedDone();// 0x2148f70
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1fce704
	bool IsValidStateToRequestDownload();// 0x2148f48
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x2148e7c
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1fce218
	bool IsItemHasEquipped(int InItemID);// 0x2144774
	bool IsEnableItemDownload(int ItemId);// 0x2bbd2f4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x214463c
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1ff2b78
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x2148df4
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x2148d30
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1fcd6cc
	enum GetMeshTypeBySlot(int InSlotID);// 0x2148cb0
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x2148c30
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1fcd560
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x2148bc0
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x2148ab0
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x21489a0
	AvatarEntityFactory* GetEntityFactory();// 0x2148970
	SoftObjectPath GetBatchDefaultBodyPath();// 0x2bbd2f4
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x214888c
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x2148784
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1fccb28
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x2148674
	int GetAdvanceVehicleInsideSlotID();// 0x2148644
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x2bbd2f4
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x1fcc6a8
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1fcc5c4
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x2148580
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x2148398
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1fcc350
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x214822c
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x214811c
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x2bbd2f4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1f57cc0

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x1bc, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x1f8, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x234, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x24c, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x258, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x264, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x270, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x27c, Size: 12]
	int itemType;//[Offset: 0x288, Size: 4]
	enum CustomType;//[Offset: 0x28c, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x290, Size: 60]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 1]
	int SubSlotStartNum;//[Offset: 0x2d8, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x2dc, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x2e0, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x3a0, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x3b0, Size: 12]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x2145370
	void RemoveForceEquipItem(int SlotID);// 0x21452f8
	void RemoveAllEquippedItem();// 0x21452e4
	void OnRep_BodySlotStateChanged();// 0x1fcf2e0
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1fcf11c
	void OnHandleUnequipSlot(int InSlotID);// 0x214526c
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x21451c4
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x214511c
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1fcef28
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x2bbd2f4
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1fced20
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1fcebe8
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bbd2f4
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bbd2f4
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x2bbd2f4
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x214500c
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x2144efc
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x2144e30
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x2144d20
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x2144c10
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x2144b4c
	int MakeStateInfo(out const int[] InSlotDesc);// 0x2144a78
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x21449ac
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1fce4e0
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x21448c8
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1fce0e8
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x21447f4
	bool IsEquippedItemID(int InItemID);// 0x2144774
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x21446dc
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x214463c
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x21445a4
	bool HandleUnequipSlot(int InSlotID);// 0x2144524
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x214448c
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x21442ac
	void HandleItemResetOrderDesc();// 0x2144298
	void HandleItemResetOperation();// 0x2144284
	void HandleItemReplaceRelation();// 0x2144270
	void HandleItemHideRelation();// 0x214425c
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x2144160
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x2143fb8
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x2143e10
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x2143d34
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x2143c1c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x2143a74
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x21438cc
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x21437f0
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x21436fc
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x2143664
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x21435c4
	enum GetForceHideState(int InSlotID);// 0x214353c
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x214340c
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x2143378
	int GetAvatarSlotID(int InSubSlotID);// 0x21432f8
	void ClientPostProcessViewDataMiddle();// 0x21432dc
	void ClientPostProcessViewDataBefore();// 0x21432c0
	void ClientPostProcessViewDataAfter();// 0x21432a4
	void ClientBuildAvatarRelationData();// 0x2143290
	void ClientBodySlotStateChanged();// 0x214327c
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x2143134
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x2142f54
	bool BPClientPostProcessViewDataMiddle();// 0x2131654
	bool BPClientPostProcessViewDataBefore();// 0x2142f24
	bool BPClientPostProcessViewDataAfter();// 0x1f26b38
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x2142e24

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x1fe9e80
	void AsyncLoadCustomAssetDone();// 0x1fe9e6c
	bool ApplyCustomInfo();// 0x1fe897c

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x1fe9af4
	MeshComponent* GetOwnerMeshComp();// 0x1fe9acc
	ActorComponent* GetOwnerComp();// 0x1fe9aa4
	bool ClearCustomInfo();// 0x1fe89c0
	bool ApplyCustomInfo();// 0x1fe897c

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x1f71358
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1f7129c

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x1f70c88
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x1f70b80
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x1f70a6c
	CharacterAvatarComponent2* GetOwnerComponent();// 0x1f70a44

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x1f71bbc
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1f71b00
	bool IsPatternNumMode();// 0x1f71ad8
	void InitPatternNumID(int InNumID);// 0x1f71a64
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x2bbd2f4

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6c, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AssetPackage

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x9f, Size: 1]
	enum SubSlot;//[Offset: 0xa0, Size: 1]
	enum specialType;//[Offset: 0xa1, Size: 1]
	enum ForceMeshType;//[Offset: 0xa2, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xa3, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xa4, Size: 60]
	MeshPackage MeshPack;//[Offset: 0xe0, Size: 656]
	MeshPackage replacedMeshPack;//[Offset: 0x370, Size: 656]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x600, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x60c, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x618, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x624, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x630, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x63c, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x648, Size: 4]
	int ItemCapacity;//[Offset: 0x64c, Size: 4]
	int Durability;//[Offset: 0x650, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x65c, Size: 36]
	enum hideBoneSlot;//[Offset: 0x680, Size: 1]
	FName hideBoneName;//[Offset: 0x688, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x690, Size: 12]
	enum HideBoneType;//[Offset: 0x69c, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x6a0, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x6dc, Size: 12]
	int PendantConfigIndex;//[Offset: 0x6e8, Size: 4]
	float PendantScale;//[Offset: 0x6ec, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x6f0, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x6f4, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x700, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x708, Size: 72]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x750, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x75c, Size: 12]
	void SetItemDurability(int InDurability);// 0x1f700a0
	void SetItemCapacity(int InCapacity);// 0x1f70028
	void PreLocalHandleDisuse();// 0x1f70014
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x1f6fe88
	bool HasCustomInfo();// 0x1f6fe60
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f6fd5c
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x1f6fc44
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f6f938
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x1f6f7f4
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x1f6f6f4
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x1f6f57c
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x1f6f4b0
	bool HandleEnable(bool bEnable);// 0x1f6f420
	bool HandleDrop(int InCount, enum Reason);// 0x1f6f354
	bool HandleDisuse(enum Reason);// 0x1f608bc
	BackpackComponent* GetBackpackComponent();// 0x1f6f32c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x1f6f1d4
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x1f6f14c
	void AutoEquipChips();// 0x1f5cca4

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]
	MaterialInterface* maleUpgradeMat;//[Offset: 0x228, Size: 40]
	MaterialInterface* femaleUpgradeMat;//[Offset: 0x250, Size: 40]
	MaterialInterface* upgradeBaseMat;//[Offset: 0x278, Size: 4]

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x180, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x118, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x154, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FName SlotName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x1f60c6c
	void UnRegisterTick();// 0x1f60c50
	void TickEntity();// 0x1f5c96c
	void SetSocketName();// 0x1f5c17c
	void SetParentDefineID(ItemDefineID ParentID);// 0x1f60bc4
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x1f60aec
	void RevertEntityMeshData();// 0x1f60ad8
	void RenderEntity(out SoftObjectPath SoftPath);// 0x1f609fc
	void RegisterTick();// 0x1f609e0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1f5fa54
	void PutOnDefaultEquipment(enum SlotType);// 0x1f60960
	void OnPostRender();// 0x1f60944
	bool IsEntityAvailable(enum VisibilityType);// 0x1f608bc
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1f607f0
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x1f606e8
	enum GetMeshType();// 0x1f606b8
	MeshData GetMeshData();// 0x1f60654
	BattleItemHandleBase* GetLoadedHandle();// 0x1f6062c
	ItemDefineID GetDefineID();// 0x1f605d8
	void EnterRenderPipeline();// 0x1f605bc
	void EnterLogicPipeline();// 0x1f605a0
	void DrawOutline(bool bEnable);// 0x1f60518
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x1f60434
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x1f60368
	void ClearEquipmentLogic(bool putDefault);// 0x1f602e0
	void ClearEntity(bool ForceClear);// 0x1f60258
	void ApplyAnimation();// 0x1f6023c
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x1f601bc

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1f5e024

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0xd8, Size: 24]
	FName LogicSocket;//[Offset: 0xf0, Size: 8]
	FName AttachSocket;//[Offset: 0xf8, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x100, Size: 1]
	float AIMinAttackDist;//[Offset: 0x104, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x108, Size: 4]
	float AIAttackDist;//[Offset: 0x10c, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x2328b8c
	int GetAvailableBulletsNumInBackpack();// 0x2328b64

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xd8, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xe4, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x140, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	void HandleOnWeaponStopFire();// 0x1fc4428
	void HandleOnWeaponStartFire();// 0x1fc4414
	bool CheckCloseDSTick();// 0x1fc43ec
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x1fc4254

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xd8, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xe0, Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	float DrawShootLineTime;//[Offset: 0xec, Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xf4, Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0xf8, Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0xfc, Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x100, Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x104, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x108, Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x110, Size: 4]
	delegate OnShoot;//[Offset: 0x114, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x120, Size: 4]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x414, Size: 12]
	void VehicleShoot();// 0x22514c0
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x2251348
	void ShootDelegate__DelegateSignature();// 0x2bbd2f4
	void ReInitWeaponOwnerData();// 0x2251334
	void OnWeaponClipMaxBulletChanged();// 0x2251320
	void OnWeaponBulletChanged();// 0x225130c
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x2bbd2f4
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x2bbd2f4
	void LocalShowDamageFloatingText(Actor* AttackWeaponOwner, Actor* VictimeActor, float Damage, byte HitBodyType, Vector ImpactPoint);// 0x2251178
	float GetDamageAfterModify(float Damage, out const DamageEvent DamageEvent, Actor* AttackActor, Actor* VictimActor);// 0x2251004
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x2250f2c
	bool CheckShootState();// 0x20d1dbc
	Vector CalcShootTargetLocByStartAndRot(Vector Start, Rotator ShootRot, out HitResult OutHitResult);// 0x2250de4

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0xd8, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0xdc, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0xe8, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x20c0fc4
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x20c0e1c
	void SetBulletAttr(int ReloadBulletID);// 0x20c0da4
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x20c0c44
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x20c0b34
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x20c09d0
	bool HasMultiBullet();// 0x20c09a8
	int GetShootBulletType();// 0x20c0980
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x20c0900
	int GetNextBulletID();// 0x20c08d8
	BackpackComponent* GetBackpackComponent();// 0x20c08b0
	float GetAdjustBulletMomentum();// 0x20c0888
	float GetAdjustBulletDamage();// 0x20c0860
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x20c0704
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x20c04d0

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0xd8, Size: 4]
	float BulletSpeed;//[Offset: 0xdc, Size: 4]
	int CurBulletNum;//[Offset: 0xe0, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0xe8, Size: 4]
	ItemDefineID BulletType;//[Offset: 0xf0, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x10c, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x118, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x11c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x120, Size: 4]
	float CameraShakFalloff;//[Offset: 0x124, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x128, Size: 4]
	float ReloadTime;//[Offset: 0x12c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x130, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x134, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x138, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x13c, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x140, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x206ddcc
	void SetUseGreanadeLaunch(bool bIsUse);// 0x206dd4c
	void RemoveBullet(int RemoveNum);// 0x206dcd4
	int ReloadGrenadeLaunch();// 0x206dcac
	void OnRep_UseGrenadeLaunchState();// 0x206dc98
	void OnRep_CurBulletNum();// 0x206dc84
	void OnRep_CanUseGrenadeLaunch();// 0x206dc70
	void LaunchGrenadeBullet(Transform Trans, uint32 ShootID, int Pellet);// 0x206db00
	bool JudgeMustReload();// 0x206dad8
	bool IsUseGreanadeLaunch();// 0x203a2e4
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x206da58
	BackpackComponent* GetBackpackComp();// 0x206da30
	void DoGrenadeLaunchStartReload();// 0x206da1c
	bool CheckCanReload();// 0x206d9f4

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0xd8, Size: 4]
	float DownGasSpeed;//[Offset: 0xdc, Size: 4]
	float CostGasOneShoot;//[Offset: 0xe0, Size: 4]
	float MaxGas;//[Offset: 0xe4, Size: 4]
	float GasAddDamageRate;//[Offset: 0xe8, Size: 4]
	float MaxGasAngle;//[Offset: 0xec, Size: 4]
	float PostFillGasTime;//[Offset: 0xf0, Size: 4]
	float GasUpdateInterval;//[Offset: 0xf4, Size: 4]
	int CurGas;//[Offset: 0xf8, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xfc, Size: 4]
	void OnRep_CurGas();// 0x1f4cfe0
	void CostGassByShoot();// 0x203b0a0
	void CheckNeedRep();// 0x203b08c
	void AddFillGass(float AddFillGasTime);// 0x203b014

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x444, Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x448, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x474, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	float CurShootLockInterval;//[Offset: 0x488, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x20d1dec
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x2bbd2f4
	bool CheckShootState();// 0x20d1dbc

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x438, Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x120, Size: 60]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x15c, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x160, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x164, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x168, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x16c, Size: 4]
	float CameraShakFalloff;//[Offset: 0x170, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x178, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x17c, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x188, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x18c, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x198, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x19c, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1a8, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1b8, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1bc, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x1c8, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x1cc, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x1d8, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x1dc, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x1e8, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1f8, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1fc, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x208, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x20c, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x218, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x21c, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x228, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x238, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x23c, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x248, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x24c, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x258, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x25c, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x26c, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x270, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x27c, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x280, Size: 12]
	float ShootLightCD;//[Offset: 0x28c, Size: 4]
	float LastShootLightTime;//[Offset: 0x290, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x294, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x298, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x29c, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2a0, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2a4, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2a8, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2ac, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2b8, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x2c4, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x2d8, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x2e8, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x2f8, Size: 8]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void ReloadAttr(int WeaponId);// 0x2135ae4
	void OnWeaponUnEquiped();// 0x2135ad0
	void OnWeaponEuiped();// 0x2135abc
	void HandleWeaponAction(byte Action);// 0x2135a3c
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x2135a14
	OBEffectBullet* GetOBEffectBullet();// 0x21359ec
	int GetAvailableOBEffectBulletNum();// 0x21359c4
	void CheckOptimizeMuzzleFX();// 0x21359a8
	void ChangeShellDropFx();// 0x2135994
	void ActiveShootLight();// 0x2135980
	void ActiveLocalShellDropFX();// 0x213596c

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0xd8, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x114, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x118, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x11c, Size: 4]
	void HandleWeaponAction(byte Action);// 0x2135a3c

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2dc, Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2e0, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2f0, Size: 4]
	float CurMovingTime;//[Offset: 0x31c, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x320, Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	delegate OnAttrModified;//[Offset: 0xd0, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0xdc, Size: 4]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0xe0, Size: 12]
	RepAttributeModify DynamicModifierRep;//[Offset: 0xec, Size: 16]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0xfc, Size: 12]
	AttributeExpand[] AttributeExpands;//[Offset: 0x25c, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x268, Size: 124]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x2e4, Size: 60]
	enum ActorAttrType;//[Offset: 0x320, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x3e8, Size: 12]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x23c966c
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x23c956c
	void SetAttrModifyStateValue(int Index, bool Value);// 0x23c94a8
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x23c93a8
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x23c926c
	void RequestAttrValue(FString AttrName);// 0x23c9178
	void RemoveDynamicModifyItemForLua(uint32 ModifyUID);// 0x23c9100
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x23c8f74
	void OnRep_ModSimulateSyncList();// 0x23c8f60
	void OnRep_DynamicModifierList();// 0x23c8f4c
	void OnRep_DynamicModifier();// 0x23c8f38
	void OnRep_AttrModifyStateList();// 0x23c8f24
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x2bbd2f4
	bool IsAttrModifyStateValidIndex(int Index);// 0x23c8ea4
	bool HasDynamicModifier(FString AttrModifyId);// 0x23c8de0
	bool GetAttrModifyStateValue(int Index);// 0x23c8d60
	int GetAttrModifyStateNum();// 0x1f2c75c
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x23c8a84
	float GetAttributeValue(FString AttrName);// 0x23c89bc
	float GetAttributeOrignalValue(FString AttrName);// 0x23c88f4
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x23c8874
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x23c8714
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x23c8694
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x23c8534
	bool DisableAllAttrModifier();// 0x23c850c
	void AddValueToAttribute(FString AttrName, float Value);// 0x23c840c
	uint32 AddDynamicModifyItemForLua(FString AttrName, byte ModifyType, float Value, bool bEnable, Object* Causer);// 0x23c8228
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x23c80d0

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 12]
	enum AttrVariableType;//[Offset: 0xc, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd8, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x104, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x10c, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x114, Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x11c, Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x120, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x164, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x168, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x16c, Size: 4]
	float ShootTimeGunPosMaxZDif;//[Offset: 0x170, Size: 4]
	float ShootTimeGunPosMaxForwadDif;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosMaxForwadDifInVehicle;//[Offset: 0x178, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x180, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x184, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x188, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x18c, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x194, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x198, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x19c, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1a4, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1a8, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1ac, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x2317698

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xa5, Size: 1]
	float DamageImpulse;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 136]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	float HitSelfModifier;//[Offset: 0x2e8, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x2ec, Size: 4]
	float HitOthersModifier;//[Offset: 0x2f0, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x2f4, Size: 4]
	float HitCharacterModifier;//[Offset: 0x2f8, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x158, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x15c, Size: 4]
	float ImpactModifier;//[Offset: 0x160, Size: 4]
	float ImpactAbsorption;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x168, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x16c, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x170, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x174, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x178, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x17c, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x18c, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x190, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x194, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x198, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x19c, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1d8, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1dc, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1e0, Size: 4]
	float DamageSelfCD;//[Offset: 0x1e8, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1f4, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1f8, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x200, Size: 4]
	float DamageReduce;//[Offset: 0x204, Size: 4]
	float ExplosionBaseDamage;//[Offset: 0x208, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x20c, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x210, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x214, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x218, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x21c, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x220, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x228, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x22c, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x26c, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x270, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x280, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2c4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2c8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2d0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2d8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2dc, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2e0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2e4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2e8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2ec, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x2f0, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x2f4, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x2f8, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x300, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x304, Size: 4]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x308, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x348, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x34c, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x388, Size: 32]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x22f05d0
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x2bbd2f4
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x22f040c
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22f02a4

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x158, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x164, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x170, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x17c, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x188, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x194, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x1a0, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	float HPMax;//[Offset: 0x1b0, Size: 4]
	float HP;//[Offset: 0x1b4, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x1b8, Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	float FuelMax;//[Offset: 0x1c8, Size: 4]
	float Fuel;//[Offset: 0x1cc, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x1d0, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x1d4, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x1d8, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x1e4, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x1f0, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22ee230
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22ee02c
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22ede10
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22edbf4
	void SetHPFuel(float InHp, float InFuel);// 0x22edb38
	void RefreshWheelState();// 0x22edb24
	void OnRep_WheelsCurrentHP();// 0x22edb10
	void OnRep_HP();// 0x22edafc
	void OnRep_Fuel();// 0x22edae8
	bool NoFuel();// 0x22edac0
	void Maintenance(float addpercenthp, bool fixtire);// 0x22ed9fc
	bool IsDontDamage();// 0x22ed9e0
	bool IsDontConsumeFuel();// 0x22ed9c4
	bool IsDestroyed();// 0x22ed99c
	int GetWheelsHPNum();// 0x22ed974
	float GetWheelHPMax(int WheelIdx);// 0x22ed8f4
	float GetWheelHP(int WheelIdx);// 0x22ed874
	float GetVehicleHPMax();// 0x22ed84c
	float GetVehicleHP();// 0x22ed824
	float GetFuelMax();// 0x22ed7fc
	float GetFuelConsumeFactor();// 0x22ed7d4
	float GetFuel();// 0x22ed7ac
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x22ed734

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x270, Size: 12]
	delegate OnEnterWater;//[Offset: 0x27c, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x28c, Size: 4]
	float MeshDensity;//[Offset: 0x290, Size: 4]
	float FluidDensity;//[Offset: 0x294, Size: 4]
	float FluidLinearDamping;//[Offset: 0x298, Size: 4]
	float FluidAngularDamping;//[Offset: 0x29c, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2a0, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2b0, Size: 4]
	float TestPointRadius;//[Offset: 0x2b4, Size: 4]
	Vector[] TestPoints;//[Offset: 0x2b8, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x2c8, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x2d4, Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]
	float StayUprightStiffness;//[Offset: 0x2e4, Size: 4]
	float StayUprightDamping;//[Offset: 0x2e8, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2ec, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2fc, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x300, Size: 4]
	byte TickGroup;//[Offset: 0x304, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x308, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x314, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x4c0, Size: 4]
	void TickBuoyancyForce(float DeltaTime);// 0x209a760
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x2bbd2f4
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x2bbd2f4
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x4faa0d0
	bool IsEntirelyUnderWater();// 0x4faa098
	bool IsContactedWater();// 0x4faa070
	void EndableUprightConstraint(bool bEnable);// 0x4fa9ff0
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x4fa9f24

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x2e0, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x2ec, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2f0, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x2f4, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x2f8, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x2fc, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x308, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x314, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	float ModulationStartHeight;//[Offset: 0x31c, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x320, Size: 4]
	float ModulationPower;//[Offset: 0x324, Size: 4]
	Landscape* Landscape;//[Offset: 0x328, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x32c, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x354, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x35c, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x360, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x364, Size: 12]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x374, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x388, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x394, Size: 12]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x4fab4b4
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x4fab43c
	LinearColor GetHeightmapPixel(float U, float V);// 0x4fab36c

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2dc, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2e0, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2f0, Size: 8]
	int MaxLODLevel;//[Offset: 0x2f8, Size: 4]
	float LODDistanceFactor;//[Offset: 0x2fc, Size: 4]
	byte LODFalloff;//[Offset: 0x300, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x304, Size: 4]
	float LODDistributionSetting;//[Offset: 0x308, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x30c, Size: 1]
	float NearFactor_Baked;//[Offset: 0x310, Size: 4]
	float NearExtent_Baked;//[Offset: 0x314, Size: 4]
	float FarFactor_Baked;//[Offset: 0x318, Size: 4]
	float LandscapeRoughness;//[Offset: 0x31c, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x324, Size: 12]
	byte NearMaxLOD;//[Offset: 0x330, Size: 1]
	float NearFactor;//[Offset: 0x334, Size: 4]
	float NearExtent;//[Offset: 0x338, Size: 4]
	float FarFactor;//[Offset: 0x33c, Size: 4]
	int StaticLightingLOD;//[Offset: 0x340, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x344, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x348, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x350, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x354, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x358, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x398, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x3a4, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x3a8, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x3ac, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x3b0, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x3b4, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x3bc, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3c4, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x3d0, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x3d4, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x3e0, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	float StaticLightingResolution;//[Offset: 0x438, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43c, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x43c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x43d, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43e, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43e, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x440, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x444, Size: 24]
	int CollisionMipLevel;//[Offset: 0x45c, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x460, Size: 4]
	float CollisionThickness;//[Offset: 0x464, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x468, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a8, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a8, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x5ac, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x5b0, Size: 4]
	int NumSubsections;//[Offset: 0x5b4, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x5b9, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x364e350
	void ChangeLODDistributionSettingConsoleVariable();// 0x1f39ea8
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x1f465a4
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x1f39ee0
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x206bf14

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x584, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x590, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x59c, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x584, Size: 4]
	int SectionBaseY;//[Offset: 0x588, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x58c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x590, Size: 4]
	int NumSubsections;//[Offset: 0x594, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x598, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x59c, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x5a0, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x5dc, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f4, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x5f8, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x604, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x610, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x64c, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x658, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x664, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x668, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x670, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x680, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x690, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x6a0, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x6a4, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x6e0, Size: 12]
	Box CachedLocalBox;//[Offset: 0x6ec, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x708, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x724, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x734, Size: 12]
	int CollisionMipLevel;//[Offset: 0x740, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x744, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x748, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x74c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x750, Size: 4]
	int ForcedLOD;//[Offset: 0x754, Size: 4]
	int LODBias;//[Offset: 0x758, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x768, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x774, Size: 4]
	Guid stateID;//[Offset: 0x778, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x788, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x798, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x79c, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x7a0, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x7a4, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x7a8, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x7e4, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x7f0, Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x7f4, Size: 12]
	FName UsedOtherMaterialName;//[Offset: 0x858, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x584, Size: 12]
	int SectionBaseX;//[Offset: 0x590, Size: 4]
	int SectionBaseY;//[Offset: 0x594, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x598, Size: 4]
	float CollisionScale;//[Offset: 0x59c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x5a0, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x5a4, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x5b0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x5c0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x5dc, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x604, Size: 12]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x75c, Size: 12]
	int NumBuiltInstances;//[Offset: 0x768, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x770, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x78c, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7a8, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x7b4, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x7e0, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7e4, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x805, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x808, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x43a5b60

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x670, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x67c, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x680, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x684, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x688, Size: 12]
	int[] RemovedInstances;//[Offset: 0x694, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x700, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x704, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x744, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x748, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x43afe80
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x43afdc4
	bool RemoveInstance(int InstanceIndex);// 0x43afd3c
	bool HideInstance(out const int[] InstanceIndices);// 0x43afc60
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x43afaf0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x43af93c
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x43af7a4
	int GetInstanceCount();// 0x43af77c
	void ClearInstances();// 0x43af760
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x43af680
	int AddInstance(out const Transform InstanceTransform);// 0x43af590

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x5a0, Size: 4]
	Vector Direction;//[Offset: 0x5a4, Size: 12]
	float SpeedValue;//[Offset: 0x5b0, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x5b4, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x5b8, Size: 12]
	float TimeScaleOffset;//[Offset: 0x5c4, Size: 4]
	float Offset;//[Offset: 0x5c8, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x5d0, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	float ZOffset;//[Offset: 0x5d8, Size: 4]
	float CellSizeX;//[Offset: 0x5dc, Size: 4]
	float CellSizeY;//[Offset: 0x5e0, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x5e4, Size: 60]
	int KeyFactor;//[Offset: 0x620, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x270, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x278, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x280, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x288, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2a0, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x2a4, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2b0, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x444aaa8
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x444aa28
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x444a96c
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x444a8b0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x444a7f4
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x444a770
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x444a650
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x444a5cc
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x444a4ac
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x444a3ac
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x444a2e4
	void SetDisableCollision(bool bDisableCollision);// 0x444a264
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x444a19c
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x444a080
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x4449f60
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x4449e00
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x4449d7c
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x4449cac
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x4449c2c
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x4449b5c
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x4449aa0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x44499e4
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x4449928
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x44498a4
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x44497d4
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x44496d4
	void SetAngularDriveMode(byte DriveMode);// 0x444965c
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x4449594
	bool IsBroken();// 0x444956c
	float GetCurrentTwist();// 0x4449544
	float GetCurrentSwing2();// 0x444951c
	float GetCurrentSwing1();// 0x44494f4
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x444941c
	void BreakConstraint();// 0x4449408

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x158, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x164, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x168, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x16c, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x170, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x174, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x178, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x17c, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x180, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x184, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x188, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x18c, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x190, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x194, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x198, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x19c, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x1a0, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	float StaticFixLocation;//[Offset: 0x1a8, Size: 4]
	float StaticFixAngel;//[Offset: 0x1ac, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1b0, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1b4, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1bc, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1c0, Size: 4]
	bool bFixVehicleDrag_V160;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x2bc, Size: 60]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x22fbbe4
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x22fba28
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x22fb830
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x22fb638
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x22fb3dc
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x22fb1d0
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x22fafc0
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x22facec
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x22faa18
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22fa8b0
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22fa748
	void OnDriverRide();// 0x22fa734
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x22fa62c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x22fa494
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x22fa38c
	STExtraBaseCharacter*[] GetRiders();// 0x22fa2cc
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x22fa240
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x22fa160
	void DragUnderGround();// 0x22fa14c
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x22fa034
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x22f9f00
	bool CheckAndLoadLandscape(float DeltaTime);// 0x211f0c0
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x22f9e30
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x22f9cac

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xe0, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0xec, Size: 12]
	float fRewindMaxSeconds;//[Offset: 0xf8, Size: 4]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103, Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0x104, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0x108, Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x110, Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x114, Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	float TolerateFlyTime;//[Offset: 0x124, Size: 4]
	float TolerateFlyDis;//[Offset: 0x128, Size: 4]
	bool bOpenStillLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x130, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x134, Size: 4]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x13c, Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x140, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x144, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x148, Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x14c, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x150, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x154, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x158, Size: 4]
	float TolerateShootRange;//[Offset: 0x15c, Size: 4]
	byte[] traceObjectTypes;//[Offset: 0x160, Size: 12]
	float ShooterWeaponRange;//[Offset: 0x16c, Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x170, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x178, Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x17c, Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x184, Size: 4]
	float TolerateLocusDist;//[Offset: 0x188, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x18c, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x190, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x194, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x198, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x19c, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x1a0, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x1a4, Size: 4]
	float MaxGunPosLength;//[Offset: 0x1a8, Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x1ac, Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x1b8, Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	float BonePointTorelate;//[Offset: 0x1c8, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x1cc, Size: 12]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x1d8, Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 1]
	Character* CharacterOwner;//[Offset: 0x1e0, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1e8, Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1ec, Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1f4, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1f8, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1fc, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x200, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x204, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x208, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x20c, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x210, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x214, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x218, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x21c, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x220, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x224, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x228, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x22c, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x230, Size: 4]
	float TolerateNetDelay;//[Offset: 0x234, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x238, Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x240, Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x244, Size: 4]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x248, Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x24c, Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x250, Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x254, Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x258, Size: 4]
	float VerifyDownShootCD;//[Offset: 0x25c, Size: 4]
	bool GM_VerifyActorPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float GrayWeaponAndShootAngle;//[Offset: 0x26c, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x270, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x274, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x278, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x27c, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x294, Size: 12]
	byte VertifyMuzzleHeight(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x2092e3c
	byte VertifyImpactActorPosWithNoLagCompensation(STExtraShootWeapon* ShootWeapon, Pawn* VictmPawn, out const Vector InImpactActorPos);// 0x2092d28
	byte VertifyClientAntiCheatResult(uint16 ClientAntiCheatResult, STExtraShootWeapon* ShootWeapon);// 0x2092c64
	byte VerityOwnerAndGunBlock(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x2092b50
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x2091bac
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x2092a34
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x2092918
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x2091a4c
	float SimulatedCharacterServerTimeHighPrecision();// 0x20928e8
	float SimulatedCharacterServerTime();// 0x2091a1c
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x209280c
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x2092700
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x209263c
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x2092578
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x20924b4
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x2092434
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x2092370
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x20922ac
	float GetNearAvgNetDelay(Pawn* TargetPawn, float NearNum);// 0x20921e8

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xcc, Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0xdc, Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x328, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x32c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x330, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x338, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x33c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x348, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	float MinPitch;//[Offset: 0x360, Size: 4]
	float MaxPitch;//[Offset: 0x364, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x36c, Size: 4]
	float ResultMinPitch;//[Offset: 0x3ac, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3b0, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x3b4, Size: 12]
	float LeaveMaxDistance;//[Offset: 0x3c0, Size: 4]
	float LeaveMaxTime;//[Offset: 0x3c4, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x3d0, Size: 4]
	float ApproachTime;//[Offset: 0x3d8, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x3e8, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x3ec, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x22f8b6c
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x22f8aec
	void SetFreeCameraInput(Rotator deltaRot);// 0x22f8a7c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x22f89fc
	void ResetSmartCamera();// 0x22f89e8
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1ff0840
	void DelayRotationLagEnabledEnd();// 0x1f4cfe0
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x22f88dc
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x22f8820

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xc8, Size: 12]
	FString OneceBuffTableName;//[Offset: 0xd4, Size: 12]
	FString ConditionBuffTableName;//[Offset: 0xe0, Size: 12]
	float RPCSyncInterval;//[Offset: 0xec, Size: 4]
	bool IsPreloadUClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	int[] PreloadBuffIDList;//[Offset: 0xf4, Size: 12]
	delegate OnClientAddBuffEvent;//[Offset: 0x100, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0x10c, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x118, Size: 12]
	STBuff*[] Buffs;//[Offset: 0x124, Size: 12]
	int SyncBriefNum;//[Offset: 0x130, Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0x134, Size: 32]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x1f4, Size: 32]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x2b4, Size: 60]
	<int> BriefRemoveInstIds;//[Offset: 0x2f0, Size: 60]
	bool UpdateServerSyncBuff(STBuff* Buff);// 0x23dfd10
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID, Actor* CauseActor, float DSEndTime);// 0x23dfb3c
	void UpdateBriefs();// 0x23dfb28
	void RPC_Server_ReqBriefs();// 0x23dfacc
	void RPC_Client_SyncBrief(ClientSyncBrief Brief);// 0x23dfa18
	void RPC_Client_RspBriefs(const ClientSyncBrief[] Briefs);// 0x23df954
	void RemoveClientBuff(int InstID);// 0x23df8dc
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x23df78c
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x23df644
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x23df5cc
	void RemoveAllBuffs();// 0x23df5b8
	void OnRep_SyncBriefs();// 0x23df5a4
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bbd2f4
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bbd2f4
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bbd2f4
	bool HasSkillID(int SkillID);// 0x23df524
	bool HasBuff(int BuffID);// 0x23df4a4
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x23df3e8
	bool HandleBuffTypeMutex(int BuffID);// 0x23df368
	void HandleBuffTypeExclude(int BuffID);// 0x23df2f0
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x23df1e8
	BuffTableConfig* GetTableConfig();// 0x23df1c0
	STBuff*[] GetBuffs();// 0x23df100
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x23df03c
	STBuff* GetBuffByBuffID(int BuffID);// 0x23defbc
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x23dee6c
	void CompareBuffPower(STBuff* Buff);// 0x23dedf4
	bool ClientGetBuffInfo(int BuffID, out ClientSyncBrief OutBuff);// 0x23ded08
	void ClearBuffs(bool IsClearAll);// 0x23dec88
	bool CheckBuffTargetClient(STBuff* Buff);// 0x23dec08
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x23deab8

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c, Size: 12]
	FString Desc;//[Offset: 0x28, Size: 12]
	int LayerMax;//[Offset: 0x34, Size: 4]
	int InitialLayerCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	float ClientSyncInterval;//[Offset: 0x40, Size: 4]
	enum ClientSyncType;//[Offset: 0x44, Size: 1]
	enum TargetType;//[Offset: 0x45, Size: 1]
	enum RefreshType;//[Offset: 0x46, Size: 1]
	enum ReActionType;//[Offset: 0x47, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x48, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x49, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x4c, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int LocalizeDescID;//[Offset: 0x5c, Size: 4]
	FString IconPath;//[Offset: 0x60, Size: 12]
	int TipsOnAddBuff;//[Offset: 0x6c, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x70, Size: 12]
	int InstID;//[Offset: 0x7c, Size: 4]
	int BuffID;//[Offset: 0x80, Size: 4]
	int LayerCount;//[Offset: 0x84, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float EndTime;//[Offset: 0x8c, Size: 4]
	float DSEndTime;//[Offset: 0x90, Size: 4]
	Actor* Causer;//[Offset: 0x94, Size: 8]
	Actor* Owner;//[Offset: 0x9c, Size: 8]
	int CauseSkillID;//[Offset: 0xa4, Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0xa8, Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float PowerValue;//[Offset: 0xb4, Size: 4]
	float LastSyncClientTime;//[Offset: 0xb8, Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	UAEBlackboard* Blackborad;//[Offset: 0xc0, Size: 4]
	int LastLayerCount;//[Offset: 0x13c, Size: 4]
	void Tick(float DetalTime, float TimeSeconds);// 0x23dc714
	void ResetActionExecute();// 0x23dc700
	void RefreshEndTime();// 0x23dc6ec
	void Initialize();// 0x23dc6d8
	void HandleLayer(int AddLayerCount, bool IsNewBuff);// 0x23dc614
	void End();// 0x23dc600
	void EnabledRemove();// 0x23dc5ec
	void Destroy();// 0x23dc5d8
	bool CopyActions();// 0x23dc5b0
	void CheckOnceBuffForClient();// 0x23dc59c
	void ChangeNotify();// 0x23dc588
	void ChangeDuration(float NewDuration);// 0x23dc510

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x20, Size: 8]
	int ArrayIndex;//[Offset: 0x28, Size: 4]
	void Tick(float DetalTime);// 0x23dd1b4
	void SetEnabled(bool Enabled);// 0x23dd134
	void ResetExecute(bool IgnoreEnd);// 0x1f60258
	void OnTick(float DetalTime);// 0x215a2ec
	void OnInitialize();// 0x20e1f14
	void OnExecute();// 0x20e1f30
	void OnEnd();// 0x1f605a0
	void OnDestroy();// 0x215affc
	void OnChangeNotify();// 0x20144c0
	void Initialize();// 0x23dd120
	STBuff* GetOwnerBuff();// 0x23dd0f8
	Actor* GetOwner();// 0x215d3ac
	bool GetIsExecute();// 0x23dd0dc
	Actor* GetCauser();// 0x23dd0b4
	void End();// 0x23dd0a0
	void Destroy();// 0x23dd08c
	STBuffAction* CopyAction(Object* Outer);// 0x23dd004
	void ChangeNotify();// 0x23dcff0

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4eed6d4
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x4eed600
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x4eed44c
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x4eed378
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4eed2a4
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x4eed1d0
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x4eed0fc
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x4eed028
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x4eecf54
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x4eece80
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x4eecda4
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x4eecd10
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x4eecc7c
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x4eecbe8
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x4eecb54
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x4eecac0
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x4eeca2c
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x4eec998
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x4eec904
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x4eec870
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x4eec7dc
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x4eec748
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x4eec6b4
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x4eec5d0
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x4eec52c
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x4eec410
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x4eec36c
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x4eec2d8
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x4eec23c
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x4eec1a8
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x4eec114
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x4eec080
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x4eebfec
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x4eebf58
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x4eebe74
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x4eebcc8

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float EndTime;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: BuffTableConfig.Object
	<int,BuffTableRow> Table;//[Offset: 0x40, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x7c, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x388, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x394, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x3a0, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x3ac, Size: 12]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x3bc, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x3cc, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x3d8, Size: 8]
	FName TailMatSlotName;//[Offset: 0x3e0, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x3e8, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x3f0, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x3f4, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x3f8, Size: 4]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x3fc, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x400, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bUseDefaultPropertyHandle_V160;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	void WakeUpVehicle();// 0x22e7800
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x2bbd2f4
	void PreChangeVehicleBrokenAvatar();// 0x22eb5d4
	void PreChangeVehicleAvatar(int InItemID);// 0x206d590
	void PreChangeItemAvatar(int InItemID);// 0x208afc8
	void PreChangeAvatarFPP();// 0x22eb5c0
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x206d508
	void OverrideVehiclePhysX();// 0x22eb5ac
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x2bbd2f4
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x22eb528
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x22eb4a4
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x22eb440
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x22eb3dc
	FName GetReflectionCubeName_Lobby();// 0x2bbd2f4
	FName GetReflectionCubeName();// 0x22eb39c
	FString GetItemAvatarHandlePath(int ItemId);// 0x2bbd2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x2bbd2f4
	int GetDefaultAvatarID();// 0x22eb374
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x22eb34c
	int GetCurrentAvatarID();// 0x22eb330
	void ExitFPPVehicle();// 0x22eb31c
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x22eb29c
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x2bbd2f4
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x208ad28
	void ClearVehicleLightEffect();// 0x2bbd2f4
	bool CheckIsNeedEnterFPPVehicle();// 0x22eb274
	bool CheckBrokenMesh();// 0x22eb24c
	bool CheckAvatarChanged();// 0x22eb224
	void AsyncLoadPropertyHandle();// 0x22eb210
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x22eb198
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x208a9cc

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 160]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0xc8, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x54cd77c
	float GetSuspensionOffset();// 0x54cd754
	float GetSteerAngle();// 0x54cd72c
	float GetRotationAngle();// 0x54cd704

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x138, Size: 12]
	float Mass;//[Offset: 0x144, Size: 4]
	float DragCoefficient;//[Offset: 0x148, Size: 4]
	float ChassisWidth;//[Offset: 0x14c, Size: 4]
	float ChassisHeight;//[Offset: 0x150, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float DragArea;//[Offset: 0x158, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x15c, Size: 4]
	float MaxEngineRPM;//[Offset: 0x160, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x164, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x168, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x174, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x178, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x17c, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x180, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x184, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x188, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x18c, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x190, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1ac, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1b0, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1b4, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1b8, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1bc, Size: 4]
	int AvoidanceUID;//[Offset: 0x1c0, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1c4, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1c8, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1cc, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1d0, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1d4, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e0, Size: 20]
	float RawSteeringInput;//[Offset: 0x1f8, Size: 4]
	float RawThrottleInput;//[Offset: 0x1fc, Size: 4]
	float RawBrakeInput;//[Offset: 0x200, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	float SteeringInput;//[Offset: 0x208, Size: 4]
	float ThrottleInput;//[Offset: 0x20c, Size: 4]
	float BrakeInput;//[Offset: 0x210, Size: 4]
	float HandbrakeInput;//[Offset: 0x214, Size: 4]
	float IdleBrakeInput;//[Offset: 0x218, Size: 4]
	float StopThreshold;//[Offset: 0x21c, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x220, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x224, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x23c, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x54ce920
	void SetThrottleInput(float Throttle);// 0x54ce8a0
	void SetTargetGear(int GearNum, bool bImmediate);// 0x54ce7dc
	void SetSteeringInput(float Steering);// 0x54ce75c
	void SetPhysActive(bool bActive);// 0x54ce6dc
	void SetHandbrakeInput(bool bNewHandbrake);// 0x54ce654
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x54ce5d0
	void SetGroupsToIgnore(int GroupFlags);// 0x54ce558
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x54ce4d4
	void SetGroupsToAvoid(int GroupFlags);// 0x54ce45c
	void SetGearUp(bool bNewGearUp);// 0x54ce3dc
	void SetGearDown(bool bNewGearDown);// 0x54ce35c
	void SetBrakeInput(float Brake);// 0x54ce2dc
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x54ce258
	void SetAvoidanceGroup(int GroupFlags);// 0x457cafc
	void SetAvoidanceEnabled(bool bEnable);// 0x54ce1d8
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x54cdff4
	bool GetUseAutoGears();// 0x54cdfcc
	int GetTargetGear();// 0x54cdfa4
	float GetForwardSpeed();// 0x54cdf7c
	float GetEngineRotationSpeed();// 0x54cdf54
	float GetEngineMaxRotationSpeed();// 0x54cdf2c
	int GetCurrentGear();// 0x54cdf04

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x12c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x138, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x148, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x170, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x198, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x1c0, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x1e8, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x1f4, Size: 60]
	ParticleSystem* ExplosionParticle;//[Offset: 0x230, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x258, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x280, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x2a8, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x2e8, Size: 12]
	class AnimInstance* VehicleAnim;//[Offset: 0x2f8, Size: 40]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63e, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x640, Size: 4]
	int VehicleSkinID;//[Offset: 0x644, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x650, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x678, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x6a0, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x6ac, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x6b8, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x6c4, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x6d0, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x6e0, Size: 8]
	FName TailMatSlotName;//[Offset: 0x6e8, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x6f0, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x6f8, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x6fc, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x700, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x704, Size: 4]
	void WakeUpVehicle();// 0x22e7800
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x22e7788
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1fd027c
	void SetVehicleAvatarNormalMode();// 0x22e7774
	void SetVehicleAvatarFPPMode();// 0x22e7760
	void SetVehicleAvatarBroken();// 0x22e774c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1fcfd18
	void SetMasterBaseMeshPath(FString InPath);// 0x22e7690
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x22e75d4
	void ResetAdvanceVehicleSkinID();// 0x22e75b8
	void RemoveAllEquippedStyle();// 0x22e75a4
	bool ProcessHandleUnequip(enum InSlotType);// 0x22e7524
	bool ProcessHandleEquip(enum InSlotType);// 0x22e74a4
	void PreProcessBeforeLoadMesh();// 0x1fcf40c
	void PostProcessAfterLoadMesh();// 0x1fcf3f0
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x22e742c
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x22e73b4
	void OverrideVehiclePhysX();// 0x22e73a0
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x2bbd2f4
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x2bbd2f4
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x2bbd2f4
	void OnRep_BodySlotStateChanged();// 0x1fcf2e0
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x2bbd2f4
	bool IsValidAvatar();// 0x22e7378
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x22e729c
	bool IsAvatarFPPMode();// 0x22e7274
	bool IsAvatarBroken();// 0x22e724c
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1ff2b78
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x2148df4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x22e71c4
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x1f25ea8
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x22e70b8
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x22e6f60
	void InitMasterComponent();// 0x22e6f4c
	void Initialize();// 0x1fcdf80
	void InitialAvatarParam();// 0x1f4cfe0
	int HasStyleEquipped(int InStyleID);// 0x22e6ecc
	int HasEquippedSameStyle(int InStyleID);// 0x22e6e4c
	bool HandleUnequipStyle(int InStyleID);// 0x22e6dcc
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x2148d30
	bool HandleEquipStyle(int InStyleID);// 0x22e6d4c
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x22e6d24
	MeshComponent* GetVehicleBodyMeshComp();// 0x22e6cfc
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1fcd6cc
	FName GetReflectionCubeName_Lobby();// 0x2bbd2f4
	FName GetReflectionCubeName();// 0x22e6cbc
	bool CanBeMeshMerge(int SlotID);// 0x22e6c3c
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x22e6b80

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4b0, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4bc, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4c8, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x2320358
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x23202e0
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x2320258
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x232019c
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x231ff5c
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x231fd48
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x231fcc0
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x231fc40
	void OnRep_CurrentWeaponReplicated();// 0x20c705c
	void OnReconnectOnServer();// 0x1f5aac8
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x231fbc8
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x231fa7c
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x231fa04
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x231f954
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x231f898
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x231f820
	void DelayFire(float DelayTime, byte ShootMode);// 0x231f75c

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xc8, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x108, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x110, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x118, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x154, Size: 60]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x190, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1cc, Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1d0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1d8, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1e8, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1f0, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 1]
	float ResyncTimeBias;//[Offset: 0x1fc, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x200, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x208, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x214, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x220, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x22c, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x238, Size: 12]
	delegate OnOverrideShootWeaponInitClip;//[Offset: 0x248, Size: 16]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x270, Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x2ac, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2e8, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2f8, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x308, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x318, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x350, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x388, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x3c0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3f8, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x434, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x438, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x43c, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x440, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x444, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x474, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x2bbd2f4
	void UpdateOwnerClientCreateWeapon();// 0x23226a0
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x23225dc
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x23225c8
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x2bbd2f4
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x231fd48
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x2bbd2f4
	void SetGrenadeLogicSocketToWeaponClassMap(<FName,class STExtraWeapon> GrenadeLogicToWeaponClass);// 0x232241c
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x2322358
	void SetAllWeaponMeshsHidden(bool bHidden, bool bCastShadow, bool bCacheHidden, bool bIgnoreCharHide);// 0x23221e4
	void ResetAllWeponMeshsVisibility();// 0x23221d0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x2322158
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x2322070
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x2bbd2f4
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x232205c
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x2322048
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x2322034
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x2322020
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x232200c
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x2321f94
	void OnRep_CurrentWeaponReplicated();// 0x20c705c
	void OnRep_CurrentWeaponLogicSocket();// 0x2321f80
	void OnRep_CurrentShieldWeaponReplicated();// 0x2321f6c
	void OnReconnectOnServer();// 0x1f5aac8
	void OnReconnectOnClient();// 0x1fd7384
	void LogInventoryDataInfo();// 0x2321f58
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x2321e48
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x231f954
	void LocalForceFinishSwitchWeapon();// 0x2321e34
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x2bbd2f4
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x2321e20
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x2321d44
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x2321d30
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x2bbd2f4
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x2321d08
	bool IsCreatingWeaponOnServer();// 0x2321cd4
	static void InitializeTable(FString MainWeaponTableName);// 0x2321b84
	void HandleGetWeaponFinished(byte Slot);// 0x1feaa14
	FName GetShieldWeaponSlot();// 0x2321b44
	STExtraWeapon* GetShieldWeapon();// 0x2321b1c
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x2321a9c
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x2321994
	FName GetLogicSocketBySlot(byte Slot);// 0x232190c
	STExtraWeapon* GetLastUsedWeapon();// 0x23218dc
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x232185c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x23217dc
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x232175c
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x23216cc
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x2321644
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x23215ac
	STExtraWeapon* GetCurrentUsingWeapon();// 0x2321584
	byte GetCurrentUsingPropSlot();// 0x232155c
	FName GetCurrentUsingLogicSocketOnServer();// 0x232151c
	FName GetCurrentUsingLogicSocket();// 0x232151c
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x23214f4
	int GetBagLevel();// 0x1fd7340
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x23213e4
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x23212d4
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x23212c0
	void EnableAllBroadcast(bool bEnable);// 0x2321244
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x2321180
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x2321108
	void DebugReconnectToClientOnServer();// 0x23210f4
	void DebugDisconnetToServerOnClient();// 0x23210e0
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x2bbd2f4
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x2bbd2f4
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x232100c

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x200b568
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x200b344
	void S2A_EndEffectGraph(int UId);// 0x1f2cbc0
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x200b0d8

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x158, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x164, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x1a4, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x1a8, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1ac, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1dc, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1e0, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1e4, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1f0, Size: 12]
	void StopMoveByHandrake();// 0x22e8b6c
	void StopAutoDriving();// 0x22e8b58
	bool StartAutoDriving();// 0x22e8b30
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x22e8a84
	void OnRep_AutoDriver_AINavStateData();// 0x22e8a70
	bool IsReachDest();// 0x22e8a48
	bool IsAutoDriving();// 0x22e8a20
	bool HasAutoDriveTarget();// 0x22e89f8
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x22e89d0
	STExtraVehicleAIController* GetVehicleAIController();// 0x22e89a8
	int GetCurrentTargetWaypointIdx();// 0x22e8980
	Vector GetAutoDriveTarget();// 0x22e8938
	void EndAutoDriving();// 0x22e8924
	void ClearAutoDriveTarget();// 0x22e8910
	bool CanAutoDrivingNoDriver();// 0x22e88e8
	bool CanAutoDriving();// 0x22e88c0
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x22e8838

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x388, Size: 8]
	FName AIPawnTag;//[Offset: 0x390, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x398, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x39c, Size: 4]
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x2264c20
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x2264bf8
	VehicleAIComponent* GetVehicleAIComp();// 0x2264bd0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x348, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x34c, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x350, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x354, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x358, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x35c, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x360, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x364, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x368, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x378, Size: 12]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3a07ff8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3a07f80
	void SetMoveBlockDetection(bool bEnable);// 0x3a07f00
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3a07e78
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2bbd2f4
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x2bbd2f4
	void OnPossess(Pawn* PossessedPawn);// 0x2bbd2f4
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3a07db4
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3a07b0c
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3a078c4
	void K2_SetFocus(Actor* NewFocus);// 0x3a0784c
	void K2_SetFocalPoint(Vector FP);// 0x3a077dc
	void K2_ClearFocus();// 0x3a077c8
	bool HasPartialPath();// 0x3a077a0
	PathFollowingComponent* GetPathFollowingComponent();// 0x3a07784
	byte GetMoveStatus();// 0x3a0775c
	Vector GetImmediateMoveDestination();// 0x3a07714
	Actor* GetFocusActor();// 0x3a076ec
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3a07654
	Vector GetFocalPoint();// 0x3a0760c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3a075f0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3a07578

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x2e0, Size: 40]
	FName AIPawnTag;//[Offset: 0x308, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x310, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x314, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x31c, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x320, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x328, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x330, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x338, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x340, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x348, Size: 8]
	enum AvoidanceMode;//[Offset: 0x350, Size: 1]
	float InitRetryDelay;//[Offset: 0x354, Size: 4]
	int MaxInitRetries;//[Offset: 0x358, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x368, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x374, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x380, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x38c, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x3c8, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x404, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x440, Size: 60]
	float PreviousMatchTime;//[Offset: 0x47c, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x480, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x4c8, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x714, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x720, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x724, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x728, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x72c, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x734, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x738, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73e, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73f, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x740, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x744, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x22658c8
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x22657bc

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x2dc, Size: 16]
	FString SpawnTag;//[Offset: 0x2ec, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x2fc, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x300, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x30c, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x314, Size: 12]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x320, Size: 4]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x1f465a4
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x1f390f8

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x2e0, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x2e4, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x320, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x35c, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x368, Size: 12]
	void DrawDebug(float DrawTime);// 0x2006b7c

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xfc, Size: 4]
	NavigationData* MyNavData;//[Offset: 0x108, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3a24df8
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3a24c88
	Vector GetPathDestination();// 0x3a24c40
	byte GetPathActionType();// 0x3a24c18

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xcc, Size: 4]
	AIController* AIOwner;//[Offset: 0xd0, Size: 4]
	void StopLogic(FString Reason);// 0x3a1425c
	void RestartLogic();// 0x1f2cc40
	bool IsRunning();// 0x1f580d8
	bool IsPaused();// 0x3a1422c

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xc8, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xcc, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3a12734
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x3a12578
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x3a1249c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3a123c0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3a122e4
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3a12208
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x3a1212c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x3a12050
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3a11f74
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3a11e90
	bool IsVectorValueSet(out const FName KeyName);// 0x3a11dfc
	Vector GetValueAsVector(out const FName KeyName);// 0x3a11d58
	FString GetValueAsString(out const FName KeyName);// 0x3a11c3c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3a11b98
	Object* GetValueAsObject(out const FName KeyName);// 0x3a11b04
	FName GetValueAsName(out const FName KeyName);// 0x3a11a68
	int GetValueAsInt(out const FName KeyName);// 0x3a119d4
	float GetValueAsFloat(out const FName KeyName);// 0x3a11940
	byte GetValueAsEnum(out const FName KeyName);// 0x3a118ac
	class Object GetValueAsClass(out const FName KeyName);// 0x3a11818
	bool GetValueAsBool(out const FName KeyName);// 0x3a11784
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x3a1169c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x3a115b4
	void ClearValue(out const FName KeyName);// 0x3a11528

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xc8, Size: 12]
	class AISense* DominantSense;//[Offset: 0xd4, Size: 4]
	AIController* AIOwner;//[Offset: 0xe8, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x148, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x154, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3a09e54
	void RequestStimuliListenerUpdate();// 0x3a09e40
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3a09d84
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3a09cb8
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a09ba8
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a09a98
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a09988
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3a09860

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x3a0ae0c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x3a0ad94
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x3a0ac94
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x3a0abd8
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x3a0aa04

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xc8, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xcc, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd8, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xe4, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x3a265f8
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x3a264f0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3a26470
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x3a263f0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x3a254d4
	void Finish(byte WithResult);// 0x3a2544c
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3a25390

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xcc, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd8, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xfc, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x10c, Size: 12]
	void OnRep_SimulatedTasks();// 0x395b014
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x395aca0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x3959320
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2bbd2f4
	void EndTask();// 0x395930c

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x270, Size: 4]
	float TriggerInterval;//[Offset: 0x274, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x278, Size: 4]
	void OnTriggered();// 0x2bbd2f4

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xc38, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xc3c, Size: 4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc41, Size: 1]
	delegate OnDeath;//[Offset: 0xc44, Size: 12]
	float DelayHideDuration;//[Offset: 0xc50, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xc54, Size: 4]
	float DelayHideDurationByHeadShoot;//[Offset: 0xc58, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xc5c, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xc60, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xc64, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xc68, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xc6c, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xc70, Size: 4]
	int MonsterSpawnTime;//[Offset: 0xc74, Size: 4]
	int MonsterDeathTime;//[Offset: 0xc78, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xc7c, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xc84, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xc8c, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xc90, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xc94, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xca8, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xd00, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xd04, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xd08, Size: 4]
	float SensedRadius;//[Offset: 0xd0c, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xd10, Size: 4]
	float HeardRadius;//[Offset: 0xd14, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xd18, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xd1c, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xd20, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xd24, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xd28, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xd2c, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xd3c, Size: 4]
	int SyncAIState;//[Offset: 0xd40, Size: 4]
	int AIState;//[Offset: 0xd4c, Size: 4]
	float HurtAnimTime;//[Offset: 0xd50, Size: 4]
	float BackAnimPerc;//[Offset: 0xd54, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xd58, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xd68, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xd74, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xd80, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xd8c, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xd98, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xda4, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xdb0, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xdd0, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddc, Size: 1]
	int FlowId;//[Offset: 0xde0, Size: 4]
	FString MonsterName;//[Offset: 0xde4, Size: 12]
	FString MonsterNameID;//[Offset: 0xdf0, Size: 12]
	int MonsterSyncID;//[Offset: 0xdfc, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe00, Size: 1]
	int Gold;//[Offset: 0xe04, Size: 4]
	int SuperGold;//[Offset: 0xe08, Size: 4]
	int[] BornSkill;//[Offset: 0xe0c, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xe18, Size: 12]
	int HealthBarCount;//[Offset: 0xe24, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xe2c, Size: 4]
	float TakeDamageScale;//[Offset: 0xe30, Size: 4]
	float DamageScale;//[Offset: 0xe34, Size: 4]
	Actor* AttackTarget;//[Offset: 0xe38, Size: 8]
	int[] DecalIndexArray;//[Offset: 0xe40, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xe4c, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0xe88, Size: 60]
	byte HitPartJudgment;//[Offset: 0xec4, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xec8, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0xf04, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xf0c, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xf10, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xf14, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xf18, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0xf1c, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0xf20, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0xf24, Size: 4]
	float[] CircleDamageRate;//[Offset: 0xf28, Size: 12]
	int ObjectPoolSize;//[Offset: 0xf34, Size: 4]
	int LifePeriodTime;//[Offset: 0xf38, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0xf3c, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0xf40, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf44, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xf48, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4c, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 1]
	int RageLevel;//[Offset: 0xf70, Size: 4]
	float AloneRageTimerRate;//[Offset: 0xf7c, Size: 4]
	float ImpluseScale;//[Offset: 0xf80, Size: 4]
	float ImpluseZScale;//[Offset: 0xf84, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf89, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0xf8c, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0xf90, Size: 4]
	float MinDamageInterval;//[Offset: 0xf94, Size: 4]
	float MovementTickInterval;//[Offset: 0xf98, Size: 4]
	float DsActorTickInterval;//[Offset: 0xf9c, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0xfa8, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0xfac, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0xfb0, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0xfb4, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0xfb8, Size: 4]
	enum AnimGroupMask;//[Offset: 0xfbc, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbd, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbe, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	int ExplodeSkillID;//[Offset: 0xfc8, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0xfcc, Size: 4]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	float LagCompensationRecordInterval;//[Offset: 0x1098, Size: 4]
	float HearRadius;//[Offset: 0x10dc, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x10e0, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ea, Size: 1]
	bool TestPathSyncToLocation(Vector Location);// 0x2256e44
	bool TestPathSyncToActor(Actor* Actor);// 0x2256dc4
	void StopMovementMode();// 0x21a0138
	void StartMovementMode();// 0x21a0c4c
	void ShowHeadShootDeadEffect();// 0x2256db0
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x2256d38
	void ResetCharAnimParam();// 0x2256d24
	void OnSmoothComponentSnapshotPreReplicate();// 0x2256d10
	void OnRep_SyncAIState();// 0x2256cfc
	void OnRep_ReplicatedMovement();// 0x1f2cc40
	void OnRep_RageLevel();// 0x2256ce8
	void OnRep_MonsterSyncID();// 0x2256cd4
	void OnRep_MonsterNameID();// 0x2256cc0
	void OnRep_IsLeftRightMove();// 0x21835f8
	void OnRep_IdleBlendSpaceValue();// 0x2256cac
	void NotifyInitial();// 0x2256c98
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x2256bd4
	bool IsSameTeam(Pawn* Other);// 0x219dec0
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x2256ae8
	bool IsCanCopyBone();// 0x2256ac0
	bool IsBoss();// 0x2256a98
	bool IsBigBoss();// 0x2256a70
	bool IsBehemoth();// 0x2256a48
	void InitCharAnimParam();// 0x2256a34
	bool HasAIState(enum NewState);// 0x22569b4
	void HandleHitByBullet(Actor* Causer);// 0x225693c
	void GotoEarthAndDie();// 0x2256920
	Vector GetServerHeadLocation();// 0x22568d8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x219c298
	int GetMonsterType();// 0x22568bc
	FString GetMonsterName();// 0x22567f4
	float GetHitBoxRadius();// 0x22567d8
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x2256664
	ExFootIKComponent* GetExFootIKComponent();// 0x2256634
	class PlayerTombBox GetDropTomb();// 0x2256604
	byte GetCurHitPartJugementType();// 0x22565dc
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x22565b4
	SimpleCharAnimParamList GetAnimParam();// 0x2256528
	int GetAliveTimeSeconds();// 0x225650c
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x2256250
	void EnterAIState(enum NewState, bool bIsNotify);// 0x225618c
	void EnableDSAnim(bool bEnable);// 0x225610c
	void DisappearOnDeath();// 0x22560f8
	void DieAfterExplode();// 0x22560e4
	void DelayHidden();// 0x2199a8c
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x2256004
	bool CheckPlayerNeedUpdateAnimation();// 0x2255fdc
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x2255ed0
	void ChangeSourceType(byte NewSourceType);// 0x2255e58
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x2255d48
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x2255c38
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22559bc
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22556d4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2255458
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22551dc
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2254f4c
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2254cd0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2254a54
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22547d8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2254550
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2254268
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x22540d4
	void BroadcastClientsDebugSpeed(float Speed);// 0x2254020
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x2253f6c
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x2bbd2f4
	void BPPreRespawned();// 0x2089f34
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bbd2f4
	void BPNotifyInitial();// 0x2bbd2f4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bbd2f4
	void BPMonsterInitTableDone();// 0x2bbd2f4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2253df8
	bool BP_HasAIState(enum NewState);// 0x2253d78
	RoadPointInfo[] BleCallGetRoadPoints();// 0x2253cb0
	bool AllowAIState(enum NewState);// 0x211f0c0
	void AddWeaponDamageAddition(byte WeaponType);// 0x2253c38

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xc8, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0x100, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x138, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x13c, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x144, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x148, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x14c, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x150, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x154, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x158, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x160, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x164, Size: 4]
	delegate OnSnapshotPreReplicate;//[Offset: 0x168, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x178, Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x254, Size: 12]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x264, Size: 4]
	float TurnThreshold;//[Offset: 0x290, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x294, Size: 4]
	float TurnSpeed;//[Offset: 0x298, Size: 4]
	void TeleportNextSync();// 0x213ad50
	void StopPredict();// 0x213ad3c
	void SetVelocity(out const Vector Velocity);// 0x213acb8
	void SetEnable(bool bInEnable);// 0x213ac3c
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x213ab3c
	void OnRep_Snapshot();// 0x213ab28
	Vector GetVelocity();// 0x213aae0
	bool GetEnable();// 0x213aac4
	Vector FindFloor(const Vector InLocation);// 0x213aa30

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xc8, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xcc, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xd0, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xd4, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xd8, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xdc, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xe0, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xe4, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xe8, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xec, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xf0, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xf4, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xf8, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xfc, Size: 4]
	float Stride_Duration;//[Offset: 0x100, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0x104, Size: 4]
	float Stride_HeightOffset;//[Offset: 0x108, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x10c, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x110, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x114, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x118, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int iWallClimbState;//[Offset: 0x120, Size: 4]
	int iWallJumpState;//[Offset: 0x124, Size: 4]
	int iStrideState;//[Offset: 0x128, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x20ad488
	void WallJump(Vector DstLocation);// 0x20ad418
	void WallClimbExit();// 0x20ad404
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x20ad2fc
	void TickWallJump_Turn(float DeltaTime);// 0x20ad284
	void TickWallJump(float DeltaTime);// 0x20ad20c
	void TickWallClimb_Turn(float DeltaTime);// 0x20ad194
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x20ad11c
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x20ad0a4
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x20ad02c
	void TickWallClimb(float DeltaTime);// 0x20acfb4
	void TickStride_Turn(float DeltaTime);// 0x20acf3c
	void TickStride_Stride(float DeltaTime);// 0x20acec4
	void TickStride_MoveToWall(float DeltaTime);// 0x20ace4c
	void TickStride(float DeltaTime);// 0x20acdd4
	void StrideJump();// 0x20acdc0
	void StrideExit();// 0x20acdac
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x20accd4
	void OnMobDie();// 0x20accc0
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x20acbb4
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x20acaa8
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x20ac99c
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x20ac748
	bool IsInAdvancedMovement();// 0x20ac720
	int GetWallJumpState();// 0x20ac6f8
	int GetWallClimbState();// 0x20ac6d0
	int GetStrideState();// 0x20ac6a8
	void BPWallJump(Vector DstLocation);// 0x20ac630
	void BPWallClimb(Vector DstLocation);// 0x20ac5b8

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xc8, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xcc, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xd8, Size: 1]
	int NoisePoolSize;//[Offset: 0xdc, Size: 4]
	float NoiseRememberTime;//[Offset: 0xe0, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xe4, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x20af3c0
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x20af2b0
	void OnMobDie();// 0x20af29c
	void ClearNoisePool();// 0x20af29c
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x20af0fc
	float Attenuation(out AIStimulus Stimulus);// 0x20aef64
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x20aed48

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x11c, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3a10b8c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x3a10b0c
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x3a109f8

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xc8, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xcc, Size: 4]
	float StepHeight;//[Offset: 0xd0, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xd4, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xd8, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xdc, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xe0, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x120, Size: 4]
	bool StopSkillSimulate();// 0x225b320
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x225b254
	void SetVelocity(Vector InVelocity);// 0x225b1e4
	void SetSimulatePhysics(bool bInEnabled);// 0x225b168
	void SetEnabled(bool InEnabled);// 0x225b0ec
	void SetCharacterMovementActive(bool _bIsActive);// 0x225b06c
	bool IsOnGround();// 0x225b044
	Vector GetVelocity();// 0x225affc
	bool FindGround();// 0x225afd4
	void AddVelocity(Vector InVelocity);// 0x225af64
	void ActivatePhysics();// 0x225af50

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xc8, Size: 1]
	byte Type;//[Offset: 0xc9, Size: 1]
	int TypeId;//[Offset: 0xcc, Size: 4]
	void SetActorVisible(bool bEnable);// 0x1f964cc

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x150, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 1]
	int CustomBeginIndex;//[Offset: 0x160, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x168, Size: 12]
	float DestinyThreshold;//[Offset: 0x174, Size: 4]
	int RoundNum;//[Offset: 0x178, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x180, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x188, Size: 4]
	float LowProbRatio;//[Offset: 0x18c, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x194, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x198, Size: 4]
	Actor* InnerCircle;//[Offset: 0x19c, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x1a0, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	Vector BlueCircle;//[Offset: 0x1d4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1e0, Size: 12]
	int CurrentIndex;//[Offset: 0x1ec, Size: 4]
	Actor* ContainActor;//[Offset: 0x1f0, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	delegate OnCircleBegin;//[Offset: 0x2e4, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2f0, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2fc, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x308, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x314, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x320, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x32c, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x334, Size: 12]
	bool WhitCircleIsOutOfBlueCircle();// 0x1fdf1a8
	void StartCircleFromBegin();// 0x1fdf194
	void SetGMCicleTime(float cdTime, float LastTime);// 0x1fdf098
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x1fdefd0
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x1fdeef4
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x1fdede8
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x1fded20
	void MakePain(Actor* _actor, float _desireDamage);// 0x1fdec64
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x1fdebac
	bool MakeCurrentWhiteCircle(int Index);// 0x1fdeb24
	bool IsUseCustomWhiteCircle();// 0x1fdeafc
	bool IsPositionInBlueCircle(out const Vector Position);// 0x1fdea70
	bool IsInBlueCircle(Actor* _actor);// 0x1fde9f0
	bool HasDoubleCircleEnabled();// 0x1fde9d4
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ);// 0x1fde88c
	Vector GetWhiteCircle(int Index);// 0x1fde7fc
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x1fde77c
	Vector GetInnerCircleInfo();// 0x1fde758
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x1fde684
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x1fde5f4
	Vector GetCurrentWhiteCircle();// 0x1fde5d0
	int GetCurrentCircleIndex();// 0x1fde5a8
	Vector GetCurrentBlueCircle();// 0x1fde584
	void ApplyCircleOffset(Vector InOffset);// 0x1fde514

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xcc, Size: 12]
	FString TimerName;//[Offset: 0xd8, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	float[] BlueCirclePreWarning;//[Offset: 0x10, Size: 12]
	float LastTime;//[Offset: 0x1c, Size: 4]
	float Pain;//[Offset: 0x20, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	Vector2D bluepoint;//[Offset: 0x28, Size: 8]
	float blueradius;//[Offset: 0x30, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x38, Size: 12]
	float whiteradius;//[Offset: 0x44, Size: 4]
	float Alpha;//[Offset: 0x48, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float DestinyChance;//[Offset: 0x50, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x58, Size: 4]
	float ExtraRadius;//[Offset: 0x5c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x64, Size: 4]
	float DamageMagnifier;//[Offset: 0x68, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x6c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x70, Size: 12]
	float EdgeDistance;//[Offset: 0x7c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2dc, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool IsInWater(Vector Position);// 0x1fdfda4
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x1fdfc78

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTimeHighPrecision();// 0x20928e8
	float SimulatedCharacterServerTime();// 0x2091a1c
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* shooter, out const BulletHitInfoUploadData ShootData);// 0x21171d8

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x308, Size: 44]
	int KeepStillMinTime;//[Offset: 0x334, Size: 4]
	float StillMaxSpeed;//[Offset: 0x338, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x33c, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x348, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x354, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x360, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x36c, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x378, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x384, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x388, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x394, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x3a0, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x3ac, Size: 12]
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x2091bac
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x2091a4c
	float SimulatedCharacterServerTime();// 0x2091a1c

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x588, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x58c, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x590, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x594, Size: 1]
	float InterpSpeed;//[Offset: 0x598, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	float ScaleOfPawn;//[Offset: 0x5a0, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x5a4, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x5e4, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x5ec, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x2030e50
	Vector GetIKEffectorOffsetMinValue();// 0x2030e24
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x2030c40

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52a, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52b, Size: 1]
	Vector ServerShootPos;//[Offset: 0x52c, Size: 12]
	float ServerShootTime;//[Offset: 0x538, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x540, Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x5b0, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x1fa5440
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x2107b38
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x2107a20
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1fa539c
	void OnImpact(out const HitResult _ImpactResult);// 0x1fa52f8
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2107824

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0xd8, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0xe4, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0xe8, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0xf0, Size: 8]
	float ScopeInDelayTime;//[Offset: 0xf8, Size: 4]
	float InitialLockFrameLength;//[Offset: 0xfc, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x100, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x104, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x108, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x10c, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x110, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x114, Size: 4]
	float TraceTargetInterval;//[Offset: 0x118, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x11c, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x120, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x15c, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x198, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1d4, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x1d8, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x1dc, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x1e0, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1e4, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x1ec, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x1f8, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x204, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x220, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x224, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x228, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x2131cc0
	void SetCurrentLockTarget(Actor* InTarget);// 0x2131c48
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x2131b4c
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x2131a98
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x213199c
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x21318e8
	void RemoveTargetList(Actor*[] TargetList);// 0x2131790
	void RemoveTarget(Actor* Target);// 0x2131718
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x2bbd2f4
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x2bbd2f4
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x2bbd2f4
	void InitComplete();// 0x1f4cfe0
	void HandleTargetOutOfSeekArea();// 0x2131704
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x208afc8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x2131684
	enum GetCurrentSeekAndLockStage();// 0x2131654
	Actor* GetCurrentLockTarget();// 0x213162c
	bool CheckTargetIsVisible(Actor* Target);// 0x209586c
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x21315ac
	void AddTarget(Actor* Target);// 0x2131534

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xdc, Size: 12]
	delegate OnBuffDetached;//[Offset: 0xe8, Size: 12]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x134, Size: 12]
	FString ServerBuffString;//[Offset: 0x140, Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x14c, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x150, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x23db8b4
	void ResetForDeath();// 0x23db8a0
	void RepBuffSyncList();// 0x23db88c
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x23db770
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x23db614
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23db4f8
	void RefreshAllBuffs();// 0x20c3724
	bool IsBufferMutexed(FName NewBuffName);// 0x23db478
	bool HasBuffID(int BuffID);// 0x23db3f8
	bool HasBuff(FName BuffName);// 0x23db378
	Pawn* GetPawnOwner();// 0x23db350
	FName GetBuffName(int BuffID);// 0x23db2c8
	int GetBuffID(FName BuffName);// 0x23db248
	float GetBuffExpiry(out const FName BuffName);// 0x23db1b4
	STBaseBuff* GetBuffByName(FName BuffName);// 0x23db134
	Actor* GetActorOwner();// 0x23db10c
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23daeac
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23dafc0
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23daeac
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23dad60
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x23dac9c
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x23dabcc
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x23daaf8
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x2bbd2f4
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x2bbd2f4
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x23daa34
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x23da968
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23da810
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x23da674

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 4]
	int LayerCount;//[Offset: 0xc, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x10, Size: 4]
	float RemainingTime;//[Offset: 0x14, Size: 4]
	float ExpireTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 8]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float Expiry;//[Offset: 0x20, Size: 4]
	Actor* Target;//[Offset: 0x24, Size: 4]
	Actor* BuffApplier;//[Offset: 0x28, Size: 4]
	int BuffIndex;//[Offset: 0x2c, Size: 4]
	uint32 DamageCauseID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString DisplayName;//[Offset: 0x30, Size: 12]
	FString Message;//[Offset: 0x3c, Size: 12]
	Texture2D* Icon;//[Offset: 0x48, Size: 4]
	SoundBase* SoundData;//[Offset: 0x4c, Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	int LayerMax;//[Offset: 0x58, Size: 4]
	int InitialLayerCount;//[Offset: 0x5c, Size: 4]
	int LayerCount;//[Offset: 0x60, Size: 4]
	float ValidityTime;//[Offset: 0x64, Size: 4]
	float Internal;//[Offset: 0x68, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x6c, Size: 12]
	float Expiry;//[Offset: 0x78, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x7c, Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x8a, Size: 1]
	FName[] MutexBuffers;//[Offset: 0x8c, Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x98, Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa4, Size: 12]
	float fADScale;//[Offset: 0xb0, Size: 4]
	float fAPScale;//[Offset: 0xb4, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	Controller* CauserPawnController;//[Offset: 0xbc, Size: 4]
	Actor* CauserPawnActor;//[Offset: 0xc0, Size: 4]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0xd0, Size: 12]
	Actor* BuffApplier;//[Offset: 0xdc, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xe0, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x4ec3ef4
	bool IsOK_Internal();// 0x4ec3e80
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x4ec3d90
	UTSkill* GetOwnerSkill();// 0x4ec3d28

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	FString EffectName;//[Offset: 0xd0, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0xdc, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0xe0, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0xe8, Size: 4]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4ec7774
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x4ec75f8
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x4ec73f0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x4ec7274
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4ec70f8
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x4ec6f84
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x4ec6e08
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x4ec6c80
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x4ec6b00
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x4ec6984
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x4ec67d0
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x4ec66b0
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x4ec6590
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x4ec6470
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x4ec6350
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x4ec6230
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x4ec6110
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x4ec5ff0
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x4ec5ed0
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x4ec5db0
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x4ec5c90
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x4ec5b70
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x4ec5a54
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x4ec58e0
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x4ec57a0
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x4ec5654
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x4ec5514
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x4ec53f8
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x4ec52c0
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x4ec51a4
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x4ec5084
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x4ec4f68
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x4ec4e4c
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x4ec4d2c
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x4ec4bb8
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x4ec4acc
	UAEBlackboard* GetUAEBlackboard();// 0x4ec4a5c
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x4ec49ec
	Actor* GetOwnerPawn();// 0x4ec497c
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x4ec4874
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x4ec47e0

--------------------------------
Class: UTSkill.Actor.Object
	Pawn* OwnerPawn;//[Offset: 0x2e4, Size: 8]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	FString SkillName;//[Offset: 0x2f8, Size: 12]
	FName SkillGroup;//[Offset: 0x308, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	enum SkillCastType;//[Offset: 0x312, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	int SkillID;//[Offset: 0x318, Size: 4]
	enum SkillTargetType;//[Offset: 0x31c, Size: 1]
	FString SkillDescription;//[Offset: 0x320, Size: 12]
	FString SkillDetailDes;//[Offset: 0x32c, Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x340, Size: 312]
	int SkillCategory;//[Offset: 0x478, Size: 4]
	Texture2D* SkillIcon;//[Offset: 0x47c, Size: 4]
	Texture2D* SkillVehicleIcon;//[Offset: 0x480, Size: 4]
	FString SkillVehicleName;//[Offset: 0x484, Size: 12]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x494, Size: 12]
	bool IsCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x4a4, Size: 12]
	Actor* LastSpawnedActor;//[Offset: 0x4b0, Size: 8]
	Pawn* LastSpawnedPawn;//[Offset: 0x4b8, Size: 8]
	float PhasePercentage;//[Offset: 0x514, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x518, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x554, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x558, Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x568, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x570, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x57c, Size: 4]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x580, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x588, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4ebb368
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x4ebb224
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x4ebb058
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebaf68
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x4ebaf00
	UAEBlackboard* GetSpecificBlackboard();// 0x4ebae98
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebadbc
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x4ebac80
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x4ebab94
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x4eba99c
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x4eba7f8
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x4eba6a8
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4eba558
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x4eba3d4

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillGroupIndex;//[Offset: 0x4, Size: 4]
	float interval;//[Offset: 0x8, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0xc, Size: 4]
	FString CoolDownMessage;//[Offset: 0x10, Size: 12]
	int CoolDownMessageID;//[Offset: 0x1c, Size: 4]
	float Range;//[Offset: 0x20, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x24, Size: 12]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x34, Size: 12]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x40, Size: 60]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x7c, Size: 60]
	SoftClassPath SkillMainWidget;//[Offset: 0xb8, Size: 24]
	FName SkillWidgetAttachPanelName;//[Offset: 0xd0, Size: 8]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0xdc, Size: 60]
	int SkillMainWidgetHandle;//[Offset: 0x118, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x120, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x12c, Size: 12]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xcc, Size: 12]
	FString PhaseDescription;//[Offset: 0xd8, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0xe8, Size: 8]
	int ActionsTopHalfCount;//[Offset: 0x108, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x10c, Size: 104]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x174, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x4edb2e4
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4edb200
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4edb11c
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4edb038
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4edaedc
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4edad80
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x4edac9c
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4edab3c
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4eda9dc
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x4eda900
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4eda810
	bool ClearAttachments();// 0x4eda7a4
	void AddSkillConditionLua(UTSkill* InSkill, FString InLuaPath);// 0x4eda628
	void AddSkillActionLua(UTSkill* InSkill, FString InLuaPath);// 0x4eda4ac

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	int CoolDownIndex;//[Offset: 0x1c, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x20, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x2c, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x30, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x3c, Size: 12]
	enum PhaseType;//[Offset: 0x48, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x4c, Size: 4]
	FString EnterPhaseTipString;//[Offset: 0x50, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0xf0, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x11c, Size: 12]
	Actor*[] IgnoreTargets;//[Offset: 0x128, Size: 12]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte hitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0xec, Size: 4]
	float fAPScale;//[Offset: 0xf0, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0xf4, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x4ec8bc4
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ec8ae0
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc618
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc4c8
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc378
	void OnAsyncLoadSoftPathDone();// 0x4ec8a80
	UTSkill* GetOwnerSkill();// 0x4ec3d28
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4ec8930
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebc144

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x160, Size: 4]
	Actor* OwnerActor;//[Offset: 0x174, Size: 4]
	int[] SkillInitIndices;//[Offset: 0x178, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187, Size: 1]
	bool NeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x18c, Size: 60]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x1c8, Size: 12]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x1d4, Size: 4]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x1d8, Size: 4]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x1dc, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x218, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x254, Size: 12]
	Actor* Target;//[Offset: 0x260, Size: 4]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x264, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2a0, Size: 12]
	delegate OnSkillHit;//[Offset: 0x2ac, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2b8, Size: 12]
	float PhasePercentage;//[Offset: 0x2dc, Size: 4]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2e0, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x31c, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x328, Size: 60]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x364, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x374, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x39c, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x3c4, Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x3d4, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x3e0, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x3e4, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x3ec, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x3f0, Size: 60]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	float ZombieModeUseSkillCD;//[Offset: 0x43c, Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x444, Size: 4]
	SkillParamater[] SkillParamaters;//[Offset: 0x458, Size: 12]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x464, Size: 12]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x47c, Size: 12]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x498, Size: 60]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x4d4, Size: 60]
	delegate OnSkillInitSignature;//[Offset: 0x558, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x564, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x570, Size: 12]
	delegate SkillNormalStopEvent;//[Offset: 0x57c, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x588, Size: 12]
	<int,byte> CurSKillLevels;//[Offset: 0x594, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x5d0, Size: 12]
	void UpdateSyncSkillCDData(int SkillID);// 0x4ed5154
	void UpdateSyncSkillActiveState(int SkillID);// 0x4ed5084
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x4ed4fb4
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x4ed4e44
	void TryAddOneSkill(int SkillID, bool bActive);// 0x4ed4cd4
	void TriggerEvent(int SkillID, byte EventType);// 0x4ed4b80
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x4ed4874
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x4ed465c
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x4ed4500
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x4ed43c4
	void StopSkillAll(enum StopReason);// 0x4ed42dc
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x4ed418c
	int StopSkill_Mutil(int SkillID, enum StopReason);// 0x4ed4034
	void StopSkill(int SkillID, enum StopReason);// 0x4ed3ee4
	bool ShouldTriggerEvent_WithID(int SkillID, byte EventType);// 0x4ed3d84
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x4ed3c24
	bool SetupOwnerAndSystem();// 0x4ed3bb8
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x4ed3a6c
	void SetSkillOwner(Actor* tempActor);// 0x4ed3988
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x4ed3850
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x4ed3718
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x4ed35e0
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet);// 0x4ed33c4
	void SetCurSkill(int SkillID, int SkillSlot);// 0x4ed328c
	void ServerTriggerEvent_WithID(int SkillID, byte EventType);// 0x4ed30f4
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x4ed2f5c
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x4ed2dd8
	void ServerNotifyRandomSeed(int Seed);// 0x4ed2cb8
	void ResimulateAllSynData();// 0x4ed2c50
	void ResetSkillCollDown(int SkillID);// 0x4ed2b6c
	void ResetAllSkillCollDown();// 0x4ed2b04
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x4ed2824
	void RepSkillHitInfo();// 0x4ed27c4
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x4ed268c
	void RepLastCastTime();// 0x4ed262c
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x4ed24f4
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath ObjPath);// 0x4ed22c8
	void RemoveReplacedSkill(int OldSkillID);// 0x4ed21f8
	void RemoveAllSkillUIWidget();// 0x4ed2198
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath ObjPath);// 0x4ed1f6c
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x4ed1e34
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x4ed1cf4
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x4ed1bac
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x4ed1a5c
	static bool OnSameTeam(Actor* A, Actor* B);// 0x4ed1924
	void OnRep_SkillSynSinglePhaseData();// 0x4ed18bc
	void OnRep_SkillSynData();// 0x4ed1854
	void OnRep_SkillHitInfo();// 0x4ed17ec
	void OnRep_SkillCDDatas();// 0x4ed178c
	void OnRep_SkillActiveState();// 0x4ed172c
	void OnRep_ReplaceSkill();// 0x4ed16cc
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x4ed157c
	bool IsUsingSkill(int SkillID);// 0x4ed14a0
	bool IsSkillActived(int SkillID);// 0x4ed13c4
	bool IsReadyToCastSkill(int SkillID);// 0x4ed12d4
	bool IsCurrentUseSkillID(int InSkillID);// 0x4ed11f8
	bool IsCastingSkill();// 0x4ed1184
	void InitSkillSystem_WithID(bool IsDedicateServer);// 0x4ed1074
	void InitSkillSystem(bool IsDedicateServer);// 0x4ed0f64
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x4ed0e78
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x4ed0da0
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x4ed0cb4
	UTSkillStateSyncData[] GetSkillState();// 0x4ed0c20
	int GetSkillSlotBySkillID(int SkillID);// 0x4ed0b48
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x4ed0a70
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x4ed093c
	int GetSkillLevel(int SkillID);// 0x4ed0864
	int GetSkillLastPhase(UTSkill* Skill);// 0x4ed078c
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x4ed06a0
	int GetSkillIDByClass(class Object SkillClass);// 0x4ed05b4
	int GetSkillCurPhase(UTSkill* Skill);// 0x4ed04dc
	UTSkill* GetSkillByName(FString SkillName);// 0x4ed0364
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x4ed01ec
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x4ed00f8
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x4ed0004
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x4ecff10
	UTSkill* GetSkill(int SkillID);// 0x4ecfe24
	int GetReplacedSkill(int OldSkillID);// 0x4ecfd4c
	byte GetRealOwnerRoleSafety();// 0x4ecfcc4
	float GetLastCastTime_WithID(int SkillID);// 0x4ecfbe8
	float GetLastCastFinishTime_WithID(int SkillID);// 0x4ecfb0c
	int[] GetCurUsingSkillIDS();// 0x4ecfa78
	UTSkill*[] GetCurSkills();// 0x4ecf9e4
	UTSkillPhase*[] GetCurSkillPhases();// 0x4ecf950
	UTSkillPhase* GetCurSkillPhase_Mutil(int SkillSlot);// 0x4ecf878
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x4ecf7a0
	int[] GetCurSkillIDs();// 0x4ecf720
	int GetCurSkillID(UTSkill* Skill);// 0x4ecf648
	UTSkill* GetCurSkill_Mutil(int SkillSlot);// 0x4ecf570
	UTSkill* GetCurSkill(int SkillSlot);// 0x4ecf498
	int[] GetCurMonopolizeSkills();// 0x4ecf404
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x4ecf1ec
	UTSkill* FetchSkill_WithID(out int SkillID);// 0x4ecf0c8
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x4ecef50
	void ClearSkill();// 0x4eceee8

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int SkillLevel;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	float LastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTMutilSkillSynData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]
	byte UpdateFlag;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x358, Size: 4]
	int SkillID;//[Offset: 0x35c, Size: 4]
	float TickInterval;//[Offset: 0x360, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x4ede41c
	void TriggerEvent(byte SkillEvent);// 0x4ede348
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x4ede278
	void SetSkillID(int InSkillID);// 0x4ede1a8
	void RemoveSkillUI();// 0x4ede140
	void RemoveFromUIManager();// 0x4ede0e0
	void OnSkillStopEvent(int InSkillID, enum InStopReason);// 0x4eddf90
	void OnSkillStartEvent(int InSkillID);// 0x4eddeac
	bool IsTickFinish();// 0x4edde40
	bool IsCDReady();// 0x4edddd4
	FString GetSkillName();// 0x4eddd40
	UTSkillManagerComponent* GetSkillManager();// 0x4eddcd8
	int GetSkillID();// 0x4eddc70
	float[] GetSkillCDProgess();// 0x4eddbdc
	float[] GetSkillCDByType(int Type);// 0x4eddad4
	UTSkillCDBase*[] GetSkillCDBases();// 0x4edda40
	UTSkill* GetSkill();// 0x4edd9d8
	float GetMaxEnergy(int Index);// 0x4edd8fc
	PlayerController* GetLocalPlayerController();// 0x4edd894
	float GetEnergyValue(int Index);// 0x4edd7b8
	float GetEnergyThreshold(int Index);// 0x4edd6dc
	float GetDeltaEnergy(int Index);// 0x4edd600
	void DoRemove();// 0x4edd5a0

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x348, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x70, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x78, Size: 8]
	enum cdType;//[Offset: 0x80, Size: 1]
	FString cdTypeStr;//[Offset: 0x84, Size: 12]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x90, Size: 4]
	bool StopConsumCD();// 0x4ec30e0
	bool IsTickFinish();// 0x4ec306c
	bool IsCDReady();// 0x4ec2ff8
	float GetCurrentTime();// 0x4ec2f84
	bool ForceConsumCD();// 0x4ec2f10
	bool ConsumCD();// 0x4ec2e9c

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x64, Size: 12]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0xec, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0xf0, Size: 12]
	FName PreEventActionTag;//[Offset: 0x100, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x108, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x10c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x118, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x20, Size: 60]
	<int,FString> AllSkillPathMap;//[Offset: 0x5c, Size: 60]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x100, Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0x104, Size: 4]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	Object* EventObj;//[Offset: 0x10c, Size: 4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x4ebcd3c
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x4ebcbf8
	void UndoAction_Internal();// 0x4ebcb90
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebcac0
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebc9f0
	void Reset_Internal();// 0x4ebc988
	void Reset(ActorComponent* SkillManagerComponent);// 0x4ebc8b8
	bool RealDoAction_Internal();// 0x4ebc844
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebc768
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc618
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc4c8
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4ebc378
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebc2a8
	bool JudgeNeedPhaseWait();// 0x4ebc234
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4ebc144

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xcc, Size: 4]
	int MaxCheatTimes;//[Offset: 0xd0, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xd4, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xd8, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xdc, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xe0, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xe4, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xe8, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xf0, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xf4, Size: 4]
	float MaxSkeletonLength;//[Offset: 0xf8, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xfc, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x100, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x104, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x108, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x10c, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x110, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x114, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x120, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x12c, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x138, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x144, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x150, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x15c, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x168, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x174, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x180, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x18c, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x198, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x1a4, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1b0, Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x22c, Size: 136]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2b4, Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x304, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x338, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x3b0, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x418, Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x438, Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9b0, Size: 4]
	Character* CharacterOwner;//[Offset: 0x9b4, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xa2c, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x20bfd50
	void RefreshRealMaxJumpHeight();// 0x1f4cfe0
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x20bfbd4
	void Ping2Client(float ServerTime);// 0x20bfb5c
	void OnPreReconnectOnServer();// 0x20bfb48
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x20bf8dc
	void DebugDrawLine(const Vector Start, const Vector End);// 0x20bf830
	void ClearJumpLimit();// 0x1f4cfe0

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int VerifyFailedCnt;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24, Size: 4]
	int MaxClientSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xc8, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x1f2cc5c
	void InitializeFollow();// 0x1f2cc40
	void Initialize(Actor* Actor);// 0x1f2cbc0

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xc8, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xcc, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xd4, Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xe0, Size: 12]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xec, Size: 12]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0xf8, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0x108, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x114, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x124, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x134, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x138, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x13c, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x15c, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x164, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x16c, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1a8, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1b0, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x1f4cf60
	void UpdateAllInstanceBodyTransform(int Type);// 0x2085a38
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x20db3e4
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x20db350
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x20db284
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x20db110
	byte GetCurHitPartJugementType();// 0x20db0e8
	void CloseBodyBulletCollision();// 0x1f2cc40
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x20daf4c

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xc8, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xcc, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0x108, Size: 12]
	byte RoleBits;//[Offset: 0x114, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xc8, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xcc, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1f93158

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x128, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x13c, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x140, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x144, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x148, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x14c, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x150, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x154, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x158, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x15c, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x160, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x164, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x168, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x16c, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x170, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x174, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x178, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x17c, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float Opened_AcceFall;//[Offset: 0x184, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x188, Size: 4]
	float Opened_AcceForward;//[Offset: 0x18c, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x190, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x194, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x198, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x19c, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1a0, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1a4, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1a8, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1ac, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1b0, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1b4, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1b8, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1bc, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1c0, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x1c4, Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x1d0, Size: 12]
	Vector Launch_Accel;//[Offset: 0x1dc, Size: 12]
	float Launch_YawRandomDelta;//[Offset: 0x1e8, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x1ec, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x1f0, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x1f4, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x1f8, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x1fc, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x200, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x204, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x208, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x20c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x210, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x21c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x228, Size: 12]
	float CurrentFallSpeed;//[Offset: 0x234, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x238, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x23c, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float FollowerDist;//[Offset: 0x268, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x26c, Size: 4]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x2c8, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x2f0, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x2f8, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x2fc, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x300, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x304, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x308, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x1fd5878
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1fd56dc
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x1fd5594
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1fd53f8
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x1fd52f8
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x1fd51f8
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x1fd50ac
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x1fd4f58
	void StopParachute();// 0x1fd4f44
	void StartParachute();// 0x1fd4f30
	void SetAutoParachuteLocation(out const Vector Location);// 0x1fd4eac
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x1fd4e2c
	void ResetVelocity();// 0x1fd4e18
	void RemoveRadiouBlur();// 0x1fd4e04
	void PostNetReceiveNewState();// 0x1fd4df0
	void OnPreReconnectOnServer();// 0x1fd4ddc
	void OnAsyncLoadRadiouBlurDone();// 0x1fd4dc8
	static bool IsParachuteWindEnable();// 0x1fd4da0
	bool IsAutoParachutePathPlanningEnable();// 0x1fd4d78
	bool IsAutoParachuteEnable();// 0x1fd4d50
	void InvalidateAdjustFollowerLocation();// 0x1fd4d3c
	void InitRadiouBlurMat();// 0x1fd4d28
	float GetReplicatedRightInput();// 0x1fd4d00
	float GetReplicatedForwardInput();// 0x1fd4cd8
	Vector GetParachuteVelocity();// 0x1fd4c90
	Vector GetLaunchInitVelocity();// 0x1fd4c40
	Vector GetCurVelocity();// 0x1fd4bf8
	float GetAutoParachuteMoveForwardRate();// 0x1fd4bd0
	Vector GetAutoParachuteLocation();// 0x1fd4b88
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x1fd4b08
	void EnableAutoParachute(bool bEnable);// 0x1f386c0
	void ClearParachuteStatusCache();// 0x1fd4af4
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1fd49d0
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1fd48b4
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1fd4790
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1fd4674
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x1fd4524
	void AdjustFollowerLocation();// 0x1fd4510
	void AddRadiouBlur(float InWeight);// 0x1fd4498

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x110, Size: 12]
	void UnRegistLuaTick();// 0x4f90028
	void RegistLuaTick(float TickInterval);// 0x4f90c74

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xc8, Size: 4]
	float TileRemovalRadius;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: GroupPhysicsComponent.ActorComponent.Object
	PrimitiveComponent*[] PrimitiveComponents;//[Offset: 0xec, Size: 12]
	void ResetPhysicsGroup();// 0x1f2cc40
	void K2_GroupPhysics(int InMaskFilter, bool EnableCache);// 0x206f1e0
	int K2_GetQueryMask();// 0x206f1b8
	int K2_GetPhysicsGroup();// 0x206f190
	bool IsPhysicsGrouped();// 0x206f174
	void GroupPhysics(byte MaskFilter, bool EnableCache);// 0x206f0a8
	byte GetQueryMask();// 0x206f080
	byte GetPhysicsGroup();// 0x206f058

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xdc, Size: 4]
	float AssistAccountableDuration;//[Offset: 0xe0, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xe4, Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xec, Size: 4]
	int MaxDeathTimes;//[Offset: 0xf0, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0xf8, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xfc, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x100, Size: 4]
	float Breath;//[Offset: 0x104, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x108, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x10c, Size: 4]
	float NDDecreaseRate;//[Offset: 0x110, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x118, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x11c, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x120, Size: 8]
	float BeCarriedReduceRate;//[Offset: 0x12c, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x130, Size: 4]
	float SetHealthSafety(float AddVal);// 0x217a8a0
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x217a78c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x217a678
	void ResetDataOnRespawn();// 0x217a664
	void RescueFinishSuccessfully();// 0x217a650
	void OnRep_BreathChanged();// 0x217a274
	bool IsNearDeathInvincible();// 0x217a628
	bool IsHealthAlive();// 0x217a600
	bool IsHaveLastBreathStatus();// 0x217a5d8
	bool IsFinishedLastBreathStatus();// 0x217a5b0
	void InitializeOwner(Pawn* TempPawn);// 0x217a538
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x217a370
	Controller* GetRecordedEventInstigator();// 0x217a354
	float GetBreathMax();// 0x217a338
	float GetBreath();// 0x217a31c
	void EnterSwimWhileDying();// 0x217a308
	void EnableDirectlyDie(bool bEnable);// 0x217a288
	void DoFinishLastBreath();// 0x217a274
	void ClearNearDeathTeammate();// 0x217a260
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x217a194
	void AddDeadBuff();// 0x217a180

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xc8, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xcc, Size: 4]
	anPickerData FanData;//[Offset: 0xd0, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x100, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x104, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x108, Size: 4]
	float RestoringDuration;//[Offset: 0x124, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x128, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x134, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x13c, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x217b844
	void WaitingConfirmState_ActOnUnsatisfied();// 0x217b830
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x2006b7c
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x217b808
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x217b7f4
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x2006b7c
	void TickAsHelper(float DeltaTime);// 0x217b77c
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x217b6c8
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x217b650
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x217b5d8
	bool RescueingState_IsConditionSatisfied();// 0x217b5b0
	void RescueingState_ActOnUnsatisfied();// 0x217b59c
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x2006b7c
	void RescueingProcessFinished();// 0x217b588
	void RefreshTargetChangeNotifyHUD();// 0x217b574
	bool PlayerConfirmToRescueClientSide();// 0x217b54c
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x217b478
	void OnRep_IsRescueingOtherStatusChange();// 0x217b464
	bool IsInRescueingStatus();// 0x217b43c
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x217b380
	float GetRestoringDuration();// 0x217b358
	void DrawDebugFan();// 0x1f4cfe0

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xc8, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xcc, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xd4, Size: 4]
	float CanFollowDist;//[Offset: 0xd8, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xdc, Size: 4]
	float QuitFollowDist;//[Offset: 0xe0, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xe4, Size: 4]
	float DistThrehold;//[Offset: 0xe8, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xf0, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xf8, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x130, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x13c, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x21768d8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x21768c4
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x2006b7c
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x217684c
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x21767d4
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x217675c
	bool PlayerStopFollow();// 0x2176734
	bool PlayerConfirmToFollow();// 0x217670c
	void InitializeOwner(Pawn* _TempPawn);// 0x2176694
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x217661c
	bool FollowingState_IsConditionSatisfied();// 0x21765f4
	void FollowingState_ActOnUnsatisfied();// 0x21765e0
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x2176568

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x20e1f4c
	byte Start();// 0x1fe897c
	bool IsValidate();// 0x20c9e40
	void DebugDraw(Color DebugColor, bool isPersist);// 0x2287844
	void Awake();// 0x20e1f30

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x1fff540
	FString ToString();// 0x2287908
	void TaskRemoved();// 0x20e1f4c
	byte Start();// 0x1fe897c
	bool IsValidate();// 0x20c9e40
	bool IsReachable();// 0x20556d0
	byte Finish();// 0x2055808
	void DebugDraw(Color DebugColor, bool isPersist);// 0x2287844
	void Awake();// 0x20e1f30

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x3bc, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x3c0, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x3c4, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x3c8, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f3, Size: 1]
	float ResultMinPitch;//[Offset: 0x3f4, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3f8, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x40c, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x410, Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x42c, Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x448, Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x464, Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x480, Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x49c, Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x4b8, Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x4d4, Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x4f0, Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x50c, Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x528, Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x544, Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x560, Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x57c, Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x598, Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x5b4, Size: 28]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x5d0, Size: 28]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x5ec, Size: 28]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x608, Size: 28]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x624, Size: 28]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x640, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x644, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x648, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x64c, Size: 28]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x66c, Size: 28]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	float AdditionalSocketOffetZMax;//[Offset: 0x690, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x694, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x69c, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x6a0, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x6a4, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ae, Size: 1]
	float OffsetCountTime;//[Offset: 0x6b0, Size: 4]
	float OffSetDurTime;//[Offset: 0x6b4, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x6b8, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x6bc, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x6c0, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x6f0, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x700, Size: 16]
	void SetSelfieCameraDefRotation();// 0x1ff0b7c
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x1ff0a70
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1ff09ac
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1ff0840
	void DelayRotationLagEnabledEnd();// 0x1ff082c
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x1ff0764
	void DelayRotationBackLagEnabledEnd();// 0x1ff0750
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x1ff0638

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x328, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x32c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x330, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x37c, Size: 28]
	CameraOffsetData DefaultCameraData;//[Offset: 0x398, Size: 28]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x3b8, Size: 4]
	void OnRespawned();// 0x1fa2494
	Rotator GetTargetRotation();// 0x225d424
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1ff0840
	void ClearCameraData();// 0x225d408

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x6a0, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x6a4, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x6a8, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x6ac, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x6cc, Size: 4]
	float EnterShovelCD;//[Offset: 0x6d0, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x6d4, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x6d8, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x6dc, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x6e0, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x6e4, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x6e8, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x6ec, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x6f0, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x6f4, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x6f8, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x6fc, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x700, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x704, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x708, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x710, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x714, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x718, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x71c, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x720, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x724, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x728, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x72c, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x730, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x734, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x738, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x73c, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x740, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x744, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x748, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x750, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x768, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x76c, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x770, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x774, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x778, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x77c, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x78b, Size: 1]
	float PreShovelFov;//[Offset: 0x78c, Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x7b4, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x7bc, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c2, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x7c4, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x7cc, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x7d4, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x7dc, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x7e0, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x7e4, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x7e8, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x7ec, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x7f0, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x7f4, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x7f8, Size: 4]
	float ProneFloorAngle;//[Offset: 0x7fc, Size: 4]
	float ProneFloorZ;//[Offset: 0x800, Size: 4]
	float JumpFloorAngle;//[Offset: 0x804, Size: 4]
	float JumpFloorZ;//[Offset: 0x808, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x80c, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x810, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x818, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x81c, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x838, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83a, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x83c, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	float CheckDistanceAhead;//[Offset: 0x928, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x930, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0x944, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0x948, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0x94c, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0x950, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0x958, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0x95c, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0x960, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0x968, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0x980, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0x98c, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0x9a4, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x9ac, Size: 4]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c5, Size: 1]
	float MaxFlyAcceleration;//[Offset: 0x9cc, Size: 4]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x2179008
	void ToggleUserCmdDelta(bool Val);// 0x2178f50
	void TimeSpeedCheck(bool Val);// 0x2178e98
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x2178dec
	void SetProneFloorZ(float InProneFloorZ);// 0x2178d74
	void SetProneFloorAngle(float InProneFloorAngle);// 0x2178cfc
	void SetJumpFloorZ(float InJumpFloorZ);// 0x2178c84
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x2178c0c
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x2178af4
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x21789c8
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x217877c
	void ServerUserMoveCmd(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x21785bc
	void RefreshCharacterWithBase();// 0x21785a8
	void Ping2Server(float ServerTime, float ClientTime);// 0x21784bc
	void Ping2Client(float ServerTime);// 0x2178444
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x217837c
	void OnRecoverOnServer();// 0x2178360
	void OnPreReconnectOnServer();// 0x217834c
	void OnClientCloseUserCmdDelta();// 0x2178338
	float K2_GetProneFloorZ();// 0x2178310
	float K2_GetProneFloorAngle();// 0x21782e8
	float K2_GetJumpFloorZ();// 0x21782c0
	float K2_GetJumpFloorAngle();// 0x2178298
	bool IsWalkable(out const HitResult Hit);// 0x21781ec
	bool IsProning();// 0x21781c4
	STExtraBaseCharacter* GetSTCharacter();// 0x217819c
	Vector GetPendingImpulse();// 0x2178178
	Vector GetLocationOffsetToBase();// 0x2178130
	float GetLastServerMoveTime();// 0x2178108
	bool GetIsOpenShovelingAbility();// 0x21780e0
	Vector GetBaseLocation();// 0x2178098
	bool DragOnGround(float DeltaTime);// 0x2178018
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2177d70
	void ClientUserMoveCmdAck(int Sequence);// 0x2177cf8
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x21779f0
	void ChangePhysxShapeFlag();// 0x1f4cfe0

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2dc, Size: 4]
	float MaxQuadLength;//[Offset: 0x2e0, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2e4, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2e8, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2ec, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float DefaultTrailLength;//[Offset: 0x2f4, Size: 4]
	float TextureLength;//[Offset: 0x2f8, Size: 4]
	int USegmentNum;//[Offset: 0x2fc, Size: 4]
	int CoordU;//[Offset: 0x300, Size: 4]
	int SlippingCoordU;//[Offset: 0x304, Size: 4]
	int BrokenCoordU;//[Offset: 0x308, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x310, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x314, Size: 4]
	int AdditionalCoordU;//[Offset: 0x318, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x31c, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x320, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x328, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x2294e74
	void StopUpdate();// 0x2294e60
	bool IsUpdating();// 0x2294e38

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x5a8, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	enum CollisionMode;//[Offset: 0x5b7, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5b8, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x5dc, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x5e8, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x5f4, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x610, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x64c, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x52ef2e0
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x52ef180
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x52ef0bc
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x52eeff8
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x52eef34
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x52eed8c
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x2bbd2f4
	bool IsMeshSectionVisible(int SectionIndex);// 0x52eed0c
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x52eec8c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x52eec0c
	int GetNumSections();// 0x52eebe4
	int GetLastSectionIndex();// 0x52eebbc
	int FirstAvailableMeshSectionIndex();// 0x52eeb94
	void EndBatchUpdates();// 0x52eeb80
	bool DoesSectionExist(int SectionIndex);// 0x52eeb00
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x52ee510
	void CookCollisionNow();// 0x52ee4fc
	void ClearMeshSection(int SectionIndex);// 0x52ee484
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x52ee40c
	void ClearCollisionConvexMeshes();// 0x52ee3f8
	void ClearAllMeshSections();// 0x52ee3e4
	void ClearAllMeshCollisionSections();// 0x52ee3d0
	void BeginBatchUpdates();// 0x52ee3b4
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x52ee258

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xc8, Size: 4]
	int DetectThreshold;//[Offset: 0xcc, Size: 4]
	float FoldFactor;//[Offset: 0xd0, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xd4, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xe0, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xec, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xf8, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x104, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x110, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x11c, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x12c, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x138, Size: 12]
	int FoldFactorDelt;//[Offset: 0x144, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x148, Size: 4]
	int TraceDis;//[Offset: 0x14c, Size: 4]
	float TickDeltTime;//[Offset: 0x150, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x15c, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x20f2d6c
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x20f2c34

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xc38, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xc3c, Size: 12]
	enum LiveState;//[Offset: 0xc48, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xc4c, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xc54, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xc58, Size: 4]
	float PlayerHealth;//[Offset: 0xc5c, Size: 4]
	float PlayerHealthMax;//[Offset: 0xc60, Size: 4]
	float PlayerTemperature;//[Offset: 0xc64, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xc68, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xc6c, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xc84, Size: 24]
	enum EUAVUseType;//[Offset: 0xc9c, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9d, Size: 1]
	enum eCurVehicleType;//[Offset: 0xc9e, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xc9f, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xca0, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xcac, Size: 12]
	Vector MapMark;//[Offset: 0xcb8, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	Vector RestartLocation;//[Offset: 0xcc8, Size: 12]
	Rotator RestartRotate;//[Offset: 0xcd4, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xce0, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xd1c, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xd58, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xd59, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xd5a, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xd5b, Size: 1]
	byte UserCancelCnt;//[Offset: 0xd5c, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xd5d, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xd60, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xd64, Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xd80, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xd84, Size: 12]
	int TeamMatePlayerStateIndex;//[Offset: 0xd90, Size: 4]
	int PlayerLayerID;//[Offset: 0xd94, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xd98, Size: 16]
	int Breath;//[Offset: 0xda8, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xdac, Size: 12]
	float EnegyBuffStage1;//[Offset: 0xdb8, Size: 4]
	float EnegyBuffStage2;//[Offset: 0xdbc, Size: 4]
	float EnegyBuffStage3;//[Offset: 0xdc0, Size: 4]
	float EnegyBuffStage4;//[Offset: 0xdc4, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xdc8, Size: 4]
	float CurEnegyBuff;//[Offset: 0xdcc, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xdd0, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xdd4, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xdd8, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xddc, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xde0, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xde4, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xde8, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xdec, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xdf0, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xdfc, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0xe18, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe25, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe26, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0xe2c, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0xe30, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0xe34, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0xe40, Size: 4]
	int ContinuousKillsNum;//[Offset: 0xe44, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0xe48, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xe54, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xe60, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xe64, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xe68, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6c, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xe70, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xe7c, Size: 12]
	int MaxDecalCount;//[Offset: 0xea0, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xea4, Size: 12]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xf04, Size: 12]
	float SignalHP;//[Offset: 0xf10, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0xf14, Size: 12]
	float SignalHPRemainingTime;//[Offset: 0xf20, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xf24, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xf28, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0xf2c, Size: 12]
	int RemainingRevivalTime;//[Offset: 0xf38, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3c, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3d, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3e, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3f, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0xf44, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 1]
	bool bIsBattleRoyaleRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf49, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xf50, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xf58, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xf64, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xf70, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xf7c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0xf88, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0xf94, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xfa0, Size: 12]
	float KdValue;//[Offset: 0xfac, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0xfc4, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0xfd8, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0xfe4, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0xff0, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x103c, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x1048, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1054, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x1060, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x106c, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1078, Size: 12]
	Actor* Plane;//[Offset: 0x1084, Size: 4]
	int FlightNo;//[Offset: 0x1088, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	void UpdateSelfHealthDataOnServer();// 0x2243ff4
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x2243f30
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x2243de0
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x2243c88
	void SetPlayerGiveUp(bool InGiveUp);// 0x2243c08
	void SetLastValidAirplaneInfo();// 0x2243bf4
	void SetForceSyncTeammateData(bool IsForCE);// 0x2243b78
	void SetAirplaneStopLoc(Vector StopLoc);// 0x2243af8
	void SetAirplaneStartLoc(Vector StarLoc);// 0x2243a78
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x22439f8
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x2243978
	void SaveBuffData();// 0x224395c
	void RPC_OnPlayerUnderAttack();// 0x2243940
	void RestoreBuffData();// 0x2243924
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x2243780
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x2243678
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x2243570
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x2243470
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x22433f8
	void RefreshRevivalState();// 0x22433e4
	void RefreshFollowMark();// 0x22433d0
	void RefreshAirplaneRoute();// 0x22433bc
	int PlayersCountOnMyPlane();// 0x2243394
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x2bbd2f4
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x2bbd2f4
	void OnRep_VisualFieldInfo();// 0x2243380
	void OnRep_UpdateKillMonsterNum();// 0x2243364
	void OnRep_TeamMatePlayerStateList();// 0x2243350
	void OnRep_TeamMatePlayerStateIndex();// 0x224333c
	void OnRep_SingleRoundTotalDamage();// 0x2243328
	void OnRep_SignalHP();// 0x2243314
	void OnRep_RemainingRevivalTime();// 0x2243300
	void OnRep_RankNotify();// 0x22432ec
	void OnRep_PlayerTemperatureChanged();// 0x22432d8
	void OnRep_PlayersCountOnPlane();// 0x22432c4
	void OnRep_PlayerReconnectEvent();// 0x22432b0
	void OnRep_PlayerName();// 0x1f39ec4
	void OnRep_PlayerLostConnectionEvent();// 0x224329c
	void OnRep_PlayerLiveStateInternal();// 0x2243288
	void OnRep_PlayerLiveState();// 0x224326c
	void OnRep_PlayerKillsChange();// 0x2243250
	void OnRep_PlayerIsFollowing();// 0x224323c
	void OnRep_PlayerGiveUp();// 0x2243220
	void OnRep_PlayerGameOver();// 0x224320c
	void OnRep_PlayerExitGameEvent();// 0x22431f8
	void OnRep_PlayerAliasShowInfoList();// 0x22431e4
	void OnRep_Plane();// 0x22431d0
	void OnRep_MarkSyncData();// 0x22431bc
	void OnRep_MarkSelfSyncData();// 0x22431a8
	void OnRep_MapMarkNotify();// 0x2243194
	void OnRep_LastVehicleLocation();// 0x2243180
	void OnRep_IsIDCardCaptured();// 0x224316c
	void OnRep_HPChanged();// 0x1f4cfe0
	void OnRep_HasRevivalSign();// 0x1fcf428
	void OnRep_HasEscaped();// 0x2243158
	void OnRep_ChangeRevivalState();// 0x224313c
	void OnRep_ChangeInRevivingState();// 0x2243128
	void OnRep_BreathChanged();// 0x2243114
	void OnRep_BPS();// 0x2243100
	void OnRep_AirplaneStopLoc();// 0x22430ec
	void OnRep_AirplaneStartLoc();// 0x22430d8
	void OnRep_AirplaneForceJumpLoc();// 0x22430c4
	void OnRep_AirplaneCanJumpLoc();// 0x22430b0
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x2bbd2f4
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void OnNewRound();// 0x2116210
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x2bbd2f4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x2bbd2f4
	void OnClientVeteranRecruitIndexUpdated();// 0x2243094
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x211614c
	void OnClientAddBuff(int BuffID, int SkillID);// 0x2116088
	void LuaReceiveBeginPlay();// 0x2243078
	void Kill(int ScoreNum, Character* VictimPawn);// 0x2242fb4
	bool IsSinglePlayer();// 0x2242f8c
	bool IsLocalPlayerState();// 0x2242f64
	bool IsInGame();// 0x2242f34
	bool IsInBetrayState();// 0x2242f04
	bool IsAlive();// 0x2242edc
	uint32 GetUserIDByMemberID(int memberID);// 0x2242e54
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x2242d30
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x2242cb0
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x2242c30
	int GetTeamMateIndexByName(FString TeammateName);// 0x2242b6c
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x2242aec
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x2242a28
	FString GetStringPlayerKey();// 0x2242968
	float GetPlayerTemperature();// 0x2242940
	int GetPlayerTeamIndex();// 0x2242918
	float GetPlayerMaxTemperature();// 0x22428f0
	float GetPlayerMaxHealth();// 0x22428c8
	int GetPlayerIndexInTeam();// 0x22428a0
	float GetPlayerHealthPercent();// 0x2242878
	float GetPlayerHealth();// 0x2242850
	STExtraBaseCharacter* GetPlayerCharacter();// 0x2242828
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x224277c
	float GetMaxEnegyBuff();// 0x224272c
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x22425c4
	Vector GetMapMark3DLocation();// 0x224257c
	Vector GetLastValidAirplaneForceJumpLoc();// 0x224254c
	Vector GetLastValidAirplaneCanJumpLoc();// 0x224251c
	Vector GetForceJumpLoc();// 0x22424ec
	Vector GetCanJumpLoc();// 0x22424bc
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x22423a0
	float GetBreathPercentage();// 0x2242378
	int GetBountyGold();// 0x2bbd2f4
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x2242338
	MarkSyncData[] GetAllSelfMarkData();// 0x22422d4
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x2242208
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x22420e4
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x2242038
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x2241e64
	Vector GetAirplaneStopLoc();// 0x2241e34
	Vector GetAirplaneStartLoc();// 0x2241e04
	Vector2D GetAirplaneForward2D();// 0x2241dc4
	void ForceNotifyAlertUpdate();// 0x2241db0
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x2241c58
	void FadeTeammatesMapMark();// 0x2241c44
	void DispatchPlayerExitEvent();// 0x2241c28
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x2241b94
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x2241acc
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x2241908
	void ChangeFadeMapMarkDist(float NewDist);// 0x224188c
	bool CanSelfRevive();// 0x224185c
	bool CanRevivalTeammate();// 0x2241834
	bool CanBeRevival();// 0x2241804
	byte CalculateEnegyStage();// 0x22417dc
	void BPKill(Character* VictimPawn);// 0x224175c
	void AddOneAssist();// 0x2172f68
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x2241698
	void AddEnegySafety(float AddVal);// 0x2241620
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x224155c
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x224144c

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xf28, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xf2c, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xf3c, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xf48, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xf70, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xf78, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xf80, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xf84, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0xf8c, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xf90, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xf9c, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xfa0, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xfb4, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xfb8, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xfbc, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xfc0, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xfc4, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xfc8, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xfcc, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xfd0, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xfd4, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0xfd8, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x1034, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1080, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1098, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x109c, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x10c4, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x10cc, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x10d0, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x10dc, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1138, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1140, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1148, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1150, Size: 8]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x2278fa8
	void PostLoadFPPMesh();// 0x21d1468
	void OnWheelsLanded();// 0x2278f94
	void OnRep_ReplicatedState();// 0x1f4cfe0
	void OnGearChanged(bool bIsUp);// 0x2278f14
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x2278dbc
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2278c28
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2278a94
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x2278840
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x22785ec
	float GetVehicleSpeed();// 0x22785c4
	float GetVehicleSlip();// 0x2278594
	Vector GetRotationInputDir();// 0x2182b24
	int GetCurrentGear(float MinRot);// 0x2278514
	void BroadcastClientVehicleWheelDestroyEffect();// 0x21a0138

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x37c, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x388, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x3a4, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3a8, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3bc, Size: 4]
	float MaxRPMLimit;//[Offset: 0x4e4, Size: 4]
	float TorqueRate;//[Offset: 0x4e8, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x4ec, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x4f8, Size: 12]
	FName RootBodyName;//[Offset: 0x508, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x2272114
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x227209c
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x2271f34
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x2271eb0
	void RefreshBodyCollision();// 0x2271e9c
	void OnExpoldeStopWheel();// 0x2271e88
	void MoveWheelShapeHeight(float Height);// 0x2271e10
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2271d10
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x2271b84
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2271a84
	int GetSuspensionIgnoreMask();// 0x2271a5c
	Vector GetLinearVelocity();// 0x2271a14
	Transform GetCMassLocalPose();// 0x22719b4
	void ForceWheelsRotate(float DriveTorque);// 0x227193c
	void ClearDestroyedWheel();// 0x2271928

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x270, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2dc, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2f8, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x320, Size: 88]
	float AckermannAccuracy;//[Offset: 0x378, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2dc, Size: 4]
	int DecalId;//[Offset: 0x2e0, Size: 4]
	int TeamID;//[Offset: 0x2e4, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2f0, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x370, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x374, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x37c, Size: 4]
	int PostEventID;//[Offset: 0x380, Size: 4]
	void RemoveSelfByParent();// 0x207e974
	void OnRep_DecalInfo();// 0x207e960
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x207e89c

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x5d, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x60, Size: 8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString TeamName;//[Offset: 0x28, Size: 12]
	uint64 UId;//[Offset: 0x38, Size: 8]
	uint32 PlayerKey;//[Offset: 0x40, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	int InstanceID;//[Offset: 0x20, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24, Size: 28]
	enum MapAdded;//[Offset: 0x40, Size: 1]
	int ActorUniqueID;//[Offset: 0x44, Size: 4]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 12]
	enum InWhichMap;//[Offset: 0x14, Size: 1]
	int CustomCanvasTag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x108, Size: 12]
	float MaxBreathAmount;//[Offset: 0x114, Size: 4]
	float DrowningHurtHight;//[Offset: 0x118, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x11c, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x120, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x124, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x128, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x12c, Size: 4]
	float BreathDeltaTime;//[Offset: 0x130, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x134, Size: 4]
	float MinSpeedScale;//[Offset: 0x138, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x13c, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x140, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x144, Size: 4]
	float RollMaxAngle;//[Offset: 0x148, Size: 4]
	float DistoVolume;//[Offset: 0x14c, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x16c, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x174, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x178, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x184, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x188, Size: 4]
	void UpdateSwimCollisionHeightCpp();// 0x20f73e0
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x20f7368
	void OnPawnExitParachute();// 0x20f7354
	void LeaveWater();// 0x20f7340
	Actor* GetWaterObject();// 0x20f7318
	void EnterWater_BluePrint();// 0x2bbd2f4
	void EnterWater(Actor* WaterObject);// 0x20f72a0
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x2bbd2f4

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4f0, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4f4, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4f8, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4fc, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x500, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x51c, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x528, Size: 12]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x1fd752c
	void UpdateDataWhenBagChangedOnAutonomous();// 0x1fd7518
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x1fd73bc
	void OnRecoverOnServer();// 0x1fd73a0
	void OnReconnectOnServer();// 0x1f5aac8
	void OnReconnectOnClient();// 0x1fd7384
	void OnDisconnectToClientOnServer();// 0x1fd7370
	int GetBagLevel();// 0x1fd7340

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x20, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x24, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x28, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x30, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x44, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x48, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x4c, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x50, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x54, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x58, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x5c, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	byte SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0xc, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x10, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x14, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]
	float MomentumResistance;//[Offset: 0x24, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x100, Size: 104]
	UAEGameMode* UAEGM;//[Offset: 0x168, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x212d398
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x212d2e8
	void ReportVerifyInfoFlow();// 0x212d28c
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x212d1bc
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x212d0cc
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x212cfdc
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x212cf0c
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x212ce3c
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x212cd0c
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x212cbdc
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x212cad8
	void ReportGameSetting(const GameSetting GameSetting);// 0x212c9e8
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x212c918
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x212c818
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x212c748
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x212c678
	void ReportAimFlow(const AimFlow AimFlow);// 0x212c5a8
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x212c518
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x212c354
	void CheckSendGameStartFlow();// 0x212c340
	void CheckSendGameEndFlow();// 0x212c32c

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x84, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x88, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x8c, Size: 4]
	int EnergyStartLv;//[Offset: 0x90, Size: 4]
	int EnergyStartTime;//[Offset: 0x94, Size: 4]
	FString EnergyItemUse;//[Offset: 0x98, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xa4, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xa8, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4, Size: 12]
	int EnergyEndLv;//[Offset: 0xc0, Size: 4]
	int EnergyEndTime;//[Offset: 0xc4, Size: 4]
	int PlayerMoveDis;//[Offset: 0xc8, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xcc, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xd0, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xd4, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xdc, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xe0, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xe4, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xe8, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xec, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xf0, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0xf4, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0xf8, Size: 4]
	int PlayerCar;//[Offset: 0xfc, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x100, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x104, Size: 4]
	byte AutoAimType;//[Offset: 0x108, Size: 1]
	int AutoAimTime;//[Offset: 0x10c, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x110, Size: 12]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]
	int IfIsOnCar;//[Offset: 0x188, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int KillAICnt;//[Offset: 0x190, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x270, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x278, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x280, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x2b0, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x2b4, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2b8, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2bc, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x2c0, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x2c4, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2d0, Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2dc, Size: 4]
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x2264890
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x2264818

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x2dc, Size: 4]
	float interval;//[Offset: 0x2e0, Size: 4]
	class DamageType* DamageType;//[Offset: 0x2e4, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x2e8, Size: 12]
	int[] BuffIDs;//[Offset: 0x2f4, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x300, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x30c, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x2315484
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x231539c

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x18c, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x27b6718
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x205b930
	void OnAnimListAsyncLoadingFinished();// 0x27b6704
	bool HasAnimAsyncLoadingFinished();// 0x27b66dc
	void HandleAsyncLoadingFinishedEvent();// 0x27b66c8
	FString GetOwnerName();// 0x27b6600
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x27b6580

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	byte Roll;//[Offset: 0xc, Size: 1]
	uint32 View;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x18c, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x198, Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x1a4, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1b0, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1bc, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1c8, Size: 4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1cc, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1d8, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e7, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x27b8dcc
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x27b8b30
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x27b8894
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x27b878c
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x27b8604

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x2e4, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x2ec, Size: 4]
	void RemingLifeTimeChanged(float previousRemaining);// 0x1fa49c4
	void RecordBonFireSuccess();// 0x1fa49b0
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x1fa4938
	void OnRep_HasBurnOut();// 0x1fa4924
	void OnRep_HasBeenLit();// 0x1fa4910
	void OnRep_CurRoastMeat();// 0x1fa48fc
	void IsBurnOutChanged();// 0x1f39ec4
	FString CastMsg_Implementation(FString Msg);// 0x1fa47b0

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x2dc, Size: 4]
	Controller* GetTheInstigatorController();// 0x1f4089c

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x2dc, Size: 8]
	enum AnimalType;//[Offset: 0x2e4, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	void RecordRoastMeatSuccess();// 0x21237c8
	void OnRep_IsDone();// 0x21237b4
	void CastActorMsg(FString Msg);// 0x21236f0

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0xc8, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0xdc, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0xec, Size: 12]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x2175350
	void InitializeOwner(Pawn* _TempPawn);// 0x21752d8
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x2175260

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float Angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x10c, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x148, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x14c, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x154, Size: 4]
	bool VaultFromCPP();// 0x1f95c50
	void UpdateVault_BluePrint();// 0x1fe6e54
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x2102400
	void StartAsyncLoadTeamVaultAnimRes();// 0x21023ec
	FString GetVaultKeyByBlockHeight(float Height);// 0x21022dc
	Rotator GetRelicateRotator();// 0x2102294
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x2102050
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x2101e0c
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x2101d94

--------------------------------
Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 12]
	FString TeamVaultAnimPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	int CarryBackSkillID;//[Offset: 0x158, Size: 4]
	int PutDownSkillID;//[Offset: 0x15c, Size: 4]
	int DSSwitchId;//[Offset: 0x160, Size: 4]
	enum State;//[Offset: 0x164, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x168, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x16c, Size: 4]
	enum DetachMethod;//[Offset: 0x170, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x188, Size: 12]
	void ReplaceCharacterAnimation(bool bReplace);// 0x2175dd8
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x2175cd8
	void LocalPutDownFailed();// 0x1f2cc40
	void LocalExitCarryBackState(bool bStop);// 0x2175c50
	void LocalExitBeCarriedBackState();// 0x2175c34
	void LocalEnterPutDownState();// 0x1fe6e54
	void LocalEnterCarryBackState();// 0x2175c18
	void LocalEnterBePutDownState();// 0x20c3724
	void LocalEnterBeCarriedBackState();// 0x2175bfc
	void LocalCompleteCarryBackState();// 0x2088a74
	void LocalCompleteBeCarriedBackState();// 0x2131cc0
	void LocalCarryBackFailed();// 0x20c3708
	bool IsInCarryBackState();// 0x2175bd4
	bool IsInBeCarriedBackState();// 0x2175bac

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 4]
	float MarkTimeLen;//[Offset: 0x4, Size: 4]
	int MarkIcon;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x3c8, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x3d0, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x3d8, Size: 4]
	float autoOpenAngel;//[Offset: 0x3dc, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x3e0, Size: 4]
	int doorState;//[Offset: 0x3e4, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	float DoorOperateTime;//[Offset: 0x3ec, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x3f0, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x3f4, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x3f8, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	int DoorStateEx;//[Offset: 0x400, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x408, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x40c, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x410, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x418, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x424, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x430, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x43c, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x440, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x44c, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x458, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x460, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x470, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	void SetDoorBroken(bool bExtraDoor);// 0x210b678
	void RefreshUIOnClient();// 0x210b664
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x210b5a0
	void OnRep_RepDoorStateEx();// 0x210b58c
	void OnRep_RepDoorState();// 0x210b578
	void OnRep_RepDoorBrokenEx();// 0x210b564
	void OnRep_RepDoorBroken();// 0x210b550
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x210b408
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x210b2c0
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x210b1fc
	void OnBPRespawned();// 0x1fa6eac
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x210b000
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x210ae04
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x210ad40
	bool IsSameDoorState(int ClientState);// 0x210acc0
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x210aa9c
	enum[] GetDamageableGameObjectType();// 0x210a9d4
	void ForceNetUpdate();// 0x20e7d58
	void DeCodeKey();// 0x1fe1db0
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x210a910
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x210a7ac
	void BPSetObjectPoolInitialData();// 0x1fa4158
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x2bbd2f4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x2bbd2f4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x2bbd2f4

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0, Size: 40]
	float blendTime;//[Offset: 0xc8, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0xe8, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0xf4, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x100, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x104, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x10c, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x118, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f6fd5c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f6f938
	bool HandleDrop(int InCount, enum Reason);// 0x1f6f354
	bool HandleDisuse(enum Reason);// 0x1f608bc
	BackpackComponent* GetBackpackComponent();// 0x1f722e8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1f72224

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	delegate OnActionReady;//[Offset: 0x38, Size: 12]
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x201601c
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x2015f40
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x2015e64
	bool GetIsExecuting();// 0x2015e48
	void Destroy();// 0x20133a8
	void DelayShow();// 0x20144c0

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xd8, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0xe0, Size: 8]
	FName FPPSocketName;//[Offset: 0xe8, Size: 8]
	FName BoltActionCurveName;//[Offset: 0xf0, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0xf8, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x100, Size: 4]
	float BoltActionFov;//[Offset: 0x104, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x108, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x10c, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x148, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x14c, Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x188, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x18c, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x19c, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x1d8, Size: 60]
	float TanHalfFOV;//[Offset: 0x218, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x220, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x228, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x1f966bc
	float SwitchSightConfigMaterial();// 0x2bbd2f4
	void SwitchScopeMeshAnim(byte Type);// 0x1f96644
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x1f965cc
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x1f96554
	void SwitchRearSight(bool IsBegin);// 0x1f964cc
	void SwitchCameraMode(byte Mode);// 0x1f96454
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x2bbd2f4
	void StopScopeIn();// 0x2bbd2f4
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x2bbd2f4
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x2bbd2f4
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x1f96388
	void SetTagCulling(bool IsUse);// 0x2bbd2f4
	void SetNearClipPlane(bool EnableNearClip);// 0x1f96308
	void ScopingChange(bool InValue);// 0x1f96288
	void Scoping(byte NewType);// 0x1f96210
	void ScopeZoomUpdate(float Alpha);// 0x1f96198
	void ScopeZoomTick(float DeltaTime);// 0x1f96120
	void ScopeTimelineUpdate(float Alpha);// 0x1f960a8
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1f95fec
	void ScopeOutLogic();// 0x1f95fd8
	void ScopeOutEnd();// 0x2bbd2f4
	void ScopeOut(byte NewType);// 0x1f95f60
	void ScopeNotHandFold();// 0x1f95f4c
	void ScopeInterrupt(byte NewType);// 0x1f95ed4
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1f95e18
	void ScopeInLogic();// 0x1f95e04
	void ScopeInEnd();// 0x2bbd2f4
	void ScopeInContinue();// 0x1f95df0
	void ScopeInAfterTimeline();// 0x1f95ddc
	void ScopeIn(byte NewType);// 0x1f95d64
	void ScopeHandFold();// 0x1f95d50
	void PlayScopeInTimeline();// 0x2bbd2f4
	bool IsUseZoomScope();// 0x1f95d28
	bool IsRPGScopeIn();// 0x1f95d00
	bool IsCurWeaponAttachedAngledSight();// 0x1f95aec
	bool IsAngledSightBySlot(byte Slot);// 0x1f95c80
	bool IsAngledSight();// 0x1f95c50
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x1f95b94
	bool HaveAngledSightBySlot(byte Slot);// 0x1f95b14
	bool HaveAngledSight();// 0x1f95aec
	byte GetSightType();// 0x1f95ac4
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x1f95a00
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x1f95934
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x2bbd2f4
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x1f958a4
	FName GetScopeAimCameraSocketName();// 0x1f95864
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x1f9581c
	STExtraWeapon* GetCurScopeWeapon();// 0x1f957f4
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x1f95714
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x1f955b4
	void BoltAction(float DeltaSeconds);// 0x1f9553c
	void AttachToSightKeepTransform();// 0x2bbd2f4
	void AttachToSight();// 0x2bbd2f4
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x1f9545c
	void ActiveComponentTickable();// 0x1f95448

--------------------------------
Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x68, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x70, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	FString CauserPicURL;//[Offset: 0x80, Size: 12]
	FString VictimPicURL;//[Offset: 0x8c, Size: 12]
	FString RealKillerName;//[Offset: 0x98, Size: 12]
	int RealKillNum;//[Offset: 0xa4, Size: 4]
	byte CauserType;//[Offset: 0xa8, Size: 1]
	byte VictimType;//[Offset: 0xa9, Size: 1]
	int CauserTeamID;//[Offset: 0xac, Size: 4]
	int VictimTeamID;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 12]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xc8, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	float GuideInterval;//[Offset: 0xd0, Size: 4]
	int MaxGuideLevel;//[Offset: 0xd4, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd8, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0x100, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x10c, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x118, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x140, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x14c, Size: 4]
	int[] FinishedTips;//[Offset: 0x150, Size: 12]
	int[] FinishedCounts;//[Offset: 0x15c, Size: 12]
	int PlayerLevel;//[Offset: 0x168, Size: 4]
	byte curPlayerCategory;//[Offset: 0x16c, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x20cadc0
	void ShowHideGuide(int TipsID, bool bShow);// 0x20cacfc
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x20cabf0
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x20cab74
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x2bbd2f4
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x20ca9f4
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x20ca6b0
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x20ca570
	void HandleNewbieGuideBegin(FString GuideID);// 0x20ca4b4
	bool GetIsAllowNewGuide();// 0x20ca48c
	bool GetIsAllowLuaNewGuide();// 0x20ca464
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x20ca2e4

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x60, Size: 8]
	FString LuaFilePath;//[Offset: 0x68, Size: 12]
	bool ReconnectRecover();// 0x1fe897c
	bool IsOK();// 0x1fe89c0

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x20c9e40

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x1fe897c
	void OnEventTrigger();// 0x1f605a0
	Actor* GetCurrentEventOwnerActor();// 0x1f40108
	bool EnableListener();// 0x2055808
	bool DisableListener();// 0x1fe89c0

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x2292610
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x22924fc
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x2292350
	void RPC_GetClientTimeRequest(int Index);// 0x229229c
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x22921a0
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x22920e0
	void ReportDebugInfo(int RporetedId);// 0x229202c
	void OnServerAboutToReconnect();// 0x2292018
	void GetClientTimeInterval();// 0x2292004
	void CheckTimeLine();// 0x2291ff0

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	float TimeStartDelay;//[Offset: 0xcc, Size: 4]
	float SyncInterval;//[Offset: 0xd0, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x2293a80
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x1f2cc5c
	void OnTimeInspectorColdMove_Vehicle();// 0x2293a6c
	void OnTimeInspectorColdMove_Own();// 0x2293a58
	void OnServerAboutToReconnect();// 0x2293a44
	void CheckTimeLine();// 0x2293a30

--------------------------------
Class: HiggsBosonComponent.ActorComponent.Object
	FString TraceData;//[Offset: 0x1dc, Size: 12]
	FString GameTraceData;//[Offset: 0x1e8, Size: 12]
	uint32 HeartBreaks;//[Offset: 0x1f4, Size: 4]
	FString HeartInfo;//[Offset: 0x1f8, Size: 12]
	delegate OnSwiftHawkDelegate;//[Offset: 0x204, Size: 12]
	delegate OnGlueHiaRayResult;//[Offset: 0x210, Size: 12]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x21c, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x220, Size: 4]
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x2079a00
	void ServerShowSecurityAlert(FString Tips);// 0x207993c
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg);// 0x207972c
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x20795a8
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x2079424
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x20792dc
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x20791dc
	void OnStopFireEvent();// 0x20791c8
	void OnStartFireEvent();// 0x20791b4
	void OnSkillInteruptVisual(const Actor* InTarget, const Actor* InCauser);// 0x20790f8
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x207903c
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x2078f80
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x2078ec4
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x2078e08
	void OnPlayerScopeOut(bool bBegan);// 0x2078d88
	void OnPlayerScopeIn(bool bBegan);// 0x2078d08
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x2078c90
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x2078c18
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x2078b18
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x20789c4
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x20788e4
	void FlushGameEnd();// 0x20788d0
	void ClientSwiftHawk(int SequenceID);// 0x1fc9c1c
	void ClientDoJT();// 0x20788bc

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x140, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x14c, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x158, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x164, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x170, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x17c, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x188, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x194, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x200, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x218, Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x224, Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x230, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x248, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x254, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x260, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x278, Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x284, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x290, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2b4, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2c0, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2cc, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2d0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2d4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2d8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2dc, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2e0, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2e4, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2e8, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2ec, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2f0, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2f4, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x300, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x30c, Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x318, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x324, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x330, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x33c, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x348, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x354, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x360, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x36c, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x378, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x384, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x390, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x39c, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x3a8, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3b4, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3b8, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3bc, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3c8, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3d4, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3e0, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3ec, Size: 12]
	float MaxFuelConsume;//[Offset: 0x3f8, Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x47c, Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x488, Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x494, Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x4a0, Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4ac, Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4b8, Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x4c4, Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x4d0, Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4dc, Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x4ec, Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x4f8, Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x504, Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x510, Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x51c, Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x528, Size: 12]
	VerifySwitch FarJump;//[Offset: 0x534, Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x540, Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x558, Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x564, Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x570, Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x57c, Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x588, Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x594, Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x5a0, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x5bc, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x5c0, Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x5e8, Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x5f4, Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x600, Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x60c, Size: 12]
	VerifySwitch BulletDirError;//[Offset: 0x618, Size: 12]
	float VehicleSpeedZDeltaTotal;//[Offset: 0x668, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0x66c, Size: 4]
	int VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0x670, Size: 4]
	void ReportAntiCheatDetailData();// 0x20ee670
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x20ee5d4
	void OnRecoverOnServer();// 0x20ee5c0
	void OnPreReconnectOnServer();// 0x20ee5ac

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x10, Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 4]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xc8, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xcc, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xd0, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x1fe36e4
	void SetAutoOpenDoorEnable(bool bEnable);// 0x1fe3664
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x1fe3568
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x1fe346c
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x1fe33ec
	PUBGDoor* GetPriorityDoor();// 0x1fe33c4
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x1fe326c
	void BP_SimulateUIClick(bool bExtraDoor);// 0x2bbd2f4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x2bbd2f4

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xcc, Size: 4]
	FString Reason;//[Offset: 0xd0, Size: 12]
	int[] audioChat;//[Offset: 0xdc, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xe8, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xf4, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0x100, Size: 12]
	FString TeammateColor;//[Offset: 0x10c, Size: 12]
	FString MyColor;//[Offset: 0x118, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x124, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x160, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x19c, Size: 12]
	float SendMsgCD;//[Offset: 0x1a8, Size: 4]
	float lastShowChatTime;//[Offset: 0x1ac, Size: 4]
	float ShowChatDuration;//[Offset: 0x1b0, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1b4, Size: 12]
	FString EndChar;//[Offset: 0x1c0, Size: 12]
	FString ColonChar;//[Offset: 0x1cc, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1d8, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x214, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x220, Size: 4]
	int itemIDOnGround;//[Offset: 0x234, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x238, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x23c, Size: 4]
	Vector hitItemPosition;//[Offset: 0x240, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x250, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x25c, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x268, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x274, Size: 72]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x2bbd2f4
	void ShowTeamMsg(out const InGameChatMsg msgItem, bool isMe, bool ShowChat);// 0x1fdacf0
	void ShowQuickPanel(bool bShow);// 0x1fdac70
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x1fdaaf8
	void ServerSendGift(const InGameChatMsg msgItem);// 0x1fda980
	void SendDirtyFilterContent(FString Content);// 0x2bbd2f4
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x2bbd2f4
	void ReportBattleChat(int MsgID, FString Msg, int msgExtraParam);// 0x2bbd2f4
	void OnInviteNextBattle(FString gid, FString Name);// 0x1fda840
	void OnFilterFinish(FString filterText);// 0x2bbd2f4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x2bbd2f4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x2bbd2f4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x2bbd2f4
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x1fda700
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x1fda574
	void FindTextIDByAudioID();// 0x2bbd2f4
	void CloseChatHistoryList();// 0x2bbd2f4
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x1fda3e0
	void ClientReceiveGift(const InGameChatMsg msgItem, bool isMe);// 0x1fda24c
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x1fda190
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x2bbd2f4
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x1fd9db8

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xc8, Size: 4]
	float PickUpZLimit;//[Offset: 0xcc, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xd4, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xe0, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0xe4, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xe8, Size: 4]
	Vector2D RegionXRange;//[Offset: 0xec, Size: 8]
	Vector2D RegionYRange;//[Offset: 0xf4, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x100, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x10c, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x110, Size: 4]
	float DrawTime;//[Offset: 0x114, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x11c, Size: 4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x120, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x12c, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x20e6624
	void ServerPutDownTarget(Actor* Target);// 0x20e6570
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20e63dc
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x20e6164
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x20e60a4
	void PutDownTarget(Actor* Target);// 0x20e602c
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x20e5df8
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20e5cb0
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x20e5c38
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x20e5b74
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x20e5ae4
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x20e5814
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x20e5708
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x20e5604
	void ControlClientPutDownTarget(Actor* Target);// 0x20e5550
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x20e5454
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x20e52a0
	void ClampWorldLocation(out Vector OutVector);// 0x20e521c

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemId;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xc8, Size: 12]
	Widget* MaskWidget;//[Offset: 0xd4, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x2074ff0
	void CreateGuideUI();// 0x2bbd2f4

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xc8, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xd4, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int TextID_OutRange;//[Offset: 0xe4, Size: 4]
	FString PreFix_Command;//[Offset: 0xe8, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xf4, Size: 12]
	FString PreFix_Mark;//[Offset: 0x100, Size: 12]
	int MinTraceDist;//[Offset: 0x10c, Size: 4]
	int MaxTraceDist;//[Offset: 0x110, Size: 4]
	int ItemTraceDist;//[Offset: 0x114, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x118, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x11c, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x120, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x124, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x128, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x12c, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x130, Size: 60]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x16c, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x170, Size: 60]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x1ac, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x1e8, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x224, Size: 60]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x260, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x29c, Size: 60]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x2d8, Size: 12]
	FString[] TempIDArray;//[Offset: 0x2e4, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x2f0, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x32c, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x368, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x3a4, Size: 60]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x3e0, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x211ca88
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x2bbd2f4
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x211c940
	void ServerMarkCustom(const QuickSignMsg msgItem, float ShareDistance, bool ShareWithTeammates);// 0x211c79c
	void ServerDelMsg(FString MsgID);// 0x211c6a8
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x211c558
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x2bbd2f4
	void RemoveActorMask(int ActorNetGUID);// 0x211c4a4
	void OperMark(FString MsgID);// 0x211c3e8
	void MakeQuickNeed(enum SignSubType);// 0x211c370
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x211c2f8
	void MakeQuickMark();// 0x211c2e4
	void MakeQuickCommand(byte SignType);// 0x211c26c
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x211c16c
	bool IsSelfMark(FString MsgID);// 0x211c0a8
	bool IsContainMark(FString MsgID);// 0x211bfe4
	int GetVoiceAudioID(enum MsgType);// 0x2bbd2f4
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x2bbd2f4
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x211bee0
	void DelMarkFromPool(FString MsgMark);// 0x211be24
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool IsSelf, bool ShowChat);// 0x211bcb0
	void DealWithMarkCustomMsg(out const QuickSignMsg msgItem, bool IsSelf);// 0x211bb8c
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x211ba70
	void ClientMarkCustomMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x211b954
	void ClientDelMsg(FString MsgID);// 0x211b890
	void ClientDelCustomMarkMsg(FString MsgID);// 0x207993c
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x211b750
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x211b680
	void AddActorMask(int ActorNetGUID);// 0x211b5cc

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString ReplyID;//[Offset: 0x48, Size: 12]
	Vector Loc;//[Offset: 0x54, Size: 12]
	int MaxNum;//[Offset: 0x60, Size: 4]
	int LifeSpan;//[Offset: 0x64, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x48, Size: 4]
	enum MsgType;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xc8, Size: 4]
	FString OwningPlayerName;//[Offset: 0xcc, Size: 12]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xd8, Size: 12]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xe4, Size: 60]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x1f99c40
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x1f99bc8
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x1f99abc
	int RetrieveLandLocType(FString TargetName);// 0x1f9995c
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskId, int process);// 0x1f99854
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x1f99744
	bool IsTriggerActive(int InTaskID);// 0x1f996c4
	bool IsSpecialPickItem(int InItemID);// 0x1f99644
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x1f9925c
	void HandlePlayerPickupItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x1f9915c
	void HandlePlayerKilling();// 0x1f99148
	void HandlePlayerEnterArea(int AreaID);// 0x1f990d0
	void HandlePlayerDropItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x1f98fd0
	void HandlePlayerDoEmote(int EmoteIndex);// 0x1f98f58
	void HandleInitTaskData(int TaskId, int process, FString ext_info);// 0x1f98d70
	void HandleInitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x1f98c70
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x1f98b90
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x1f98b08
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x2bbd2f4
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x2bbd2f4
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x1f98998
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x1f98844
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x2bbd2f4
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x2bbd2f4
	FString GetOwningPlayerName();// 0x1f98784
	FString GetMapName();// 0x1f986c4
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x2bbd2f4
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x2bbd2f4
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x1f984d8
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1f98414
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskId);// 0x1f98348
	bool AddTrigger(byte TaskType, int TaskId, int process, FString ext_info);// 0x1f98108
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x1f98000
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1f97f3c

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c, Size: 1]
	enum TriggerObjectType;//[Offset: 0x1d, Size: 1]
	int EventDelayTime;//[Offset: 0x20, Size: 4]
	int ActionDelayTime;//[Offset: 0x24, Size: 4]
	FString TriggerName;//[Offset: 0x28, Size: 12]
	Actor* OuterActor;//[Offset: 0x34, Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x38, Size: 12]
	TriggerAction*[] TriggerActions;//[Offset: 0x44, Size: 12]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x50, Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70, Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78, Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0x80, Size: 4]
	FString DelayEventName;//[Offset: 0x84, Size: 12]
	FString FiredEventName;//[Offset: 0x90, Size: 12]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x9c, Size: 60]
	<TriggerAction*> CompleteActions;//[Offset: 0xd8, Size: 60]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float TickInterval;//[Offset: 0x138, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	Property*[] eventParams;//[Offset: 0x140, Size: 12]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum ExecPolicy;//[Offset: 0x29, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c, Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30, Size: 4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de, Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2e0, Size: 12]
	FString[] ClassPaths;//[Offset: 0x2ec, Size: 12]
	FString ConfigFilePath;//[Offset: 0x2f8, Size: 12]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x304, Size: 4]
	FString ClientConfigFilePath;//[Offset: 0x308, Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x314, Size: 16]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x324, Size: 60]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x360, Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x36c, Size: 4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x370, Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x3ac, Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x3b0, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x3b4, Size: 4]
	FString DescData;//[Offset: 0x3b8, Size: 12]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x3c4, Size: 4]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x3c8, Size: 60]
	TaskRepData TaskData;//[Offset: 0x40c, Size: 16]
	bool StartLevelDirector();// 0x4ff844c
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x4ff82b0
	void SetEnable(bool Enab);// 0x4ff8234
	void S2Sim_CallExcuteAction();// 0x1f3dabc
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x4ff8180
	void OnRep_LevelDirectorData();// 0x4ff816c
	bool InitialLevelDirector();// 0x4ff813c
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x4ff7ec4
	bool GetHasBeenInit();// 0x4ff7e9c
	VariableSet* GetDataSet();// 0x4ff7e74
	int GetCurTaskID();// 0x2319f10
	void ForceExecuteTrigger(FString TriggerName);// 0x205b930
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x4ff7c0c
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x4ff79a4
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x4ff772c
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x4ff74c4
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x4ff720c
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x4ff6f9c
	void DeactiveNode(FString NodeName);// 0x4ff6e44
	void ClientExecuteAction(FString ActionClassName, int64 UId, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x4ff6bec
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x4ff6a50
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x4ff68ac
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x4ff6708
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x4ff6498
	void ActiveNode(FString NodeName);// 0x4ff6340

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x2dc, Size: 12]
	uint32 UniqueId;//[Offset: 0x2e8, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x2ec, Size: 4]
	void OnRep_LevelDirector();// 0x4ff9274
	void OnRep_ActionRepDatas();// 0x4ff9260
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x4ff9178

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UId;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 12]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x4, Size: 12]
	byte[] ParamData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 12]
	int NodeID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 12]
	VariableSet* DataSet;//[Offset: 0x28, Size: 4]
	Actor* GetLastIteratorActor();// 0x4ffa73c

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 12]
	FString ClassFullPath;//[Offset: 0xc, Size: 12]
	float RandomRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24, Size: 4]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x28, Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20, Size: 16]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44, Size: 4]
	enum NodeType;//[Offset: 0x48, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68, Size: 60]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	Object* EventInstigator;//[Offset: 0x28, Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38, Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28, Size: 60]
	<FString> ObjectRelevantEvents;//[Offset: 0x64, Size: 60]
	Actor* ListenerEntity;//[Offset: 0xa0, Size: 4]
	Property*[] Params;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 12]
	int TaskId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	TriggerCondition*[] ChildConditions;//[Offset: 0x20, Size: 12]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38, Size: 4]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x4ff4f10

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x150, Size: 4]
	byte[] TaskEventTypes;//[Offset: 0x154, Size: 12]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x160, Size: 12]
	int TaskId;//[Offset: 0x16c, Size: 4]
	byte TaskType;//[Offset: 0x170, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x22d1c28
	void RedoAction();// 0x1f5c250
	void NofityTriggerComplete();// 0x20133a8
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x1f5fa54
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x22d1a44
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x22d1978
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x22d18f0
	TriggerCondition* CreateSpecifiedItemCondition(int ItemId);// 0x22d1870
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x22d17e8
	TriggerAction* CreateRedoAction(byte ActionType);// 0x22d1760
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x22d1600
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x22d1458
	TriggerCondition* CreateKillPlayerCondition();// 0x22d1430
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x22d13b0
	TriggerAction* CreateDoAction(byte ActionType);// 0x22d1328
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x22d12a8
	TriggerCondition* CreateCollectItemCondition(int ItemId, int CollectCount);// 0x22d11e4
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x22d1084
	TriggerAction* CreateAction(byte ActionType);// 0x22d0ffc
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x22d0dc4
	byte[] ConstructRedoActions();// 0x2bbd2f4
	byte[] ConstructEvents();// 0x2bbd2f4
	TriggerCondition* ConstructConditions();// 0x2bbd2f4
	byte[] ConstructActions();// 0x2bbd2f4
	void AddEventTypes(byte[] EventTypes);// 0x22d0c6c
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x22d0b98

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x3c, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	void SetTargetParam(int Value);// 0x22a2174
	void SetConditionParam(int Value);// 0x1f626e0
	bool IsSatisfy(const TriggerEvent* Event);// 0x1f3a480
	bool IsSameCondition(byte InTaskConditionType);// 0x22a20ec
	bool FillDataSource(VariableSet* InDataSource);// 0x1fff540
	bool DeactiveCondition(VariableSet* InDataSource);// 0x1f86c8c
	bool CompareParam(VariableSet* InDataSource);// 0x1f888c4
	bool ActiveCondition(VariableSet* InDataSource);// 0x1f5fa54

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 4]
	int PosY;//[Offset: 0x4, Size: 4]
	int PosZ;//[Offset: 0x8, Size: 4]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]
	uint32 PlayerKey;//[Offset: 0x24, Size: 4]
	int GotAirDropNum;//[Offset: 0x28, Size: 4]
	int MaxKillDistance;//[Offset: 0x2c, Size: 4]
	int Damage;//[Offset: 0x30, Size: 4]
	int InDamage;//[Offset: 0x34, Size: 4]
	int Heal;//[Offset: 0x38, Size: 4]
	int HeadShotNum;//[Offset: 0x3c, Size: 4]
	int KillNumInVehicle;//[Offset: 0x40, Size: 4]
	int SurvivalTime;//[Offset: 0x44, Size: 4]
	int DriveDistance;//[Offset: 0x48, Size: 4]
	int marchDistance;//[Offset: 0x4c, Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x50, Size: 4]
	int Assists;//[Offset: 0x54, Size: 4]
	int KillNumByGrenade;//[Offset: 0x58, Size: 4]
	int Rank;//[Offset: 0x5c, Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x64, Size: 4]
	int Knockouts;//[Offset: 0x68, Size: 4]
	int rescueTimes;//[Offset: 0x6c, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x70, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x74, Size: 4]
	int CurWeaponID;//[Offset: 0x78, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x80, Size: 8]
	FString PlayerName;//[Offset: 0x88, Size: 12]
	FString PlayerOpenID;//[Offset: 0x94, Size: 12]
	FString PicUrl;//[Offset: 0xa0, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int TeamID;//[Offset: 0xb0, Size: 4]
	FString TeamName;//[Offset: 0xb4, Size: 12]
	Pawn* Character;//[Offset: 0xc0, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2dc, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x2e0, Size: 12]
	Actor* ReturnActor;//[Offset: 0x2ec, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x310, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x314, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x318, Size: 12]
	float MinMovingSpeed;//[Offset: 0x324, Size: 4]
	float MaxMovingTime;//[Offset: 0x328, Size: 4]
	float ObservingTime;//[Offset: 0x32c, Size: 4]
	float TrackingDelay;//[Offset: 0x330, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x334, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x338, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x340, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x348, Size: 4]
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x20914e0
	void ForceEnd();// 0x20914cc

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xd0, Size: 24]
	float LastFinishCD;//[Offset: 0xe8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0xf0, Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xf4, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xf8, Size: 4]
	enum VehicleUserState;//[Offset: 0xfc, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x100, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x104, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x10c, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x118, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x124, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x130, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x144, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x158, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x168, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x178, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x17c, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x180, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x184, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x18c, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x190, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x194, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x198, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x1a0, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1b0, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1b4, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1b8, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1c4, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1d4, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x210, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x218, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x220, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x224, Size: 4]
	enum CurrentSeatType;//[Offset: 0x228, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x254, Size: 4]
	float FastestAllowDistance;//[Offset: 0x258, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x25c, Size: 4]
	int VehicleIconID;//[Offset: 0x260, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x27c, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x28c, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x298, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x2a4, Size: 12]
	void UseVehicleWeaponOrNot();// 0x2300ba4
	void UpdateVehWeaponPassengerViewLimit();// 0x2300b90
	void UpdatePassengerViewPitchLimit();// 0x2300b7c
	void TurnVehicle(float Rate);// 0x2300b04
	void TryUseHorn(bool bUse);// 0x2300a84
	void TryShutDownUnmannedVehicle();// 0x2300a70
	void TryPauseUnmannedVehicle();// 0x2300a5c
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x2300984
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x230090c
	void TryLaunchCurrentUnmannedVehicle();// 0x23008ec
	void TryExitVehicle();// 0x23008d8
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x230081c
	void TryChangeVehicleSeat();// 0x2300808
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x2300788
	bool TryChangeFreeFireSeatAndScopeIn();// 0x2300760
	bool TryChangeFreeFireSeatAndLeanOut();// 0x2300738
	void TryAutonomousDriving(bool bEnable);// 0x23006b8
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x2bbd2f4
	void TestMoveVehicleRight(float Rate);// 0x2300640
	void TestMoveVehicleForward(float Rate);// 0x23005c8
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x2300504
	void StopFireVehicleWeapon();// 0x23004f0
	bool ShowVehicleWeaponUI();// 0x23004c8
	void SetVehicleUserState(enum UserState);// 0x2300454
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x23003d4
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x1f4d0fc
	void SetIsAutoMoveForward(bool IsEnable);// 0x2300354
	void SetBrake(float Rate);// 0x23002dc
	void SetBoosting(bool bEnabled);// 0x230025c
	void SetAirControlF(float Rate);// 0x23001e4
	void SetAirControlB(float Rate);// 0x230016c
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x230005c
	void ServerStopFireVehicleWeapon();// 0x2300000
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x22fff4c
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x22ffe88
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x22ffe10
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x22ffd48
	void Server_JoystickCenterClickHandler();// 0x22ffcec
	void SendToServerUnmannedVehicleUse();// 0x22ffc90
	void SendToServerUnmannedVehicleRecall();// 0x22ffc34
	void SendToServerUnmannedVehiclePause();// 0x22ffbd8
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x22ffb50
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x22ffad0
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x22ffa04
	void RspLeanOut(bool bOut);// 0x22ff97c
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x22ff8b0
	void RspExitVehicle(bool bSuccess);// 0x22ff828
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x22ff71c
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x22ff5c0
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x22ff40c
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x22ff334
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x22ff238
	void ReqShutDownUnmannedVehicle();// 0x22ff1dc
	void ReqQuickSwitchSeat();// 0x22ff1c8
	void ReqPauseUnmannedVehicle();// 0x22ff16c
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x22ff070
	void ReqLeanOut(bool IsLeanOut);// 0x22fefa8
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x22feef4
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x22fee48
	void ReqExchangeVehicleSeat();// 0x22fedec
	void ReqEraseLastDriveVehicle();// 0x22fed90
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x22fec94
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x22febe0
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x22feb18
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x22fea50
	void ReqAutonomousDriving(bool bEnable);// 0x22fe988
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x22fe8c0
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x22fe848
	void OnUnmannedVehicle_Standby_Reconnet();// 0x2bbd2f4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x2bbd2f4
	void OnServerReconnected();// 0x22fe834
	void OnScopeInAfterChangeSeat();// 0x22fe820
	void OnRep_DefineID();// 0x22fe80c
	void OnRep_BornInVehicle();// 0x22fe7f8
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x2bbd2f4
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x2bbd2f4
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x2bbd2f4
	void OnPauseUnmannedVehicleCompleted();// 0x2bbd2f4
	void OnLeanOutAfterChangeSeat();// 0x22fe7e4
	void OnLaunchUnmannedVehicleCompleted();// 0x2bbd2f4
	void OnInputAxisMoveRight(float Rate);// 0x2bbd2f4
	void OnInputAxisMoveForward(float Rate);// 0x2bbd2f4
	void OnExitVehicleCompleted();// 0x2bbd2f4
	void OnEnterVehicleCompleted(enum SeatType);// 0x2bbd2f4
	void OnCurrrentClosestVehicleChanged();// 0x2bbd2f4
	void OnClientReconnected();// 0x22fe7d0
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x2bbd2f4
	void NotifyLeaveVehicleFailed();// 0x22fe7b4
	void MoveVehicleUp(float Rate);// 0x22fe73c
	void MoveVehicleRight(float Rate);// 0x22fe6c4
	void MoveVehicleForward(float Rate);// 0x22fe64c
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x22fe588
	bool IsControllingUnmannedVehicle();// 0x22fe560
	bool IsAutoDriving();// 0x22fe538
	bool IgnoreVehicleLookInput();// 0x22fe510
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x22fe498
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x22fe484
	void HandleLocalBackpackCurrentWeaponFinished();// 0x22fe470
	bool HandleClientReconnecting();// 0x22fe448
	enum GetVehicleUserState();// 0x22fe42c
	STExtraVehicleBase* GetVehicle();// 0x22fe410
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x22fe3f4
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x22fe3cc
	bool GetAssistantState();// 0x22fe3a4
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x22fe24c
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x22fe0f0
	void FlipTrackVehicleDirection();// 0x22fe0dc
	void FireVehicleWeapon();// 0x22fe0c8
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x22fdff8
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x22fdf44
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x1f2cbc0
	void Client_UnbindTouchEvents();// 0x22fdee8
	void Client_ShouldBindTouchEvents();// 0x22fde8c
	bool CheckCanLeanOutVehicle();// 0x22fde64
	void ChangeAssistantState(bool bEnter);// 0x22fdde4
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x22fdd64
	bool CanUseVehicleHorn();// 0x22fdd3c
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x22fdc34
	bool CanAutoDriving();// 0x22fdc0c
	void BrakeTrackVehicle(bool bIsBrake);// 0x22fdb8c
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x22fdb0c
	void AddVehicleFuel(float amount);// 0x22fda94

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xc8, Size: 12]
	enum StartStateType;//[Offset: 0xd4, Size: 1]
	enum FinishStateType;//[Offset: 0xd5, Size: 1]
	State* CurrentState;//[Offset: 0xd8, Size: 4]
	enum CurrentStateType;//[Offset: 0xdc, Size: 1]
	enum LastStateType;//[Offset: 0xdd, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x478, Size: 12]
	FString TreasureBoxName;//[Offset: 0x484, Size: 12]
	float TotalHP;//[Offset: 0x490, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x494, Size: 4]
	float TotalTime;//[Offset: 0x498, Size: 4]
	int boxId;//[Offset: 0x49c, Size: 4]
	Vector GroupLoc;//[Offset: 0x4a0, Size: 12]
	float DestroyTime;//[Offset: 0x4ac, Size: 4]
	float OperationalDistance;//[Offset: 0x4b0, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4b4, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4b8, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4c0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x4f0, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x500, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x530, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x540, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x570, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x580, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5b0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5c0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x5f0, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x5f4, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x5f8, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x5fc, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x608, Size: 12]
	enum PickUpBoxType;//[Offset: 0x614, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 1]
	int IconID;//[Offset: 0x618, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67b, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x67c, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x680, Size: 4]
	int HideLightColumn;//[Offset: 0x684, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x688, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x68c, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x690, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x698, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x69c, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x6a0, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x6ac, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ba, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6bc, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6c0, Size: 4]
	float StartedTime;//[Offset: 0x6e0, Size: 4]
	enum CurState;//[Offset: 0x6e4, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x6e8, Size: 4]
	int StartedTeamId;//[Offset: 0x6ec, Size: 4]
	float CountdownTime;//[Offset: 0x6f0, Size: 4]
	float StartDestroytime;//[Offset: 0x6f4, Size: 4]
	int MonsterBoxId;//[Offset: 0x6f8, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x6fc, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x700, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x740, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x744, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x748, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x74c, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x750, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x754, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x788, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x2bbd2f4
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x20b4394
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x2bbd2f4
	void SetClientClientAutoActiveBoxCD(int CD);// 0x20b431c
	void SetAutoActiveBoxCD(int leftTime);// 0x20b42a4
	void OnTreasureBoxPicked__DelegateSignature();// 0x2bbd2f4
	void OnSomeonePickItem(uint32 InPC);// 0x20b422c
	void OnRep_HideLightColumn();// 0x20b4218
	void OnRep_CurState();// 0x20b4204
	void OnBoxEmpty();// 0x20b41f0
	void OnAnimationStop();// 0x20b41dc
	bool IsShowIcon();// 0x20b41b4
	int GetMonsterBoxId();// 0x20b418c
	enum[] GetDamageableGameObjectType();// 0x20b40c4
	enum GetCurState();// 0x20b409c
	int GetClientClientAutoActiveBoxCD();// 0x20b4074
	void DeActiveMonsterTreasureBox();// 0x20b4060
	bool CanBeDamaged();// 0x20b4038
	void BPRepCurState();// 0x2bbd2f4
	void BPOnStopMonsterTreasureBox();// 0x2bbd2f4
	void BPOnStartMonsterTreasureBox();// 0x2bbd2f4
	void BPOnHideLightColumn();// 0x2bbd2f4
	void BPOnCountdownEnd();// 0x2bbd2f4
	void BPOnBreakMonsterTreasureBox();// 0x2bbd2f4
	void BPOnAnimationStop();// 0x2bbd2f4
	void BPOnAnimationAkAudioStop();// 0x2bbd2f4
	void BPOnAnimationAkAudioStart();// 0x2bbd2f4
	FString BPGetTreasureBoxName();// 0x2bbd2f4

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x378, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x37c, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x380, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x384, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x388, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x38c, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x398, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	byte[] SerializeData;//[Offset: 0x428, Size: 12]
	static void ProcessWindowCreateList();// 0x27c76fc
	void OnRep_WindowList();// 0x27c76e8
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x27c74c0

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x670, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x678, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x67c, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x680, Size: 4]
	void NotifyServerBroken();// 0x2bbd2f4
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x27d4338
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x2bbd2f4
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x27d4268
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x27d41a4
	UAEWindowRepData GetRepData();// 0x27d406c

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0xcc, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0xd0, Size: 136]
	int produceID;//[Offset: 0x158, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x15c, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x164, Size: 12]
	int GridStep;//[Offset: 0x170, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x174, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x17c, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x188, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x194, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1a0, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x1b0, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x1b8, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x1f0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x220, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float startHeight;//[Offset: 0x228, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x230, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x238, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x244, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x248, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x24c, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x250, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x258, Size: 12]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x268, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x26c, Size: 4]
	float MaxTraceDist;//[Offset: 0x270, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x278, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x284, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x2106c08
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x2106b4c
	void SetProduceID(int produceID);// 0x2106ad8
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x2106974
	void SetDropPlanIDList(out int[] IDList);// 0x21068a8
	void SetDropItemLifeSpan(int ItemTime);// 0x2106830
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x2106640
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2106440
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x21062d0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x21061b0
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x2106118
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x2106000
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x2105ea4
	int GetCountStrNum(FString CountStr);// 0x2105d44
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x2105bf0
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x2105a9c
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x2105724
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x2105628
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x2105510
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x2105260
	void DropToCommonTreasureBox(Actor* Producer);// 0x1f58234
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x21050f0
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x2104fc8
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x2104e68
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x2104d30
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x2104c14

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0xc8, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xd0, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xe0, Size: 4]
	float CustomGravity;//[Offset: 0xe4, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xe8, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xec, Size: 4]
	float ParticleScale;//[Offset: 0xf0, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xf8, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x120, Size: 4]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x128, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x130, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x158, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x15c, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x168, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x20021fc
	void OnDropGroundLoadFinsh();// 0x20021e8
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x2002098
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x2001f94

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x1fe44ec

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2dc, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2e0, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2e4, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x2e8, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2f4, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x330, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x334, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x340, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x348, Size: 60]
	FName OBPlayerName;//[Offset: 0x388, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x390, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x394, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x398, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x39c, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x3a8, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x3b4, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x3b8, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x3c4, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x3d0, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3dc, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3e0, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x1f56d1c
	void SetEnable(bool IsEnable);// 0x1f56c9c
	void ResetWeaponPendant(int WeaponId);// 0x1f56c24
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x1f56bac
	void RenderCaptureScene();// 0x1f56b98
	void RefreshAvatar();// 0x1f56b84
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x1f56adc
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x1f56a0c
	void OnSimulatedWeaponChanged();// 0x1f569f8
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x1f568ec
	void OnAvatarAllMeshLoaded();// 0x1f568d8
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x1f567bc
	int[] GetWeaponSkinIDs();// 0x1f566fc
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x1f566d4
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x1f56560
	void EquipWeapon();// 0x1f5654c
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x1f564d4
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x1f5640c
	void CreateWeapon(bool IsSkeletalMesh);// 0x1f5638c
	void BluePrintSetEnable(bool IsEnable);// 0x2bbd2f4
	void ApplyAnimation();// 0x1f56378

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x369, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x36c, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x370, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x374, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x380, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x384, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x388, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x38c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x390, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x394, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x398, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x3a0, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x3a4, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x3ac, Size: 4]
	float FarShadowDistance;//[Offset: 0x3b0, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x3b4, Size: 4]
	float LightSourceAngle;//[Offset: 0x3b8, Size: 4]
	float TraceDistance;//[Offset: 0x3bc, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3c0, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x3d4, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x3d8, Size: 4]
	float BoundsScale;//[Offset: 0x3dc, Size: 4]
	float NearPlaneOffset;//[Offset: 0x3e0, Size: 4]
	float FarPlaneOffset;//[Offset: 0x3e4, Size: 4]
	float SplitNearOffset;//[Offset: 0x3e8, Size: 4]
	float SplitFarOffset;//[Offset: 0x3ec, Size: 4]
	float ShadowMapResolution;//[Offset: 0x3f0, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x3f4, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x3f8, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 1]
	float ShadowControl;//[Offset: 0x408, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x410, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x414, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x428, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x42c, Size: 4]
	float CloudShadowDensity;//[Offset: 0x430, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x434, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x437d6c8
	void SetOcclusionMaskDarkness(float NewValue);// 0x437d650
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x437d5e0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x437d560
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x437d4e8
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x437d470
	void SetDynamicShadowCascades(int NewValue);// 0x437d3f8
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x437d374
	void SetCloudShadowTileSize(float InValue);// 0x437d2fc
	void SetCloudShadowTexture(Texture* InTexture);// 0x437d284
	void SetCloudShadowDensity(float InDensity);// 0x437d20c
	void SetCastsCloudShadow(bool InValue);// 0x437d18c
	void SetCascadeTransitionFraction(float NewValue);// 0x437d114
	void SetCascadeDistributionExponent(float NewValue);// 0x437d09c
	void SetAtmosphereSunLight(bool bNewValue);// 0x437d01c

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2dc, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2dc, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x318, Size: 12]
	float DecalLongestDistance;//[Offset: 0x324, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x328, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x334, Size: 4]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x207f440
	bool RemoveDecal(const int ID);// 0x207f3c0
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x207f040

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xa0, Size: 4]
	Texture* DecalTexure;//[Offset: 0xa4, Size: 4]
	int CoordX;//[Offset: 0xa8, Size: 4]
	int CoordY;//[Offset: 0xac, Size: 4]
	Vector2D DecalSize;//[Offset: 0xb0, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int GifDecalFrameNum;//[Offset: 0xbc, Size: 4]
	float GifDecalFrameTime;//[Offset: 0xc0, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0xc4, Size: 4]
	float AttenuationRadius;//[Offset: 0xc8, Size: 4]
	float OutputVolume;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2dc, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x2e0, Size: 4]
	int SupplyBulletNum;//[Offset: 0x2e4, Size: 4]
	float ValidDistance;//[Offset: 0x2e8, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x2ec, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x1f390f8

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2dc, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x2e8, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2ec, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x2f0, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x2f4, Size: 4]
	float ValidDistance;//[Offset: 0x2f8, Size: 4]
	float SelfResetTime;//[Offset: 0x2fc, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	enum EnhancerState;//[Offset: 0x301, Size: 1]
	float ReadyTime;//[Offset: 0x304, Size: 4]
	float FixReadyTime;//[Offset: 0x308, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x30c, Size: 12]
	void StateChangeDelegate();// 0x1f39ea8
	void SetReadyTime(float SReadyTime);// 0x2017630
	void SetEState(enum EState);// 0x20175b8
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x20174bc
	void ResetTimes();// 0x20174a8
	void ResetSelf();// 0x2017494
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x2017414
	void ReadyTimeChangeDelegate();// 0x1f39ee0
	void OpenEffect();// 0x1fa4158
	void OnRep_StateChange();// 0x2017400
	void OnRep_ReadyTimeChange();// 0x20173ec
	void OnRep_FixReadyTimeChange();// 0x20173ec
	enum GetSpotState();// 0x20173d0
	void DelayResetSelf();// 0x20173bc
	void CloseEffect();// 0x1f39efc

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x158, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x15c, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x160, Size: 8]
	int64 StartObserverTime;//[Offset: 0x168, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x170, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x174, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x180, Size: 104]
	DateTime BePickupTime;//[Offset: 0x1e8, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x20f5ed8
	void SetRemainingRevivalTime(int InValue);// 0x20f5e60
	void SetCaptureIDCardStatus(bool InValue);// 0x20f5de0
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x20f5d68
	void OnPlayerQuitSpectating();// 0x20f5d54
	void OnPlayerGotoSpectating();// 0x20f5d40
	void OnPlayerExitGame();// 0x20f5d2c
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x20f5cac
	void LeaveRevivalState(uint32 SaviorKey);// 0x20f5c34
	bool IsInWaittingRevivalState();// 0x20f5c0c
	int GetRevivalCountDownTime();// 0x20f5bf0
	int GetRemainingRevivalTime();// 0x20f5bc8
	bool GetCaptureIDCardStatus();// 0x20f5ba0
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x20f5b20
	void EnterRevivalState();// 0x20f5b0c
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x20f5a10
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x20f5914

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x36c, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x370, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x374, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x378, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x37c, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	float RevivalCDTime;//[Offset: 0x384, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	int RevivalCount;//[Offset: 0x38c, Size: 4]
	int ID;//[Offset: 0x390, Size: 4]
	enum CurState;//[Offset: 0x394, Size: 1]
	enum PreState;//[Offset: 0x395, Size: 1]
	int RevivalTime;//[Offset: 0x398, Size: 4]
	int CurRevivalTime;//[Offset: 0x39c, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	int OperationalDistance;//[Offset: 0x3a4, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3a8, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x3f0, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x420, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x45c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x468, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4a4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4a8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	int IconID;//[Offset: 0x4b0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4b4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x4c0, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x4c8, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x4e0, Size: 8]
	void StartRevival();// 0x2122e30
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x2122db0
	bool RecheckCurrentRevivingPlayers();// 0x2122d88
	void OnRep_ShowSmoking();// 0x2122d74
	void OnRep_RevivalPointState(enum LastPreState);// 0x2122cfc
	void OnRep_RevivalCDTimeCur();// 0x2122ce8
	void OnRep_CurrentRevivingPlayers();// 0x2122cd4
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x2122c54
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x2122bd4
	float GetRevivalCDTimeCurPercent();// 0x2122bac
	float GetRevivalCDTimeCur();// 0x2122b84
	float GetRevivalCDTime();// 0x2122b5c
	int GetId();// 0x2122b34
	void DistanceChangedEvent(float Scale);// 0x2bbd2f4

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xdc, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xe0, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xe4, Size: 4]
	Vector RandomVector;//[Offset: 0xe8, Size: 12]
	float TextScale;//[Offset: 0xf4, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xf8, Size: 16]
	float HeadShotTextScale;//[Offset: 0x108, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x10c, Size: 16]
	float BigDamageTextScale;//[Offset: 0x11c, Size: 4]
	float BigDamage;//[Offset: 0x120, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x124, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x134, Size: 4]
	int FloatTextZorder;//[Offset: 0x138, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x140, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x14c, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x158, Size: 12]
	float RecycleTime;//[Offset: 0x164, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x168, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x203dc7c
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x203dbf0
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x2bbd2f4
	void ReycleFloatingTextWidget();// 0x203dbdc
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadShot);// 0x203dabc
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x203d8d8
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x203d830
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x203d73c

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xcc, Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xe0, Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xec, Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x27dce5c
	void SyncWeatherLevelInfo();// 0x27dce48
	void OnWeatherLevelChanged();// 0x2bbd2f4
	void OnUnLoadStreamLevelCompleted();// 0x27dce34
	void OnRep_WeatherSyncCount();// 0x27dce20
	void OnLoadStreamLevelCompleted();// 0x27dce0c
	void LoadWeatherLevel();// 0x27dcdf8
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x27dcc5c
	void LoadDefaultWeatherLevel();// 0x27dcc48
	void Init();// 0x1fdc6e8

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	int CircleIndex;//[Offset: 0x408, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x40c, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x428, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x448, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x468, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x46c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x470, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x474, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x478, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x480, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4d0, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x4dc, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x2008018
	void BlendToWeather(bool bDstWeather);// 0x2007f98

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2dc, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x320, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x324, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x340, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x37c, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x398, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3b4, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3bd, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3c0, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3cc, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x3ec, Size: 4]
	enum UICountDownType;//[Offset: 0x402, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 1]
	void StartTransition();// 0x2008d38
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x2008cc0
	void RPCRequireControl();// 0x2008cac
	void RPCRequire();// 0x2008c98
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x2008c18
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x1f3dabc
	void ReinitInDemoReplay();// 0x20089ac
	void RefreshWeatherPredictionUI();// 0x2008c04
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x2008b78
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x2008aec
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x2008a60
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x20089d4
	void OnRep_NextWeatherCountDownTime();// 0x2008998
	void OnRep_ControllerDataForReplay();// 0x20089c0
	void OnRep_ControllerData();// 0x20089ac
	void OnRep_bEnableWeatherPredictionUI();// 0x2008998
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x2bbd2f4
	void HandleClientHasReactivated();// 0x2008984
	void GotoSpecificWeather(int WeatherIndex);// 0x200890c
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x2008830
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x200879c
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x200871c
	float GetInProgressElapsedTimeSecWithWeather();// 0x20086f4
	float GetGlobalWeatherSystemTimeOnServer();// 0x20086cc
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x2008684
	void ForceStopDynamicWeatherChangeOnServer();// 0x2008670
	void ForceStartNextWeatherChangeOnServer();// 0x200865c
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x20085ac

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xc8, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xd4, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xe0, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xec, Size: 12]
	delegate WeatherRecover;//[Offset: 0xf8, Size: 12]
	enum DynamicWeatherType;//[Offset: 0x104, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x108, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x10c, Size: 4]
	float TargetLightValue;//[Offset: 0x110, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x120, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x124, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x128, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x12c, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x130, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x134, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x140, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x144, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x148, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x150, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x154, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x15c, Size: 28]
	float RuningDirection;//[Offset: 0x178, Size: 4]
	float RuningTime;//[Offset: 0x17c, Size: 4]
	float LerpTotalTime;//[Offset: 0x180, Size: 4]
	FString WeatherName;//[Offset: 0x184, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x190, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x194, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x198, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x19c, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x204, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x270, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2d8, Size: 12]
	void UINotifyCallbackOnServer();// 0x20076c4
	void OnUserQualitySettingChanged(int renderlevel);// 0x1f2cbc0

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x434, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	Vector BlueCircle;//[Offset: 0x474, Size: 12]
	Vector WhiteCircle;//[Offset: 0x480, Size: 12]
	float CirclePain;//[Offset: 0x48c, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	AirAttackOrder AirAttackOrder;//[Offset: 0x494, Size: 48]
	Vector AirAttackArea;//[Offset: 0x4c4, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4d0, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4dc, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4e8, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4f4, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x500, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x50c, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x518, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x524, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x530, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x53c, Size: 12]
	int PlayerNum;//[Offset: 0x554, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x55c, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x568, Size: 12]
	delegate OnGameEnd;//[Offset: 0x574, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x583, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x594, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x5a0, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x5a8, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5bc, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	int nSignalGunEffectId;//[Offset: 0x5cc, Size: 4]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60d, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60e, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60f, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x614, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x618, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x61c, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x620, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 1]
	delegate OnAirAttack;//[Offset: 0x628, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x634, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x640, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x650, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x65c, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x668, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x66c, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x670, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x674, Size: 4]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x67c, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x680, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x688, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x6b8, Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	int ReadyStateTime;//[Offset: 0x6c8, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x6cc, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x6dc, Size: 12]
	int CurCircleWave;//[Offset: 0x6e8, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x6f0, Size: 4]
	FName GameModeState;//[Offset: 0x708, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	float timeFromLessen;//[Offset: 0x714, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x718, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x724, Size: 12]
	float timeForLessen;//[Offset: 0x730, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x740, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x744, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x748, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x74c, Size: 4]
	byte CurAirAttackType;//[Offset: 0x750, Size: 1]
	int CurAirAttackWave;//[Offset: 0x754, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x75c, Size: 4]
	float ExtraRadius;//[Offset: 0x760, Size: 4]
	int AlivePlayerNum;//[Offset: 0x764, Size: 4]
	int AliveTeamNum;//[Offset: 0x768, Size: 4]
	int NoneAIGameTime;//[Offset: 0x76c, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x770, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x77c, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x788, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x78c, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x798, Size: 120]
	enum GameModeType;//[Offset: 0x9f0, Size: 1]
	enum GameModeConfigType;//[Offset: 0x9f1, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0x9f2, Size: 1]
	enum GameModeSubType;//[Offset: 0x9f3, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x9f4, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0x9f8, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa06, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xa14, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xa18, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xa1c, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xa28, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xa34, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xa40, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xa44, Size: 60]
	float InviteCountDownTime;//[Offset: 0xa80, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xa84, Size: 12]
	Vector[] CircleArray;//[Offset: 0xa90, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xa9c, Size: 60]
	uint64 GameID;//[Offset: 0xad8, Size: 8]
	FString GameModeID;//[Offset: 0xae0, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xaec, Size: 12]
	FString ModLogicSwitchTag;//[Offset: 0xaf8, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xb04, Size: 12]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xb10, Size: 4]
	Character* CurCastActorMsgOwner;//[Offset: 0xb14, Size: 8]
	float StartFlyTime;//[Offset: 0xb1c, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xb20, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xb28, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xb30, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4a, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xb4c, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xb54, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xb58, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xb74, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xb80, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xb8c, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xb94, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xba0, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbae, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbaf, Size: 1]
	FString GuideImageName;//[Offset: 0xbb0, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xbbc, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xbc8, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd4, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xbd8, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xbdc, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xbe4, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbed, Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0xbf0, Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xbf4, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xbf8, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xc04, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xc10, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xc1c, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xc28, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xc30, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xc58, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xc80, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xc8c, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xcc8, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xccc, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd0, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd1, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xcd4, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1, Size: 1]
	bool bEnableVehicleDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce2, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xce4, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 1]
	FString FServerStartTime;//[Offset: 0xcf4, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xd04, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xd08, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xd14, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xd20, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xd40, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xd7c, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xdb8, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xdbc, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	bool bEnablePlayerEventSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 1]
	bool bEnableAttrMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc2, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc3, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc5, Size: 1]
	int PlayerAddonCount;//[Offset: 0xdc8, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xdd4, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xde4, Size: 4]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x2bbd2f4
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x21e90b8
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x21e8eac
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x21e8b24
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x21e8960
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x21e8800
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x21e871c
	void SimulateAirAttackOver();// 0x21e86c0
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x21e857c
	void SetTagCulling(bool IsUse);// 0x1fd3400
	void SetServerStartTime(uint32 nServerStartTime);// 0x21e8504
	void SetSendStartFlow(uint32 PlayerKey);// 0x21e848c
	void SetSendEndFlow(uint32 PlayerKey);// 0x21e8414
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x21e82dc
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x21e8240
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x21e81a4
	void SetIsLowMatch(int nClientType);// 0x21e812c
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x21e8054
	void SetCurAirAttackWave(int AirAttackWave);// 0x21e7fdc
	void SetCurAirAttackType(byte airattacktype);// 0x21e7f64
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x21e7e58
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x21e7dd8
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x21e7d60
	void ServerRemoteDestroyAllActor();// 0x21e7d4c
	void ServerRemoteDestroyActor(int SingleId);// 0x21e7cd4
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21e7b78
	void RPC_Client_RemoteDestroyAllActor();// 0x21e7b5c
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x21e7adc
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21e7948
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x21e77a4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x2bbd2f4
	void OnRep_WeatherStateChanged();// 0x21e7790
	void OnRep_VisualFieldFeatureParam();// 0x21e777c
	void OnRep_VeteranRecruitListUpdate();// 0x21e7768
	void OnRep_UpassInfoList();// 0x21e7754
	void OnRep_StartFlyTime();// 0x21e7740
	void OnRep_ResetWeatherPlaySpeed();// 0x21e772c
	void OnRep_ReadyStateTime();// 0x1fa6754
	void OnRep_ReadyStateCountingDown();// 0x1f4cfe0
	void OnRep_PlayerNumChange();// 0x1f4cfe0
	void OnRep_PlayerAddonCount();// 0x2172f38
	void OnRep_MarkSyncData();// 0x21e7718
	void OnRep_IsTrainingMode();// 0x21e7704
	void OnRep_IsShowDeadBox();// 0x21e76f0
	void OnRep_IsOpenDuelMode();// 0x1f4cfe0
	void OnRep_IsFPPMode();// 0x21e76dc
	void OnRep_IsDark();// 0x21e76c8
	void OnRep_GameTerminatorPlayerKey();// 0x21e76b4
	void OnRep_GameModeType();// 0x21e76a0
	void OnRep_GameModeSubType();// 0x21e768c
	void OnRep_GameModeState();// 0x21e7670
	void OnRep_GameModeFeatureSet();// 0x1f4cfe0
	void OnRep_FinalWinTeams();// 0x1f4cfe0
	void OnRep_FinalWinPlayers();// 0x1f4cfe0
	void OnRep_EnableSignalSystem();// 0x21e765c
	void OnRep_DynamicWeatherState();// 0x21e7648
	void OnRep_CircleArray();// 0x1f4cfe0
	void OnRep_AliveTeamNum();// 0x21e7634
	void OnRep_AlivePlayerNum();// 0x21e7620
	void OnRep_AirDropPathData();// 0x21e760c
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x2111f3c
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x21e7540
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x2bbd2f4
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x2bbd2f4
	void OnGameModeDisplayNameChange();// 0x21e752c
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x2111a38
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x2111930
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x21e7470
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x21e73f0
	bool IsSendStartFlow(uint32 PlayerKey);// 0x21e7370
	bool IsSendEndFlow(uint32 PlayerKey);// 0x21e72f0
	bool IsRevivalGame();// 0x21e72c8
	bool IsPVEMode();// 0x21e72a0
	bool IsNoCircleInfo();// 0x21e7278
	bool IsMapUseTeamPattern();// 0x1fa7358
	bool IsInWhiteCircle(out const Vector pos);// 0x21e71ec
	bool IsInNight();// 0x21e71bc
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x21e713c
	bool IsInBlueCircle(out const Vector pos);// 0x21e70b0
	bool IsFeatureSupported(enum SubSystemType);// 0x21e7028
	bool IsEnableObjectPool();// 0x21e7000
	bool IsEnableDamageInfo();// 0x213cb70
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x21e6fd8
	int GetServerStartUnixTimestamp();// 0x21e6fb0
	FString GetServerStartTime();// 0x21e6ef0
	float GetRepServerWorldTimeSeconds();// 0x21e6ec8
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x21e6e1c
	int GetPVEWeatherPhaseIndex();// 0x21e6df4
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x21e6d70
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x21e6d48
	bool GetIsReadyStateReport();// 0x21e6d18
	FName GetGameModeState();// 0x21e6cd8
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x21e6cb0
	FString GetDSSwitchValue(const int InSwitchId);// 0x21e6ba8
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x21e6b80
	enum GetCurWeatherState();// 0x21e6b58
	enum GetCurDynamicWeatherState();// 0x21e6b30
	int GetCurCircleWave();// 0x21e6b14
	byte GetCurCircleState();// 0x21e6ad4
	int GetCurCircleIndex();// 0x21e6aac
	GetCircleInfo GetCircleStateInfo();// 0x21e6a20
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x21e6974
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x21e68c8
	int GetAlivePlayerNum();// 0x21e68a0
	AirDropPathData3D GetAirDropPathData();// 0x21e6708
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x21e65a8
	void ExecuteCVarConfig();// 0x21e6594
	void EnableObjectPool(bool bEnable);// 0x21e6514
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x21e6450
	void ClearAirDropPathData();// 0x21e643c
	bool CheckIsLowMatch();// 0x21e6414
	void CheckInitLuaRemoteEvent();// 0x21e6400
	bool CheckDSSwitchOpen(const int SwitchId);// 0x21e6378
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x214fb28
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x21e6300
	void ChangeDynamicWeatherState(enum DayState);// 0x21e6288
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x21e6180
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x21e5f6c
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x21e5da0
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x21e5bd4
	void BroadcastTemporaryMessage(FString Message);// 0x21e5b10
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x21e5a08
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x21e57f4
	void BroadcastEndCircle();// 0x21e5798
	void BroadcastCircleWaveOver(int Index);// 0x21e56e4
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x21e53d0
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex);// 0x21e5200
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex);// 0x21e5144
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex);// 0x21e4fc8
	void AsyncLoadResFinishCallback();// 0x21e4fb4
	void AsyncLoadCommonResFinishCallback();// 0x21e4fa0
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x2110430
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x211036c
	void AddPveZombieGrenadeCount(int Value);// 0x21e4f28
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x21e4eb0
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x2110064

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	UAEGameSubsystem* GameBridge;//[Offset: 0x3bc, Size: 4]
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x404, Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x410, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x41c, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27c52fc
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27c51c0
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x27c511c
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x27c5094
	UAEGameSubsystem* GetGameBridge();// 0x27c5078
	bool CheckDSSwitchOpen(const int SwitchId);// 0x21e6378

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x374, Size: 60]
	FString LuaFilePath;//[Offset: 0x3b0, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x310, Size: 8]
	FName PreviousMatchState;//[Offset: 0x318, Size: 8]
	int ElapsedTime;//[Offset: 0x320, Size: 4]
	void OnRep_MatchState();// 0x2034590
	void OnRep_ElapsedTime();// 0x4391b00

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	int16[] bombsInterval;//[Offset: 0xc, Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x230bf34
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x230beb4
	void Init();// 0x230bea0
	int ClearViewMaskForActor(Actor* MaskActor);// 0x230be20
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x230bda0
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x230bcdc

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x20afd00
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x20afb50

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x74, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAEGameSubsystem.Object
	delegate GameModeStateChangeEvent;//[Offset: 0x1c, Size: 12]
	delegate ActorOverlapEvent;//[Offset: 0x28, Size: 12]
	delegate ActorDieEvent;//[Offset: 0x34, Size: 12]
	delegate PawnDieEvent;//[Offset: 0x40, Size: 12]
	delegate CharacterDieEvent;//[Offset: 0x4c, Size: 12]
	delegate EnterAreaTriggerEvent;//[Offset: 0x58, Size: 12]
	delegate ExitAreaTriggerEvent;//[Offset: 0x64, Size: 12]
	delegate PawnPickupItemEvent;//[Offset: 0x70, Size: 12]
	delegate VehicleOverlapEvent;//[Offset: 0x7c, Size: 12]
	delegate InteractiveActorBeginEvent;//[Offset: 0x88, Size: 12]
	delegate InteractiveActorDoneEvent;//[Offset: 0x94, Size: 12]
	delegate PawnUseAbilityEvent;//[Offset: 0xa0, Size: 12]
	delegate PlayerJoinEvent;//[Offset: 0xac, Size: 12]
	delegate PlayerRealExitEvent;//[Offset: 0xb8, Size: 12]
	delegate PlayerExitEvent;//[Offset: 0xc4, Size: 12]
	delegate ProjectileStopEvent;//[Offset: 0xd0, Size: 12]
	delegate ProjectileBounceEvent;//[Offset: 0xdc, Size: 12]
	delegate DecoraterActorSpawnEvent;//[Offset: 0xe8, Size: 12]
	delegate RemoteEvent;//[Offset: 0xf4, Size: 12]
	delegate PlayerDamageQueryEvent;//[Offset: 0x100, Size: 12]
	delegate PawnNearDeathEvent;//[Offset: 0x10c, Size: 12]
	delegate PawnNearDeathOrRescuedEvent;//[Offset: 0x118, Size: 12]
	delegate OnAIPawnSpawnEvent;//[Offset: 0x124, Size: 12]
	delegate OnCharacterRespawnEvent;//[Offset: 0x130, Size: 12]
	delegate ChooseEnemyLoseTargetEvent;//[Offset: 0x13c, Size: 12]
	delegate FindEnemyWarningEvent;//[Offset: 0x148, Size: 12]
	delegate ModFindEnemyWarningEvent;//[Offset: 0x154, Size: 12]
	delegate TaskInterActiveActorBeginEvent;//[Offset: 0x160, Size: 12]
	delegate TaskInterActiveActorDoneEvent;//[Offset: 0x16c, Size: 12]
	delegate LevelAddedEvent;//[Offset: 0x178, Size: 12]
	delegate DSLuaGMEvent;//[Offset: 0x184, Size: 12]
	delegate OnWeaponFireEvent;//[Offset: 0x190, Size: 12]
	delegate PlayerPickUpItemEvent;//[Offset: 0x19c, Size: 12]
	delegate PlayerDropItemEvent;//[Offset: 0x1a8, Size: 12]
	delegate PlayerUseItemEvent;//[Offset: 0x1b4, Size: 12]
	delegate PlayerDisUseItemEvent;//[Offset: 0x1c0, Size: 12]
	delegate PlayerSwapItemEvent;//[Offset: 0x1cc, Size: 12]
	delegate PlayerEquipItemEvent;//[Offset: 0x1d8, Size: 12]
	delegate PlayerUnEquipItemEvent;//[Offset: 0x1e4, Size: 12]
	delegate PlayerConsumeEvent;//[Offset: 0x1f0, Size: 12]
	delegate PawnChangeTeamEvent;//[Offset: 0x1fc, Size: 12]

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float AutoAimingConfig_InnerRange_Speed;//[Offset: 0x4, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRate;//[Offset: 0x8, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRate;//[Offset: 0xc, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRateSight;//[Offset: 0x10, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRateSight;//[Offset: 0x14, Size: 4]
	float AutoAimingConfig_InnerRange_CrouchRate;//[Offset: 0x18, Size: 4]
	float AutoAimingConfig_InnerRange_ProneRate;//[Offset: 0x1c, Size: 4]
	float AutoAimingConfig_InnerRange_DyingRate;//[Offset: 0x20, Size: 4]
	float AutoAimingConfig_InnerRange_DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float AutoAimingConfig_InnerRange_InVehicleRate;//[Offset: 0x28, Size: 4]
	float AutoAimingConfig_InnerRange_FreeFallRate;//[Offset: 0x2c, Size: 4]
	float AutoAimingConfig_InnerRange_OpeningRate;//[Offset: 0x30, Size: 4]
	float AutoAimingConfig_InnerRange_LandingRate;//[Offset: 0x34, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxRange;//[Offset: 0x38, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinRange;//[Offset: 0x3c, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbActiveMinRange;//[Offset: 0x48, Size: 4]
	float AutoAimingConfig_OuterRange_Speed;//[Offset: 0x4c, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRate;//[Offset: 0x50, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRate;//[Offset: 0x54, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRateSight;//[Offset: 0x58, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRateSight;//[Offset: 0x5c, Size: 4]
	float AutoAimingConfig_OuterRange_CrouchRate;//[Offset: 0x60, Size: 4]
	float AutoAimingConfig_OuterRange_ProneRate;//[Offset: 0x64, Size: 4]
	float AutoAimingConfig_OuterRange_DyingRate;//[Offset: 0x68, Size: 4]
	float AutoAimingConfig_OuterRange_DriveVehicleRate;//[Offset: 0x6c, Size: 4]
	float AutoAimingConfig_OuterRange_InVehicleRate;//[Offset: 0x70, Size: 4]
	float AutoAimingConfig_OuterRange_FreeFallRate;//[Offset: 0x74, Size: 4]
	float AutoAimingConfig_OuterRange_OpeningRate;//[Offset: 0x78, Size: 4]
	float AutoAimingConfig_OuterRange_LandingRate;//[Offset: 0x7c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxRange;//[Offset: 0x80, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinRange;//[Offset: 0x84, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinAttenuationDis;//[Offset: 0x88, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxAttenuationDis;//[Offset: 0x8c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbActiveMinRange;//[Offset: 0x90, Size: 4]
	float AutoAimingConfig_FollowTimeMax;//[Offset: 0x94, Size: 4]
	float AutoAimingConfig_MaxAngle;//[Offset: 0x98, Size: 4]
	float AccessoriesVRecoilFactor;//[Offset: 0x9c, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0xa0, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0xa4, Size: 4]
	float RecoilLeftMax;//[Offset: 0xa8, Size: 4]
	float RecoilRightMax;//[Offset: 0xac, Size: 4]
	float RecoilKickADS;//[Offset: 0xb0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0xb4, Size: 4]
	float DeviationBase;//[Offset: 0xb8, Size: 4]
	float DeviationBaseAim;//[Offset: 0xbc, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc0, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0xc4, Size: 4]
	float DeviationMaxMove;//[Offset: 0xc8, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0xcc, Size: 4]
	float DeviationStanceJump;//[Offset: 0xd0, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0xd4, Size: 4]
	float GameDeviationFactor;//[Offset: 0xd8, Size: 4]
	float HitPartCoffHead;//[Offset: 0xdc, Size: 4]
	float HitPartCoffBody;//[Offset: 0xe0, Size: 4]
	float HitPartCoffLimbs;//[Offset: 0xe4, Size: 4]
	float HitPartCoffHand;//[Offset: 0xe8, Size: 4]
	float HitPartCoffFoot;//[Offset: 0xec, Size: 4]
	float ZombileHitPartCoffHead;//[Offset: 0xf0, Size: 4]
	float ZombileHitPartCoffBody;//[Offset: 0xf4, Size: 4]
	float ZombileHitPartCoffLimbs;//[Offset: 0xf8, Size: 4]
	float ZombileHitPartCoffHand;//[Offset: 0xfc, Size: 4]
	float ZombileHitPartCoffFoot;//[Offset: 0x100, Size: 4]
	float BaseImpactDamage;//[Offset: 0x104, Size: 4]
	float RangeModifier;//[Offset: 0x108, Size: 4]
	float ReferenceDistance;//[Offset: 0x10c, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x110, Size: 4]
	float ReloadTime;//[Offset: 0x114, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x118, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x11c, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x120, Size: 4]
	float ReloadDurationStart;//[Offset: 0x124, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x128, Size: 4]
	float MaxBulletNumInOneClip;//[Offset: 0x12c, Size: 4]
	float InitBulletInClip;//[Offset: 0x130, Size: 4]
	float BulletFireSpeed;//[Offset: 0x134, Size: 4]
	int bEnableVehicleShoot;//[Offset: 0x138, Size: 4]
	int bEnableLeanOutHolding;//[Offset: 0x13c, Size: 4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0x140, Size: 4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0x144, Size: 4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0x148, Size: 4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0x14c, Size: 4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0x150, Size: 4]
	float Bullet_MaxNoGravityRange;//[Offset: 0x154, Size: 4]
	float Bullet_LaunchGravityScale;//[Offset: 0x158, Size: 4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0x15c, Size: 12]
	FString ImpactActorTemplatePath;//[Offset: 0x168, Size: 12]
	FString BulletTemplatePath;//[Offset: 0x174, Size: 12]
	int ReloadWithNoCost;//[Offset: 0x180, Size: 4]
	FString MuzzleFX;//[Offset: 0x184, Size: 12]
	FString ScopeMuzzleFX;//[Offset: 0x190, Size: 12]
	FString RemoteMuzzleFX;//[Offset: 0x19c, Size: 12]
	FString LocalSilencerMuzzleFX;//[Offset: 0x1a8, Size: 12]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x1b4, Size: 12]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x1c0, Size: 12]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x1cc, Size: 12]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1d8, Size: 12]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1e4, Size: 12]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x1f0, Size: 12]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x1fc, Size: 12]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x208, Size: 12]
	int WeaponDurability;//[Offset: 0x214, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x218, Size: 4]

--------------------------------
Class: VehicleAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float HealthMax;//[Offset: 0x4, Size: 4]
	float Health;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xc8, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0xcc, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xd0, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xdc, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0xe8, Size: 12]
	int MarkCountProcessed;//[Offset: 0xf4, Size: 4]
	int OverflowFrameCount;//[Offset: 0xf8, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x20a5354
	int GenerateNewLocalInstanceID();// 0x20a532c
	int GenerateNewInstanceID();// 0x20a5308
	void DispatchMarkData(MarkDispatchAction Data);// 0x20a5150
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x20a5050

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 88]
	float DispatchDelayTime;//[Offset: 0x5c, Size: 4]
	float RangeRad;//[Offset: 0x60, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x64, Size: 8]
	float DispatchTime;//[Offset: 0x6c, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x78, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xc8, Size: 60]
	float EventCDTime;//[Offset: 0x104, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x233226c

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x203a834
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1fc94b4
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x203a760
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x203a6e8
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2bbd2f4
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2bbd2f4

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xc8, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xd4, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xd8, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xe4, Size: 1]
	bool IsNotificationWorking();// 0x203a338
	static int IsGlobalDebugLineTraceDrawn();// 0x203a30c
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x2bbd2f4
	enum GetFieldOfViewNotificationStatus();// 0x203a2e4

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x2f4, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x358, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x35c, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x22a5a04
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x22a58f4
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x20606cc
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x22a575c

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xcc, Size: 12]
	MapUIBase* m_pMiniMap;//[Offset: 0xd8, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0xdc, Size: 4]
	int[] CurMarkInstList;//[Offset: 0xe0, Size: 12]
	<int,MarkActorInstInfo> CurMarkActorInstMap;//[Offset: 0xec, Size: 60]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x1a0, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x1ac, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x1b8, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x1bc, Size: 4]
	float TickRate_Internal;//[Offset: 0x1f4, Size: 4]
	float TickRate_Callback;//[Offset: 0x1f8, Size: 4]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x20a88dc
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x2bbd2f4
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x2bbd2f4

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x5c, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0x9c, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0xa8, Size: 8]
	Image* Image_Inner;//[Offset: 0xb0, Size: 8]
	Image* Image_CarTips;//[Offset: 0xb8, Size: 8]
	Image* Image_AirIcon;//[Offset: 0xc0, Size: 8]
	Image* Image_PassedRoute;//[Offset: 0xc8, Size: 8]
	Image* Image_LineUV;//[Offset: 0xd0, Size: 8]
	CanvasPanel* CanvasPanel_Airline;//[Offset: 0xd8, Size: 4]
	bool bFixedAirlineScaleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0xe0, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0xe8, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0xf4, Size: 4]
	Border* Border_RingFX;//[Offset: 0xf8, Size: 8]
	Border* Border_FullRing;//[Offset: 0x100, Size: 8]
	float ImageBlueCircleScale;//[Offset: 0x108, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x10c, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x1fc, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x2ec, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x2f4, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x2fc, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x304, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x310, Size: 4]
	float MapScaleCpp;//[Offset: 0x314, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x318, Size: 8]
	float MapScalingRadio;//[Offset: 0x320, Size: 4]
	delegate OnDrawOrHideAirDropPath;//[Offset: 0x324, Size: 12]
	int LocalPlayerIndexC;//[Offset: 0x330, Size: 4]
	float MapImageExtentC;//[Offset: 0x334, Size: 4]
	float MapWindowExtentC;//[Offset: 0x338, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x340, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x350, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x364, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x368, Size: 4]
	Vector2D MapAdjustLocation;//[Offset: 0x36c, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x374, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x37c, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x384, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	int AirDropIndex;//[Offset: 0x390, Size: 4]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x20186cc
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x20a60dc
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x20a5f8c
	void UpdateLeftRouteLengthC();// 0x1f609e0
	void UpdateLastDriveVehicleC();// 0x20a5f78
	void UpdateAirIconC();// 0x20a5f64
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x20185d4
	bool TickInnerCircleC();// 0x2013fa4
	void TickCircleC();// 0x20a5f50
	void SetupUIMarkRoot();// 0x20a5f3c
	void RepositionMapMultiMarkC(int PlayerIndex, Vector2D CurSize);// 0x20a5e88
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x20a5d88
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x20a5d18
	void ReCalMapInfoC();// 0x20a5d04
	void OnUpdateUIMarks();// 0x20a5ce8
	void OnPaint(PaintContext InContext);// 0x20a5c54
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x2018510
	void HideAllMapMarkC();// 0x20a5c40
	World* GetWorldInternal();// 0x20a5c18
	float GetLevelToMapScale();// 0x20184e0
	void DrawOrHideAirDropPath();// 0x20a5c04

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x3871de4
	bool GetDontPaintWhenChildEmpty();// 0x3871dbc
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3871d3c

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x3872a34
	void SetSupportNotch(bool InSupportNotch);// 0x38729b4
	void SetSize(Vector2D InSize);// 0x3872944
	void SetPosition(Vector2D InPosition);// 0x38728d4
	void SetOffsets(Margin InOffset);// 0x387284c
	void SetMinimum(Vector2D InMinimumAnchors);// 0x38727dc
	void SetMaximum(Vector2D InMaximumAnchors);// 0x387276c
	void SetLayout(out const AnchorData InLayoutData);// 0x38726d4
	void SetAutoSize(bool InbAutoSize);// 0x3872654
	void SetAnchors(Anchors InAnchors);// 0x38725cc
	void SetAlignment(Vector2D InAlignment);// 0x387255c
	int GetZOrder();// 0x3872534
	Vector2D GetSize();// 0x38724f4
	Vector2D GetPosition();// 0x38724b4
	Margin GetOffsets();// 0x3872470
	AnchorData GetLayout();// 0x387241c
	bool GetAutoSize();// 0x38723f4
	Anchors GetAnchors();// 0x38723b0
	Vector2D GetAlignment();// 0x3872370
	bool GeSupportNotch();// 0x3872348

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x320, Size: 8]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x20a79b4
	void UpdateMarkSize(float inScale);// 0x20834f4
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x20a7864
	bool ShouldLimitedInMinimap();// 0x20a783c
	void SetWidgetCurRotation(Rotator WorldRot3D);// 0x20a77cc
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x20a775c
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x20a7668
	void OnUIBPDestroy();// 0x1f5a4d0
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x20a752c
	void OnEnterEntireMap();// 0x2bbd2f4
	Rotator GetWidgetCurWorldRot();// 0x20a74e4
	Vector GetWidgetCurWorldPos();// 0x20a749c

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0xd9, Size: 1]
	byte VerticalAlignment;//[Offset: 0xda, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0xdc, Size: 16]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0xf0, Size: 16]
	Margin Padding;//[Offset: 0x100, Size: 16]
	SlateBrush Background;//[Offset: 0x110, Size: 152]
	delegate BackgroundDelegate;//[Offset: 0x1a8, Size: 16]
	LinearColor BrushColor;//[Offset: 0x1b8, Size: 16]
	delegate BrushColorDelegate;//[Offset: 0x1c8, Size: 16]
	Vector2D DesiredSizeScale;//[Offset: 0x1d8, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1e0, Size: 16]
	delegate OnMouseButtonUpEvent;//[Offset: 0x1f0, Size: 16]
	delegate OnMouseMoveEvent;//[Offset: 0x200, Size: 16]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x210, Size: 16]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x386ffd0
	void SetPadding(Margin InPadding);// 0x386ff48
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x386fed0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x386fe50
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x386fdd0
	void SetDesiredSizeScale(Vector2D inScale);// 0x386fd60
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x386fce4
	void SetBrushFromTexture(Texture2D* Texture);// 0x386fc6c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x386fc6c
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x386fbf4
	void SetBrushColor(LinearColor InBrushColor);// 0x386fb78
	void SetBrush(out const SlateBrush InBrush);// 0x386fa10
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x386f9e8
	bool GetDontPaintWhenChildEmpty();// 0x386f9c0
	bool GetDontPaintWhenAlphaZero();// 0x386f998

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x38750a8
	PanelSlot* GetContentSlot();// 0x3875080
	Widget* GetContent();// 0x3875058

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	void Init(MapUIBase* INMapUI);// 0x20a569c
	World* GetWorldInternal();// 0x20a5674

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	World* GetWorldInternal();// 0x20a6e14

--------------------------------
Class: MarkActorInstInfo
	int UIBPInstID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UIBPAsyncParams

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ZombieWaveUIState
	int TypeId;//[Offset: 0x0, Size: 4]
	int CountdownTime;//[Offset: 0x4, Size: 4]
	FString ShowString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2dc, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2e0, Size: 4]
	float NearToFarDistance;//[Offset: 0x2e4, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2e8, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x2ec, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x2f0, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18, Size: 12]
	int ShootTimes;//[Offset: 0x24, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x28, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x34, Size: 4]
	int NetworkStatus;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 12]
	Vector GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	double ShootSystemTime;//[Offset: 0x80, Size: 8]
	byte ShootTimeConDelta;//[Offset: 0x88, Size: 1]
	float ShootLevelTime;//[Offset: 0x8c, Size: 4]
	Vector GunTailPos;//[Offset: 0x90, Size: 12]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x328, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x32c, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x330, Size: 4]
	int MapMarkTypeID;//[Offset: 0x334, Size: 4]
	enum MapMarkFlag;//[Offset: 0x338, Size: 1]
	Pawn* Driver;//[Offset: 0x340, Size: 4]
	float MoveUpValue;//[Offset: 0x344, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x380, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x384, Size: 4]
	float MoveUpScale;//[Offset: 0x388, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x390, Size: 4]
	Vector ControlInputVector;//[Offset: 0x394, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x3a0, Size: 12]
	float TickInterval;//[Offset: 0x3ac, Size: 4]
	FString LuaFilePath;//[Offset: 0x3b4, Size: 12]
	Vector2D FObservationArea;//[Offset: 0x3c0, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x21d6f98
	void SetMoveUpValue(float InMoveUpValue);// 0x21d6f20
	void SetDriver(Pawn* InPawn);// 0x1f465a4
	void OnRep_Driver(Pawn* PrevDriver);// 0x1fa49c4
	Pawn* GetDriver();// 0x21d6f04
	void CheckWishTask();// 0x2bbd2f4
	bool CanBeDriver(Pawn* InPawn);// 0x21d6e7c
	void BPUpdateUIVisible();// 0x2bbd2f4
	void BPUpdateObservationArea();// 0x2bbd2f4
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x2bbd2f4
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x2bbd2f4

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x141, Size: 1]
	float MaxFlyHeight;//[Offset: 0x144, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x148, Size: 4]
	Vector InitialLocation;//[Offset: 0x14c, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x158, Size: 12]
	Actor* ActorOwner;//[Offset: 0x164, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x21d6a3c
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x2bbd2f4
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2bbd2f4
	float GetMaxFlyHeight();// 0x21d6a14

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x130, Size: 4]
	float Acceleration;//[Offset: 0x134, Size: 4]
	float Deceleration;//[Offset: 0x138, Size: 4]
	float TurningBoost;//[Offset: 0x13c, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 1]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x420, Size: 12]
	int MiniMapIconID;//[Offset: 0x42c, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x430, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x20f3c80
	void HandleBoxIsSearched();// 0x1fe1db0

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	int CaculateType;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xc8, Size: 4]
	float InactiveCheckGap;//[Offset: 0xcc, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xd4, Size: 4]
	float PreActiveTime;//[Offset: 0xd8, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xe0, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	enum SIslandActiveType;//[Offset: 0xe5, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xe8, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xf4, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0x100, Size: 12]
	void ServerMarkPlayerActive();// 0x213f0d0
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x2bbd2f4
	void MarkPlayerActive();// 0x213f0bc
	void KickOutPlayer();// 0x213f0a8
	void ClientShowKickOutTip(float RemainTime);// 0x1f2cbc0
	void ClientCachedActiveState();// 0x213f094
	bool CheckForMovement();// 0x213f06c
	void CheckForInactive();// 0x20c3724

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0xd8, Size: 12]
	FString ReplayServerURL;//[Offset: 0x110, Size: 12]
	void RequestReplaysFromServer(FString URLString);// 0x20d5174
	void ClearStreams();// 0x20d5160

--------------------------------
Class: DailyTaskReportInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillInfoRecordData
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0xd8, Size: 200]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x1a0, Size: 4]
	void SetMurderInfo();// 0x1ffac30
	void OnKillOrPutDownMessageEvent();// 0x1ffac1c
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x1ffaba4
	void OnClientObserveCharacterEvent();// 0x1ffab90
	bool IsSwitchedOffByDevice();// 0x1ffab68
	bool IsNewDeathReplay();// 0x1ffab40
	bool HaveRecordingData_New();// 0x1ffab18
	FString GetReplayTargetName();// 0x1ffaa58
	STExtraPlayerCharacter* GetDeadCharacter();// 0x1ffaa30

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x320, Size: 12]
	void StopCameraShot();// 0x1f3dabc
	void StartCameraShot(PlayerController* PlayerController);// 0x1f465a4

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xd8, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x100, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x104, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x10c, Size: 12]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x120, Size: 12]
	bool PlayDemoWithFilename(FString DemoName);// 0x1fe4a58
	FString GetDemoPlayTime();// 0x1fe4998

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	enum WonderfulPlayType;//[Offset: 0xdb, Size: 1]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x232b764
	bool PlayReplayMemory();// 0x232b73c
	bool PlayReplayFile(FString DemoName);// 0x232b678
	bool PlayReplayAgain();// 0x232b650
	bool IsSwitchedOffByDevice();// 0x232b628
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x232b464
	uint64 GetTargetUID();// 0x232b43c
	FString GetTargetPlayerName();// 0x232b37c
	FString GetTargetOpenID();// 0x232b2bc
	uint64 GetTargetGameID();// 0x232b294
	FString GetReplayFileNamePart();// 0x232b1d4
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x232b10c
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x232afd8
	void FetchBattleWonderfulInfo();// 0x232afc4
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x232ae80
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x232adbc
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x232acd4

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x64, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x1f62974
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x1f62760
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x1f626e0
	int GetDisableInBattleThreshold();// 0x1f400d8

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x211f0c0
	void Stop();// 0x1f4cfe0
	bool BeginWithFile();// 0x2049ba0
	bool Begin(FString Name, FString Host, int Port);// 0x211ee04

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x1f400d8
	static GameBackendHUD* GetInstance();// 0x261b79c
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x261b71c
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x261b69c

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x4575f30
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x4575eb0

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x261b3f0

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x80, Size: 12]
	World* CurWorld;//[Offset: 0x8c, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x90, Size: 60]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0xcc, Size: 60]
	delegate OnTableCreateInFighting;//[Offset: 0x108, Size: 12]
	FString PathCompressionConfigsPath;//[Offset: 0x18c, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x19c, Size: 4]
	FString BaseTableRelativeDir;//[Offset: 0x1a4, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x1b0, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x1bc, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x1f8, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x234, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x240, Size: 60]
	FString CurrentModName;//[Offset: 0x27c, Size: 12]
	FString EmptyModName;//[Offset: 0x288, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x294, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x2d0, Size: 60]
	void ReleaseTable(FName tableName);// 0x23e7388
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x23e7308
	UAEDataTable* GetTablePtr(FName tableName);// 0x23e7288
	BaseTableResMap* GetTableMap(FString tableName);// 0x23e71c4
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x23e68d0
	static UAETableManager* GetInstance();// 0x23e68a8
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x23e67ec
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x23e6730

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x4f0, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x508, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x520, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x524, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x528, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x530, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x548, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x558, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x564, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x570, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x57c, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x588, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x594, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5a0, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5ac, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5b0, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5b4, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5b8, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5bc, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5c4, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5c8, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5cc, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5dc, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x5ec, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5f8, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x600, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x618, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x624, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x630, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x63c, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x648, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x650, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x668, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x670, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x688, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x690, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6a8, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6b0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6cc, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6d0, Size: 12]
	int TickCycles;//[Offset: 0x6dc, Size: 4]
	int GameCycles;//[Offset: 0x6e0, Size: 4]
	int ClientCycles;//[Offset: 0x6e4, Size: 4]
	float NearClipPlane;//[Offset: 0x6e8, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ec, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x6f0, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f4, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f4, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f4, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f4, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f4, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f4, Size: 1]
	float FixedFrameRate;//[Offset: 0x6f8, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6fc, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70c, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x710, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	Color C_WorldBox;//[Offset: 0x718, Size: 4]
	Color C_BrushWire;//[Offset: 0x71c, Size: 4]
	Color C_AddWire;//[Offset: 0x720, Size: 4]
	Color C_SubtractWire;//[Offset: 0x724, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x728, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x72c, Size: 4]
	Color C_WireBackground;//[Offset: 0x730, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x734, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x738, Size: 4]
	Color C_BSPCollision;//[Offset: 0x73c, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x740, Size: 4]
	Color C_Volume;//[Offset: 0x744, Size: 4]
	Color C_BrushShape;//[Offset: 0x748, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x74c, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x750, Size: 12]
	byte TransitionType;//[Offset: 0x75c, Size: 1]
	FString TransitionDescription;//[Offset: 0x760, Size: 12]
	FString TransitionGameMode;//[Offset: 0x76c, Size: 12]
	float MeshLODRange;//[Offset: 0x778, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x780, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x784, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x788, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x78c, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	int MaxParticleResize;//[Offset: 0x794, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x798, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x79c, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7a8, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x7c4, Size: 4]
	float DisplayGamma;//[Offset: 0x7c8, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7cc, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7d0, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x7d4, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x7e4, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x7f4, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x804, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x814, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x825, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x825, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x825, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x825, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x828, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x830, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x838, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x850, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x854, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x858, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x85c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x860, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9b4, Size: 12]
	FString[] ServerActors;//[Offset: 0x9c0, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9cc, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d8, Size: 1]
	int NextWorldContextHandle;//[Offset: 0x9e8, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x20e1f4c
	bool SupportsHDRDisplayOutput();// 0x43a3930
	void SetVSyncEnabled(bool bEnable);// 0x43a38b0
	void SetVisualEffectQuality(int Value);// 0x263c544
	void SetViewDistanceQuality(int Value);// 0x43a3838
	void SetToDefaults();// 0x1f5c17c
	void SetTextureQuality(int Value);// 0x43a37c0
	void SetShadowQuality(int Value);// 0x43a3748
	void SetScreenResolution(IntPoint Resolution);// 0x43a36d8
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x43a3660
	void SetResolutionScaleValue(int NewScaleValue);// 0x43a35e8
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x43a3570
	void SetPostProcessingQuality(int Value);// 0x43a34f8
	void SetOverallScalabilityLevel(int Value);// 0x1f626e0
	void SetFullscreenMode(byte InFullscreenMode);// 0x43a3480
	void SetFrameRateLimit(float NewLimit);// 0x43a3408
	void SetFoliageQuality(int Value);// 0x43a3390
	void SetBenchmarkFallbackValues();// 0x43a337c
	void SetAudioQualityLevel(int QualityLevel);// 0x43a3304
	void SetAntiAliasingQuality(int Value);// 0x43a328c
	void SaveSettings();// 0x215affc
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x43a3184
	void RevertVideoMode();// 0x43a3170
	void ResetToCurrentSettings();// 0x20144c0
	void LoadSettings(bool bForceReload);// 0x435df2c
	bool IsVSyncEnabled();// 0x43a3148
	bool IsVSyncDirty();// 0x43a3120
	bool IsScreenResolutionDirty();// 0x43a30f8
	bool IsHDREnabled();// 0x43a30d0
	bool IsFullscreenModeDirty();// 0x43a30a8
	bool IsDirty();// 0x2055e2c
	int GetVisualEffectQuality();// 0x43a3080
	int GetViewDistanceQuality();// 0x1f6062c
	int GetTextureQuality();// 0x43a3058
	int GetShadowQuality();// 0x43a3030
	IntPoint GetScreenResolution();// 0x43a2fe8
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x43a2e54
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x43a2cc0
	float GetRecommendedResolutionScale();// 0x43a2c90
	byte GetPreferredFullscreenMode();// 0x43a2c68
	int GetPostProcessingQuality();// 0x2623880
	int GetOverallScalabilityLevel();// 0x43a2c40
	IntPoint GetLastConfirmedScreenResolution();// 0x43a2bf8
	byte GetLastConfirmedFullscreenMode();// 0x43a2bd0
	static GameUserSettings* GetGameUserSettings();// 0x43a2ba8
	byte GetFullscreenMode();// 0x43a2b80
	float GetFrameRateLimit();// 0x43a2b58
	int GetFoliageQuality();// 0x43a2b30
	IntPoint GetDesktopResolution();// 0x43a2ae8
	static IntPoint GetDefaultWindowPosition();// 0x43a2aa8
	static byte GetDefaultWindowMode();// 0x2119e20
	float GetDefaultResolutionScale();// 0x43a2a78
	static IntPoint GetDefaultResolution();// 0x43a2a38
	int GetCurrentHDRDisplayNits();// 0x43a2a10
	int GetAudioQualityLevel();// 0x43a29f4
	int GetAntiAliasingQuality();// 0x43a29cc
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x43a2904
	void ConfirmVideoMode();// 0x43a28f0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x43a2868
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x43a27e8
	void ApplyNonResolutionSettings();// 0x1f88e48
	void ApplyHardwareBenchmarkResults();// 0x1f5c250

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1bc, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x2bbd2f4
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bbd2f4
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc0, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	int LimitBandage;//[Offset: 0xd8, Size: 4]
	int LimitMedical;//[Offset: 0xdc, Size: 4]
	int LimitAnodyne;//[Offset: 0xe0, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe4, Size: 4]
	int LimitAdrenaline;//[Offset: 0xe8, Size: 4]
	int LimitShouliudan;//[Offset: 0xec, Size: 4]
	int LimitYanwudan;//[Offset: 0xf0, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf4, Size: 4]
	int LimitRanshaodan;//[Offset: 0xf8, Size: 4]
	int LimitBullet9mm;//[Offset: 0xfc, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x100, Size: 4]
	int Limit12koujing;//[Offset: 0x104, Size: 4]
	int Limit45koujing;//[Offset: 0x108, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x10c, Size: 4]
	int Limitbolt;//[Offset: 0x110, Size: 4]
	int LimitBullet5;//[Offset: 0x114, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	int FPSLevel;//[Offset: 0x11c, Size: 4]
	int ArtStyle;//[Offset: 0x120, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x124, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x128, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x164, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a4, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e4, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f0, Size: 12]
	int LRShootMode;//[Offset: 0x1fc, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x204, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x210, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	int NewGetActorID;//[Offset: 0x220, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float 3DTouchValue;//[Offset: 0x228, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	int ShotGunShootMode;//[Offset: 0x230, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x234, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x238, Size: 4]
	float VehicleEye;//[Offset: 0x23c, Size: 4]
	float ParachuteEye;//[Offset: 0x240, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x244, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x250, Size: 4]
	int DrivingViewMode;//[Offset: 0x254, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	int FpViewValue;//[Offset: 0x25c, Size: 4]
	float CamFpFreeEye;//[Offset: 0x260, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x264, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x274, Size: 4]
	FString currentLanguage;//[Offset: 0x278, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	FString lastViewDayTime;//[Offset: 0x288, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x294, Size: 12]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a4, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2a8, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b0, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2b8, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c0, Size: 4]
	int RedDotCHType;//[Offset: 0x2c4, Size: 4]
	int HolographicCHColor;//[Offset: 0x2c8, Size: 4]
	int HolographicCHType;//[Offset: 0x2cc, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d4, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2dc, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e4, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x320, Size: 4]
	FString XGLanguageTag;//[Offset: 0x324, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x330, Size: 12]
	FString XGPushNightTag;//[Offset: 0x33c, Size: 12]
	FString XGPushDayTag;//[Offset: 0x348, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x358, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x360, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	int LimitSniper2X;//[Offset: 0x368, Size: 4]
	int LimitSniper3X;//[Offset: 0x36c, Size: 4]
	int LimitSniper4X;//[Offset: 0x370, Size: 4]
	int LimitSniper6X;//[Offset: 0x374, Size: 4]
	int LimitSniper8X;//[Offset: 0x378, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	int SidewaysMode;//[Offset: 0x380, Size: 4]
	int OpenMirrorMode;//[Offset: 0x384, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	int LobbyStyleID;//[Offset: 0x390, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	float ScreenLightness;//[Offset: 0x398, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a0, Size: 12]
	FString RechargePosSave;//[Offset: 0x3ac, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3bc, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3f8, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x3fc, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x404, Size: 4]
	int SideMirrorMode;//[Offset: 0x408, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x40c, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x41c, Size: 4]
	int LimitAntidote;//[Offset: 0x420, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x428, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x438, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	int FPPFireMode;//[Offset: 0x440, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x44c, Size: 4]
	byte TurboLastQuality;//[Offset: 0x450, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x454, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x490, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4cc, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4da, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4dc, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4e8, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	int TD_FireMode;//[Offset: 0x4f8, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x4fc, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x504, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x50c, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	int LimitSnowMan;//[Offset: 0x514, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 1]
	int ColorBlindnessType;//[Offset: 0x51c, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x524, Size: 4]
	float UAVScopePercent;//[Offset: 0x528, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	int SideMirrorType;//[Offset: 0x530, Size: 4]
	int SideMirrorColor;//[Offset: 0x534, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x53c, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	int AutoPickClipType;//[Offset: 0x554, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x558, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x564, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	int HitEffectColor;//[Offset: 0x574, Size: 4]
	int HurtEffectColor;//[Offset: 0x578, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x580, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int BuildDoubleClick;//[Offset: 0x588, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x58c, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x590, Size: 4]
	int DoubleClickDistance;//[Offset: 0x594, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	int BattleFPS;//[Offset: 0x59c, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a0, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a4, Size: 4]
	int LobbyFPS;//[Offset: 0x5a8, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b0, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5bc, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5f8, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x634, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x670, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6ac, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6e8, Size: 60]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x727, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x72c, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x768, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7a4, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e0, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81e, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81f, Size: 1]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x824, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x828, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x830, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x834, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x838, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83d, Size: 1]
	int ShoulderMode;//[Offset: 0x840, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84b, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x854, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85a, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x85c, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x869, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86a, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x86c, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 1]
	int TpViewValue;//[Offset: 0x87c, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	int PickUpListMode;//[Offset: 0x884, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x88c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x890, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8a8, Size: 4]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b0, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8b4, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bb, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8c4, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ca, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cb, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d0, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8d8, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x2e4, Size: 4]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x2e8, Size: 4]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x2ec, Size: 4]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x2f0, Size: 4]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x2f4, Size: 4]
	void OnRep_ReplicatedPhysAsset();// 0x1f39ee0
	void OnRep_ReplicatedMesh();// 0x1f39ec4
	void OnRep_ReplicatedMaterial1();// 0x1f39efc
	void OnRep_ReplicatedMaterial0();// 0x1f39ea8

--------------------------------
Class: UAELobbyGamePawnMode_C.UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x368, Size: 4]

--------------------------------
Class: UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: StatHUD.HUD.Actor.Object
	void ToggleSlateStat();// 0x1f4cfe0

--------------------------------
Class: BP_PlayerLobbyPawn_C.STExtraLobbyCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x770, Size: 4]
	void CharEquipWeaponBySocketID(int resID, bool Use, FName SocketID, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraWeapon* CallFunc_EquipWeaponBySocketID_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bbd2f4
	void CharUnEquipWeaponByResId(int resID, FName CallFunc_GetWeaponSocketNameByResId_SocketName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue);// 0x2bbd2f4
	void OnAsyncLobbyWeaponAllAssetsLoadedEvent(STExtraWeapon* Weapon, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2bbd2f4
	void OnAsyncLobbyWeaponAnimLoadedEvent(STExtraWeapon* Weapon, delegate K2Node_CreateDelegate_OutputDelegate, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void CharUnEquipExtraWeapon(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon* CallFunc_GetUsingWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, STExtraWeapon* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_NotEqual_ObjectObject_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x2bbd2f4
	void GetWeaponSocketNameByResId(int resID, out FName SocketName, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void OnAvatarEquippedLua(int SlotType, bool IsEquipped, int ItemId);// 0x2bbd2f4
	void SetForceUseDefaultIdle(bool force);// 0x2bbd2f4
	void checkCanEquipWeapon(int WeaponId, out bool canEquip, bool originWeaponExist, bool skinWeaponExist, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, FString CallFunc_Conv_BoolToString_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	bool NeedLODOptimize(bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x2bbd2f4
	void UpdateClothInten(float leten, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void UpdateClothMatParam(float RotateSpeed, int ItemId, int NewLocalVar, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x2bbd2f4
	void StopActionCamera();// 0x2bbd2f4
	void RotateOnTickInternal(bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, HitResult CallFunc_K2_AddActorWorldRotation_SweepHitResult);// 0x2bbd2f4
	void EnableClothAndHairAnimation(bool IsEnable, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance, bool K2Node_DynamicCast_bSuccess2, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess3, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base2, bool K2Node_DynamicCast_bSuccess4, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance2, bool K2Node_DynamicCast_bSuccess5);// 0x2bbd2f4
	void GetCurrentActionID(out int ActionID);// 0x2bbd2f4
	void SetAvatarLevel(int Level, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void OnAvatarAllMeshLoaded(FString ___string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD);// 0x2bbd2f4
	void GetLobbyWeaponClass(int InWeaponAvatarID, out class Object ObjectClass, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWeaponAvatarParentID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyWeaponClassTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue);// 0x2bbd2f4
	void TryRotateAvatar(LuaBPVar ___struct_Variable, LuaBPVar ___struct_Variable2, FString ___string_Variable, LuaBPVar ___struct_Variable3, LuaBPVar ___struct_Variable4, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, bool CallFunc_CanRotateMainCharacter_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2bbd2f4
	void CheckAndShowWeaponPendant(int WeaponAvatarID, int CallFunc_GetPendantIDByWeaponID_ReturnValue, WeaponAvatarComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_PutOnEquipmentByResID_ReturnValue);// 0x2bbd2f4
	void testLoadHandle(ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, BackpackAvatarHandle* K2Node_DynamicCast_AsBackpack_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bbd2f4
	void SetAvatarVisibleForEmote(bool Visible, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bbd2f4
	void SetEquipingWeaponScale(float Scale, Vector CallFunc_Conv_FloatToVector_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void SetWeaponPendantSocketType(enum Type, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void SetIsMVPMotion(bool isMVPMotion);// 0x2bbd2f4
	void SyncWeaponMontage(bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue2, float CallFunc_Montage_GetPosition_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x2bbd2f4
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x2bbd2f4
	void SwitchMeshUpdateFlag();// 0x2bbd2f4
	void SetClothAnimDyAlphaInst(float Alpha);// 0x2bbd2f4
	void SetClothAnimDyAlphaGrad(float Alpha, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2bbd2f4
	void SetClothAnimDyAlpha(float Alpha, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void StopEmotionSound();// 0x2bbd2f4
	void RotateOnTick(float RotateTime, float TargetRotation, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2bbd2f4
	void SwitchSexAndHeadAndHair(int sex, int headid, int Hair, byte SexType, ItemDefineID CallFunc_GetEquippedItemDefineID2_ItemDefineID, ItemDefineID CallFunc_GetEquippedItemDefineID2_RealShowItemDefineID, bool CallFunc_EqualEqual_IntInt_ReturnValue, byte CallFunc_GetCharSceneType_ReturnValue, byte CallFunc_GetLobbyPosIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void OnEndActionHandle(int ActionID, LuaBPVar ___struct_Variable, LuaBPVar ___struct_Variable2, LuaBPVar ___struct_Variable3, FString ___string_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, LuaBPVar CallFunc_IntToLVar_ReturnValue, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD);// 0x2bbd2f4
	void OnPlayActionHandle(int ActionID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bbd2f4
	void CharEquipWeaponByResId_ForceClientMode(int resID, STExtraWeapon* CallFunc_GetExtraWeaponByResID_extraWeaponObj, BattleItemHandleBase* CallFunc_GetExtraWeaponByResID_weaponHandle, bool CallFunc_GetExtraWeaponByResID_playIdleAnim, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, WeaponAvatarComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4);// 0x2bbd2f4
	void GetAllEquipmentListLobby(out FString[] Result, FString[] EquipmentList, int CallFunc_MakeLiteralInt_ReturnValue, int ___int_Variable, int ___int_Variable2, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, int CallFunc_GetEquipmentInfoBySlot_ItemID, int CallFunc_GetEquipmentInfoBySlot_ColorID, int CallFunc_GetEquipmentInfoBySlot_PatternID, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_IsDefautlAvatarID_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3);// 0x2bbd2f4
	void SetConflictRuleEnable(bool bEnableConflictRule);// 0x2bbd2f4
	void GetEquipmentInfoBySlot(enum SlotType, out int ItemId, out int ColorID, out int PatternID, AvatarCustom NewLocalVar, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarSlotDesc CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void IsSlotHasEquipped(enum SlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_IsSlotHasEquipped_ReturnValue);// 0x2bbd2f4
	void IsItemHasEquipped(int InItemID, int ColorID, int PatternID, out bool Result, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, int ___int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsItemHasEquipped_ReturnValue, AvatarSlotDesc[] CallFunc_Map_Values_Values, AvatarSlotDesc CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x2bbd2f4
	void PutOffEquipmentBySlot(enum SlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue);// 0x2bbd2f4
	void PlayEmoteLoop(FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAvatarBattleEffect_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	void ShouldCurEmoteShowWeapon(out bool ShouldShow, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void HandleWeaponDisplayWhenPlayEmote(bool CallFunc_ShouldCurEmoteShowWeapon_ShouldShow, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2bbd2f4
	void GetAllEquipmentList(out int[] Result, int[] EquipmentList, int CallFunc_MakeLiteralInt_ReturnValue, int ___int_Variable, int ___int_Variable2, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, int CallFunc_GetEquipmentInfoBySlot_ItemID, int CallFunc_GetEquipmentInfoBySlot_ColorID, int CallFunc_GetEquipmentInfoBySlot_PatternID, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2bbd2f4
	void IsAnimShowMan(out bool bMan, FString ___string_Variable, LuaBPVar ___struct_Variable, LuaBPVar ___struct_Variable2, LuaBPVar ___struct_Variable3, bool CallFunc_IsValid_ReturnValue, LuaBPVar ___struct_Variable4, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, int CallFunc_LVarToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bbd2f4
	void PlayAnimHit();// 0x2bbd2f4
	void SetCanRotate(bool canRotate);// 0x2bbd2f4
	void SetPawnAndClothVisibility(bool Show, int CallFunc_MakeLiteralInt_ReturnValue, int ___int_Variable, int ___int_Variable2, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x2bbd2f4
	void RemoveAvatarBySlot(int CallFunc_MakeLiteralInt_ReturnValue, int ___int_Variable, int ___int_Variable2, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue);// 0x2bbd2f4
	void PutOffEquipmentByResID(int resID, out bool Result, bool CallFunc_PutOffEquimentByResID_ReturnValue);// 0x2bbd2f4
	void PutOnEquipmentByResID(int resID, int ColorID, int PatternID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, CharacterAvatarComp2_BP_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_PutOnCustomEquipmentByID_result);// 0x2bbd2f4
	void CharStopEmoteByResId(bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_OnStopEmote_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bbd2f4
	void AvatarDisplaySceneEquipWeapon(bool ForceClientMode, int resID, STExtraWeapon* CallFunc_GetExtraWeaponByResID_extraWeaponObj, BattleItemHandleBase* CallFunc_GetExtraWeaponByResID_weaponHandle, bool CallFunc_GetExtraWeaponByResID_playIdleAnim, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, WeaponAvatarComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4);// 0x2bbd2f4
	void HideWeapon(bool isHide, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void CharPlayEmoteByResId(int resID, FString ExtraInfo);// 0x2bbd2f4
	void CharUnEquipWeapon(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, STExtraWeapon* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bbd2f4
	void CharEquipWeaponByResId(int resID, bool bUse, bool localPlayIdleAnim, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_checkCanEquipWeapon_canEquip, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName CallFunc_GetWeaponSocketNameByResId_SocketName, STExtraWeapon* CallFunc_EquipWeaponBySocketID_ReturnValue, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bbd2f4
	BackpackEmoteHandle* GetEmoteHandle(int ItemId, int ID, int CallFunc_GetBPID_BPID, bool CallFunc_NotEqual_IntInt_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackEmoteHandle K2Node_ClassDynamicCast_AsBackpack_Emote_Handle, bool K2Node_ClassDynamicCast_bSuccess, BackpackEmoteHandle* CallFunc_SpawnObject_ReturnValue, BackpackEmoteHandle* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void GetExtraWeaponByResID(int WeaponId, out STExtraWeapon* extraWeaponObj, out BattleItemHandleBase* WeaponHandle, out bool PlayIdleAnim, class BattleItemHandleBase tmpBattleItemHBClass, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetBPID_BPID, class Object CallFunc_GetLobbyWeaponClass_ObjectClass, FString CallFunc_Conv_IntToString_ReturnValue, class STExtraWeapon K2Node_ClassDynamicCast_AsSTExtra_Weapon, bool K2Node_ClassDynamicCast_bSuccess, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackWeaponHandle K2Node_ClassDynamicCast_AsBackpack_Weapon_Handle, bool K2Node_ClassDynamicCast_bSuccess2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess3, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, STExtraWeapon* CallFunc_FinishSpawningActor_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue2, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess4);// 0x2bbd2f4
	BackpackAvatarHandle* GetBattleItemFromResID(int RowName, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, int CallFunc_GetBPID_BPID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarHandle K2Node_ClassDynamicCast_AsBackpack_Avatar_Handle, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarHandle* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void GetBPID(int RowName, out int BPID);// 0x2bbd2f4
	void GetHiddenFlags(int resID, out enum[] hiddenFlags, BackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void Timeline_0__FinishedFunc();// 0x2bbd2f4
	void Timeline_0__UpdateFunc();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_3_ComponentOnInputTouchBeginSignature__DelegateS(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentOnInputTouchEndSignature__DelegateSig(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void ReceiveDestroyed();// 0x2bbd2f4
	void OnEmoteFinish(int EmoteIndex);// 0x2bbd2f4
	void OnEmoteBegin(int EmoteIndex);// 0x2bbd2f4
	void EventPlayHurtAnim();// 0x2bbd2f4
	void SetMaleAnimClass();// 0x2bbd2f4
	void SetFemaleAnimClass();// 0x2bbd2f4
	void OnPutOnEquipByIdFaild(int SlotID, ItemDefineID NewItemID);// 0x2bbd2f4
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x2bbd2f4
	void TickClothLeten(float from);// 0x2bbd2f4
	void CustomBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_BP_PlayerLobbyPawn(int EntryPoint, LuaBPVar ___struct_Variable, LuaBPVar ___struct_Variable2, LuaBPVar ___struct_Variable3, LuaBPVar ___struct_Variable4, FString ___string_Variable, LuaBPVar ___struct_Variable5, LuaBPVar ___struct_Variable6, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, LuaBPVar ___struct_Variable7, bool CallFunc_LVarToBool_ReturnValue, LuaBPVar ___struct_Variable8, FString ___string_Variable2, delegate K2Node_CreateDelegate_OutputDelegate, LuaBPVar CallFunc_CallLuaWithArgs_OutA2, LuaBPVar CallFunc_CallLuaWithArgs_OutB2, LuaBPVar CallFunc_CallLuaWithArgs_OutC2, LuaBPVar CallFunc_CallLuaWithArgs_OutD2, int CallFunc_LVarToInt_ReturnValue, float K2Node_Event_DeltaSeconds, byte K2Node_ComponentBoundEvent_FingerIndex2, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent2, byte K2Node_ComponentBoundEvent_FingerIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent, int K2Node_CustomEvent_EmoteIndex2, int K2Node_CustomEvent_EmoteIndex, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_NewItemID, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyBattleSlotMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_PutOffEquipmentBySlot_result, float CallFunc_Add_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_PutOnCustomEquipmentByID_result, delegate K2Node_CreateDelegate_OutputDelegate3, enum K2Node_CustomEvent_SlotType, bool K2Node_CustomEvent_isEquipped, int K2Node_CustomEvent_ItemID, int CallFunc_Conv_ByteToInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, float K2Node_CustomEvent_From, float CallFunc_Lerp_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue, int CallFunc_TypeToInt_ReturnValue, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue);// 0x2bbd2f4
	void OnSetForceUseDefaultIdle__DelegateSignature(bool force);// 0x2bbd2f4
	void OnEquipClothStateChange__DelegateSignature(BackpackAvatarHandle* AvatarHandle, bool IsEuqiped, int ItemId);// 0x2bbd2f4
	void OnChangeWeapon__DelegateSignature();// 0x2bbd2f4
	void OnchangeGender__DelegateSignature();// 0x2bbd2f4
	void OnChangeEquipment__DelegateSignature();// 0x2bbd2f4
	void OnStopAction__DelegateSignature(int ActionID);// 0x2bbd2f4
	void OnPlayAction__DelegateSignature(int ActionID);// 0x2bbd2f4
	void OnLogicPuton__DelegateSignature(enum SlotType, ItemDefineID NewItemID, ItemDefineID OldParam, int LuaID);// 0x2bbd2f4
	BP_LobbyWeaponManager_C* BP_LobbyWeaponManager;//[Offset: 0x774, Size: 4]
	LobbyPlayEmoteComponent_BP_C* LobbyPlayEmoteComponent_BP;//[Offset: 0x778, Size: 4]
	LobbyWeaponAnimationComponent_C* LobbyWeaponAnimationComponent;//[Offset: 0x77c, Size: 4]
	SkeletalMeshComponent* WeaponSkeletalMesh;//[Offset: 0x780, Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x784, Size: 4]
	AELobbyCharAnimListComp* AELobbyCharAnimListComp;//[Offset: 0x788, Size: 4]
	float Timeline_0_Time_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x78c, Size: 4]
	byte Timeline_0__Direction_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x790, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x794, Size: 4]
	int headid;//[Offset: 0x798, Size: 4]
	int resID;//[Offset: 0x79c, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float LocationX;//[Offset: 0x7a4, Size: 4]
	Rotator LastRotator;//[Offset: 0x7a8, Size: 12]
	byte FingerIndex;//[Offset: 0x7b4, Size: 1]
	int LobbyPosition;//[Offset: 0x7b8, Size: 4]
	bool IsHoldingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	STExtraWeapon* curEquipingWeapon;//[Offset: 0x7c0, Size: 4]
	<int,BackpackEmoteHandle*> EmoteItemIDToHandleMap;//[Offset: 0x7c4, Size: 60]
	FString PlayerKey;//[Offset: 0x800, Size: 12]
	bool HeadIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 1]
	bool canRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 1]
	bool bMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80e, Size: 1]
	int LuaID;//[Offset: 0x810, Size: 4]
	delegate OnLogicPuton;//[Offset: 0x814, Size: 12]
	bool bHasBeginPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	delegate OnPlayAction;//[Offset: 0x824, Size: 12]
	delegate OnStopAction;//[Offset: 0x830, Size: 12]
	delegate OnChangeEquipment;//[Offset: 0x83c, Size: 12]
	BackpackEmoteHandle* CurEmoteHandle;//[Offset: 0x848, Size: 4]
	bool bIsEmoteLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	int CurShowingWeaponSkinID;//[Offset: 0x850, Size: 4]
	int CurrentActionID;//[Offset: 0x854, Size: 4]
	bool IsChangingHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	int HeadTypeID;//[Offset: 0x85c, Size: 4]
	int PlayOnChangingHeadAcionID;//[Offset: 0x860, Size: 4]
	int CurPlayEmoteId;//[Offset: 0x864, Size: 4]
	bool IsPlayingAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	float RotateTime;//[Offset: 0x86c, Size: 4]
	float TargetRotation;//[Offset: 0x870, Size: 4]
	bool StartRotateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	int SubType;//[Offset: 0x878, Size: 4]
	int ColorID;//[Offset: 0x87c, Size: 4]
	int PatternID;//[Offset: 0x880, Size: 4]
	float ClothAnimDyAlpha;//[Offset: 0x884, Size: 4]
	float CurClothAnimDyAlpha;//[Offset: 0x888, Size: 4]
	float ClothAnimDyAlphaDiff;//[Offset: 0x88c, Size: 4]
	byte UpdateFlag;//[Offset: 0x890, Size: 1]
	bool bManInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	bool isMVPMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 1]
	delegate OnchangeGender;//[Offset: 0x894, Size: 12]
	delegate OnChangeWeapon;//[Offset: 0x8a0, Size: 12]
	bool bPlayIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 1]
	bool isAutoTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 1]
	int ExactDeviceLevel;//[Offset: 0x8b0, Size: 4]
	Vector LocationBeforeEmote;//[Offset: 0x8b4, Size: 12]
	<int> NoneLODModeWeapons;//[Offset: 0x8c0, Size: 60]
	int AvatarLevel;//[Offset: 0x8fc, Size: 4]
	<int> DynamicMatClothSet;//[Offset: 0x900, Size: 60]
	bool ClothDyMatChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	float Inten;//[Offset: 0x940, Size: 4]
	delegate OnEquipClothStateChange;//[Offset: 0x944, Size: 12]
	bool ForceUseDefaultIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	delegate OnSetForceUseDefaultIdle;//[Offset: 0x954, Size: 12]
	<int,int> DynamicMatClothMap;//[Offset: 0x960, Size: 60]
	<FName,STExtraWeapon*> NewVar;//[Offset: 0x99c, Size: 60]

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x63c, Size: 12]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x64c, Size: 12]
	byte charSceneType;//[Offset: 0x658, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x659, Size: 1]
	int LocalLobbyPos;//[Offset: 0x65c, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x660, Size: 12]
	byte lobbyGender;//[Offset: 0x66c, Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x670, Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x698, Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x6c0, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x6c4, Size: 4]
	int resultAvatarPoseIndex;//[Offset: 0x6c8, Size: 4]
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0x6cc, Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x6d8, Size: 12]
	BackpackEmoteHandle* curHandle;//[Offset: 0x6e4, Size: 4]
	delegate EmoteMontageStartEvent;//[Offset: 0x6e8, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x6f4, Size: 12]
	AkComponent* emoteSound_Comp;//[Offset: 0x700, Size: 4]
	delegate SimulateHurtEvent;//[Offset: 0x704, Size: 12]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x718, Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x748, Size: 12]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x754, Size: 12]
	FString LuaFilePath;//[Offset: 0x760, Size: 12]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x21f1618
	void SimulateHurt(bool bHurt);// 0x21f1598
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x21f14b4
	void SetResultAvatarPosIndex(int PosIndex);// 0x21f143c
	void SetMaleAnimClass();// 0x21f1420
	void SetLobbyPosIndexInAvatarScene(int pos);// 0x21f13a8
	void SetLobbyPosIndex(byte pos);// 0x21f1328
	void SetLobbyCharacterProperty(byte sceneType, byte pos, byte gender);// 0x21f1210
	void SetLobbyAnimGender(byte gender);// 0x21f1190
	void SetFemaleAnimClass();// 0x21f1174
	void SetCharSceneType(byte sceneType);// 0x21f10f4
	void PlayGodEffect(int Level);// 0x21f107c
	void PlayEmoteInterruptSound();// 0x21f1068
	bool OnStopEmote();// 0x21f1040
	bool OnPlayEmote(int EmoteId, FString ExtraInfo);// 0x21f0e98
	void HandleOnCharAnimLoadingFinished(STExtraWeapon* Weapon);// 0x21f0e20
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x21f0df8
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x21f0cf0
	int GetPosIndex();// 0x21f0cc8
	byte GetLobbyPosIndex();// 0x21f0ca0
	byte GetLobbyAnimGender();// 0x21f0c78
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x2bbd2f4
	STExtraWeapon* GetCurrentWeapon();// 0x21f0c50
	byte GetCharSceneType();// 0x21f0c28
	AnimationAsset* GetCharacterPlayWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int AnimIndex);// 0x21f0b20
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x21f0a18
	void ForceRefreshCharacterAnimation();// 0x21f0a04
	void EquipWeapon(STExtraWeapon* Weapon);// 0x21f098c
	void CallGlobalLuaFunction(FString FunctionName);// 0x21f08d0

--------------------------------
Class: BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x790, Size: 4]
	void OnAsyncLoadLobbyWeaponAnimDone();// 0x2bbd2f4
	void CheckWeaponAssetsAllLoaded(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2bbd2f4
	void ResetWeaponLoadedStatus();// 0x2bbd2f4
	void OnAsyncLoadLobbyWeaponAssetsDone(FString ___string_Variable, bool CallFunc_IsValid_ReturnValue, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, WeaponAnimInstanceBase* K2Node_DynamicCast_AsWeapon_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess2);// 0x2bbd2f4
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel_Lobby(int Level, int SideType, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Transform CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Transform CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue);// 0x2bbd2f4
	void InitMesh(BattleItemHandleBase* Handle);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_BP_LobbyWeapon(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2bbd2f4
	void OnWeaponAllAssetsLoaded__DelegateSignature(STExtraWeapon* Weapon);// 0x2bbd2f4
	WeaponAvatarComp_BP_C* WeaponAvatarComp_BP;//[Offset: 0x794, Size: 4]
	bool bHoldBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	<FString,Transform> WeaponAttachRelativeTransformMap;//[Offset: 0x79c, Size: 60]
	bool isAutoTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	bool WeaponMeshAndMatLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	bool IsSyncLoadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7da, Size: 1]
	bool WeaponAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7db, Size: 1]
	delegate OnWeaponAllAssetsLoaded;//[Offset: 0x7dc, Size: 12]

--------------------------------
Class: STExtraLobbyWeapon.STExtraWeapon.Actor.Object
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel_Lobby(int Level, int SideType);// 0x21f38e4

--------------------------------
Class: LuaBPVar

--------------------------------
Class: WeaponAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2ec, Size: 4]
	STExtraShootWeapon* C_OwnerWeapon;//[Offset: 0x2f0, Size: 4]
	bool C_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool C_Tactical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	byte C_WeaponState;//[Offset: 0x2f6, Size: 1]
	float C_ReloadAnimRate;//[Offset: 0x2f8, Size: 4]
	float C_CurGasAngle;//[Offset: 0x2fc, Size: 4]
	bool C_CustomScopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool C_WeaponState_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool C_State_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	bool C_State_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303, Size: 1]
	float C_AlphaForHolder;//[Offset: 0x304, Size: 4]
	AnimMontage* TacticalReloadMontage;//[Offset: 0x308, Size: 4]
	AnimMontage* ChargeReloadMontage;//[Offset: 0x30c, Size: 4]
	AnimMontage* BoltMontage;//[Offset: 0x310, Size: 4]
	AnimMontage* FireMontage;//[Offset: 0x314, Size: 4]
	AnimMontage* WeaponDropMontage;//[Offset: 0x318, Size: 4]
	bool ShouldUpdateReloadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool PlayIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	void SetHolderBack_Lobby();// 0x1f60944
	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);// 0x23171c4
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x2317144

--------------------------------
Class: WeaponAvatarComp_BP_C.WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc, Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10, Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14, Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c, Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24, Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30, Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c, Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48, Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54, Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c, Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60, Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c, Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x70, Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x7c, Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x80, Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x84, Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x90, Size: 12]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0x9c, Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xa8, Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xac, Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xb4, Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xb8, Size: 4]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xbc, Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0xc8, Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0xd4, Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0xe0, Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0xec, Size: 4]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0xf0, Size: 4]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0xf4, Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x100, Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x10c, Size: 4]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x110, Size: 4]
	FString QualityRate_78_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x114, Size: 12]
	int character_param_81_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x120, Size: 4]
	int JKBPID_82_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x124, Size: 4]
	int ItemSoundID_83_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x128, Size: 4]
	int ResSeprateType_84_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x12c, Size: 4]
	int CanIntoBag_85_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x130, Size: 4]
	int Electricity_86_19A7E9806DE4A79A2FAD5505041B42E9;//[Offset: 0x134, Size: 4]
	int ItemPickupRule_87_49300E005A58193E16239C7A00F80F05;//[Offset: 0x138, Size: 4]
	FString SpecialIconSize_89_4BBF62802BA083E043328BD00C42A315;//[Offset: 0x13c, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 12]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0xc, Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x10, Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x14, Size: 12]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x2ec, Size: 1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2f0, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	float C_BlendFactorInLobby;//[Offset: 0x2f8, Size: 4]
	float C_BlendFactorInBattle;//[Offset: 0x2fc, Size: 4]
	float C_MoveThreshold;//[Offset: 0x300, Size: 4]
	float C_BlendScaleThreshold;//[Offset: 0x304, Size: 4]
	float C_BlendScale;//[Offset: 0x308, Size: 4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x310, Size: 4]
	Vector LastLocation;//[Offset: 0x314, Size: 12]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x1f8d9f0
	bool isCothAnimEnable();// 0x217c19c
	void EnableClothAnim();// 0x217c188
	void DisableClothAnim();// 0x217c174

--------------------------------
Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x2fc, Size: 1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	bool IsInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 1]
	Vector PawnCurVelocity;//[Offset: 0x300, Size: 12]
	int gender;//[Offset: 0x310, Size: 4]
	bool IsBackpackEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool IsWindEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool IsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool IsUsingSpecialIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	bool AllowSKMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bParachuteWindFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x31c, Size: 4]
	STExtraLobbyCharacter* OwnerLobbyCharacter;//[Offset: 0x320, Size: 4]
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x2142178
	bool isCothAnimEnable();// 0x2142150
	void HandleStateChanged(enum EnteredState);// 0x21420d8
	void HandleCorectSkMeshAnim(bool bOpenCorrect);// 0x2142058
	void EnableClothAnim();// 0x2142044
	void DisableClothAnim();// 0x2142030

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x2ec, Size: 1]
	enum LobbySimulationSpace;//[Offset: 0x2ed, Size: 1]
	float AnimDynAlpha;//[Offset: 0x2f0, Size: 4]
	enum CurrentSimulateSpace;//[Offset: 0x2f4, Size: 1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x2f8, Size: 4]

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x270, Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x298, Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x2c0, Size: 40]
	ParticleSystem* ParticleEffect100;//[Offset: 0x2e8, Size: 40]
	ParticleSystem* ParticleEffect101;//[Offset: 0x310, Size: 40]
	ParticleSystem* ParticleEffect102;//[Offset: 0x338, Size: 40]
	ParticleSystem* ParticleEffect103;//[Offset: 0x360, Size: 40]
	ParticleSystem* ParticleEffect104;//[Offset: 0x388, Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x3b0, Size: 4]
	WidgetComponent* WidgetComponent;//[Offset: 0x3b4, Size: 4]
	ParticleSystemComponent*[] effects;//[Offset: 0x3bc, Size: 12]
	void StopEffect();// 0x209a7e0
	void SetNameText(int TextId);// 0x209a760
	void PlayGodEffect(int Level, Vector Location);// 0x209a6a0
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x209a5e0

--------------------------------
Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 4]
	int Head;//[Offset: 0x4, Size: 4]
	int Hair;//[Offset: 0x8, Size: 4]
	int WeaponId;//[Offset: 0xc, Size: 4]
	FString Name;//[Offset: 0x10, Size: 12]
	FString Nation;//[Offset: 0x1c, Size: 12]
	int[] AvatarList;//[Offset: 0x28, Size: 12]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x34, Size: 12]
	int Index;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x18c, Size: 12]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x198, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x1a4, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x1b0, Size: 12]
	int resultAvatarPoseIndex;//[Offset: 0x1bc, Size: 4]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x27c856c
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x27c83c0
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte sceneType);// 0x27c8270
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] animList, byte sceneType);// 0x27c817c

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x4, Size: 12]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x4, Size: 12]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x38, Size: 40]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x60, Size: 12]

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BP_STRUCT_LobbyWeaponClassTable_type
	int BPID_0_02DA9D400965BF17443160A108D6A034;//[Offset: 0x0, Size: 4]
	FString ClassPath_1_7626F6405EC62EED16FC055F06250DC8;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponAvatarBattleEffect_type
	int ID_0_5DEDE54072F9770F24CC59220C975D44;//[Offset: 0x0, Size: 4]
	int Opacity_4_248EF8405566ED7775F694880FAEF559;//[Offset: 0x4, Size: 4]
	FString BgPath_5_57B6EF804218D14414997B550D10FFF8;//[Offset: 0x8, Size: 12]
	int IsFixColor_6_3314BA80204E2CFC58913B8B0798DA02;//[Offset: 0x14, Size: 4]
	int B_7_16D8F2805F7B045E78F002D109C975D2;//[Offset: 0x18, Size: 4]
	int R_8_16E8F6805F7B046E78F002C109C975C2;//[Offset: 0x1c, Size: 4]
	int G_9_16DDF3C05F7B046378F002DA09C975D7;//[Offset: 0x20, Size: 4]
	FString EffectPath_11_17EB988040F0D4DA01E4BC790CF448F8;//[Offset: 0x24, Size: 12]
	int EmotionID_12_1C80DC003AB2B942245E5E330FDB96D4;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2bbd2f4
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x2bbd2f4
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x2bbd2f4
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x2bbd2f4
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x2bbd2f4
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x2bbd2f4
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x2bbd2f4
	bool HandlePickup(out interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x2bbd2f4
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, ItemAssociation K2Node_MakeStruct_ItemAssociation, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue3, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x2bbd2f4
	STExtraPlayerController* OwningPlayerController;//[Offset: 0x9f8, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x9fc, Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0xa00, Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0xa10, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0xa40, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xa70, Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0xa74, Size: 4]
	byte SlotNameConfig;//[Offset: 0xa78, Size: 1]
	byte ForceGender;//[Offset: 0xa79, Size: 1]

--------------------------------
Class: ItemRecordData
	int ItemId;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int BPID;//[Offset: 0x10, Size: 4]
	int WeightforOrder;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int[] Attach;//[Offset: 0x20, Size: 12]
	int BulletID;//[Offset: 0x2c, Size: 4]
	int ProposeBulletNum;//[Offset: 0x30, Size: 4]
	int Durability;//[Offset: 0x34, Size: 4]
	int ItemSoundID;//[Offset: 0x38, Size: 4]
	int ItemQuality;//[Offset: 0x3c, Size: 4]
	int ItemPickupRule;//[Offset: 0x40, Size: 4]
	int AIFullVaule;//[Offset: 0x44, Size: 4]
	float Weight;//[Offset: 0x48, Size: 4]
	int MaxCount;//[Offset: 0x4c, Size: 4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	FString ItemName;//[Offset: 0x54, Size: 12]
	FString ItemBigIcon;//[Offset: 0x60, Size: 12]
	FString ItemDesc;//[Offset: 0x6c, Size: 12]
	FString ItemSmallIcon;//[Offset: 0x78, Size: 12]
	FString KillWhiteIcon;//[Offset: 0x84, Size: 12]
	FString ItemWhiteIcon;//[Offset: 0x90, Size: 12]
	FString RedEmotionSoundPath;//[Offset: 0x9c, Size: 12]
	FString PickupDesc;//[Offset: 0xa8, Size: 12]
	FString BackpackSimple;//[Offset: 0xb4, Size: 12]
	FString SpecialIcon;//[Offset: 0xc0, Size: 12]
	FString ItemBigIcon2;//[Offset: 0xcc, Size: 12]
	FString ItemSmallIcon2;//[Offset: 0xd8, Size: 12]
	int Electricity;//[Offset: 0xe4, Size: 4]

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb20, Size: 4]
	int GetRepalceIDOnVehicle(int OriginID);// 0x2bbd2f4
	enum GetForceHideState(int InSlotID, Actor* CallFunc_GetOwner_ReturnValue, enum CallFunc_GetForceHideState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bbd2f4
	bool IsEnableItemDownload(int ItemId);// 0x2bbd2f4
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x2bbd2f4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x2bbd2f4
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x2bbd2f4
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bbd2f4
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bbd2f4
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x2bbd2f4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, int ___int_Variable3);// 0x2bbd2f4
	bool BPClientPostProcessViewDataMiddle();// 0x2bbd2f4
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x2bbd2f4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x2bbd2f4
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x2bbd2f4
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum ___byte_Variable, enum CallFunc_IntToType_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7, int ___int_Variable8, int ___int_Variable9, int ___int_Variable10, int ___int_Variable11, int ___int_Variable12, int ___int_Variable13, int ___int_Variable14, int ___int_Variable15, int ___int_Variable16, int ___int_Variable17, int ___int_Variable18, int K2Node_Select_Default);// 0x2bbd2f4
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x2bbd2f4
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bbd2f4
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x2bbd2f4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bbd2f4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x2bbd2f4
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x2bbd2f4
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bbd2f4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x2bbd2f4
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x2bbd2f4
	void ClearEventFromOnAvatarEquippedEvent();// 0x2bbd2f4
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason);// 0x2bbd2f4
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xb24, Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xb28, Size: 4]
	int[] HoodClothSubTypeMap;//[Offset: 0xb2c, Size: 12]
	enum PreEquipClothReason;//[Offset: 0xb38, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xb40, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xb68, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	int[] NeedModifyVehicleID;//[Offset: 0xb94, Size: 12]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x1c, Size: 60]
	<FString,BPTable*> BPTableMap_Mod;//[Offset: 0x58, Size: 60]
	<int,FString> BPTableNameMap;//[Offset: 0x94, Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0xd0, Size: 12]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x228, Size: 60]
	void InitTableData();// 0x20e1f14
	void InitialModTableItemMap();// 0x1f88e48
	void InitBPTableMap_Mod();// 0x2bbd2f4
	void InitBPTableMap();// 0x2bbd2f4
	void HandleTableModNameChanged(FString InModName);// 0x23e500c
	FString GetWrapperPath(FString BPTableName, int ID);// 0x23e4e84
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x23e4d7c
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x23e4b54
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby);// 0x23e49b8
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x23e48b0
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x23e475c
	FString GetBPTableName(int Type);// 0x23e4654
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x23e4474
	static UAELoadedClassManager* Get();// 0x23e444c
	BPTable* CreateAndAddBPTable_Mod(FString BPTableName);// 0x23e4388
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x23e42c4
	void ClearModTableItemMap();// 0x20a5ce8
	void ClearBPTable_Mod();// 0x23e42b0
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x23e420c
	void ClearAllData();// 0x23e41f8

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 60]
	<int,BPTableItem> BPTableItemMap_Mod;//[Offset: 0x64, Size: 60]
	FString GetWrapperPath(int ID);// 0x23e3b44
	class Object GetWrapperClass(int ID);// 0x23e3ac4
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x23e391c
	Object* GetObject(int ID, Object* Outer, bool IsLobby);// 0x23e380c
	Object* GetModObject(int ID, Object* Outer, bool IsLobby);// 0x23e36fc
	class Object GetModClass(int ID, bool IsLobby);// 0x23e3630
	class Object GetCustom1Class(int ID);// 0x23e35b0
	class Object GetClass(int ID, bool IsLobby);// 0x23e34e4
	void ConvertPath(int ID);// 0x23e346c

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	FString Path;//[Offset: 0x10, Size: 12]
	FString LobbyPath;//[Offset: 0x1c, Size: 12]
	FString WrapperPath;//[Offset: 0x28, Size: 12]
	FString Custom1;//[Offset: 0x34, Size: 12]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0xb4, Size: 12]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xc0, Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xcc, Size: 60]
	<int,enum> TClipTypeMap;//[Offset: 0x108, Size: 60]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x144, Size: 60]
	<int,ItemRecordData> mapItemRecord_Mod;//[Offset: 0x180, Size: 60]
	<FString,ItemBeOverrideRecordData> BeOverrideMapItemMap;//[Offset: 0x1bc, Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0x1f8, Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0x234, Size: 60]
	<int,int> CustomPickupItemIDMap;//[Offset: 0x270, Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x2ac, Size: 376]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x424, Size: 364]
	PickupProposeData proposeData;//[Offset: 0x590, Size: 340]
	int[] NeedToShowTypeList;//[Offset: 0x6e4, Size: 12]
	int[] ConsumeableMissionItemID;//[Offset: 0x6f0, Size: 12]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x6fc, Size: 12]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x708, Size: 60]
	<FName,TagItemList> ItemTag;//[Offset: 0x744, Size: 60]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x780, Size: 60]
	enum CurrentGameModeType;//[Offset: 0x7c8, Size: 1]
	FString ItemTableName;//[Offset: 0x7cc, Size: 12]
	FString ItemTagTableName;//[Offset: 0x7d8, Size: 12]
	FString AttachTableName;//[Offset: 0x7e4, Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x7f0, Size: 12]
	FString OccupationTableName;//[Offset: 0x7fc, Size: 12]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x808, Size: 12]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x814, Size: 60]
	ActivityItemData ActivityData;//[Offset: 0x850, Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0x880, Size: 60]
	SpecialItemData SpecialData;//[Offset: 0x8bc, Size: 1]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x8c0, Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x8fc, Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x938, Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x974, Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x9b0, Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x9ec, Size: 60]
	<int,int> skillpropsTypeUseful;//[Offset: 0xa28, Size: 60]
	<int,bool> itemPathExist;//[Offset: 0xa64, Size: 60]
	int[] ItemToDownload;//[Offset: 0xaa0, Size: 12]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xaac, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0xab4, Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0xaf4, Size: 12]
	int CharacterVirtualItem_Type;//[Offset: 0xb00, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xb04, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xb08, Size: 60]
	<int> NoUseVirtualItemIDs;//[Offset: 0xb44, Size: 60]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	void ResetItemToDownload();// 0x1f88fb0
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x1f88f20
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x1f88e64
	void OnGameModeTypeChanged();// 0x1f88e48
	void ItemTableAdditiveOverride(FString OverrideItemTableName, bool bOverride);// 0x1f88d40
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x1f88c84
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x1f88b28
	bool IsParachuteItemType(int ItemId);// 0x1f5fa54
	bool IsInPveMode();// 0x2bbd2f4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x1f88a5c
	bool IsGrenadeCanAutoSwitch(int ItemId);// 0x1f3a480
	bool IsGlideItemType(int ItemId);// 0x1f889d4
	bool IsGhillieSuitItemType(int ItemId);// 0x1f8894c
	bool IsEquipmentItem(int ItemId);// 0x1f5c8e4
	bool IsConsumableMissionItemType(int ItemId);// 0x1f888c4
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x1f88800
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x1f88678
	bool Is3BackpackID(int ID);// 0x2bbd2f4
	void Initialize();// 0x1f88664
	void InitialItemTable();// 0x1f6023c
	bool HasTagSub(int ItemId, out const FName TagName);// 0x1f8858c
	bool HasTag(int ItemId, out const FName TagName);// 0x1f884b4
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x2bbd2f4
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x1f88360
	FString GetRawBattleTextByRawTextID(int ID);// 0x1f88250
	int GetPendantIDByWeaponID(int WeaponId);// 0x1f881c8
	int GetItemSubTypeID(int SpecificID);// 0x2bbd2f4
	ItemRecordData GetItemRecord(int ItemId);// 0x1f8811c
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x2bbd2f4
	int GetGrenadePriorityByType(int InGrenadeType);// 0x1f69f78
	int GetEquipmentLevel(int ItemId);// 0x1f88094
	int GetEquipmentBagLevel(int ItemId);// 0x1f6a960
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x1f87e88
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x1f87dd4
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x1f87d4c
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x1f87c24
	int GetBPIDByResID(int resID);// 0x1f87b9c
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x1f87a14
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x1f878f4
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x1f8772c
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x1f8768c
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x1f875d0
	int[] GetAttachOfWeapon(int WeaponId);// 0x1f874c8
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x1f8739c
	TagItemList FindItemTag(out const FName TagName);// 0x1f872c4
	ItemRecordData FindItemRecord(int ItemId);// 0x1f87218
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x1f87134
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x1f87058
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1f86f28
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x1f86e74
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x1f86da8
	void ClearItemRecord();// 0x1f86d94
	bool CheckItem(int ItemTableID);// 0x1f5c3bc
	bool CheckHasItemRecord(int ItemId);// 0x1f86d14
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x1f86c8c
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x1f86bc8

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ItemBeOverrideRecordData
	<int,ItemRecordData> BeOverrideMapItemRecord;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 4]
	int LimitMedical;//[Offset: 0x4, Size: 4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 4]
	int LimitAnodyne;//[Offset: 0xc, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 4]
	int LimitShouliudan;//[Offset: 0x18, Size: 4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 4]
	int LimitViscidityBomb;//[Offset: 0x28, Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x2c, Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x30, Size: 4]
	int LimitAntidote;//[Offset: 0x34, Size: 4]
	int LimitBatteryChip;//[Offset: 0x38, Size: 4]
	int LimitGameCoin;//[Offset: 0x3c, Size: 4]
	int LimitBullet9mm;//[Offset: 0x40, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x44, Size: 4]
	int Limit12koujing;//[Offset: 0x48, Size: 4]
	int Limit45koujing;//[Offset: 0x4c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x50, Size: 4]
	int Limitbolt;//[Offset: 0x54, Size: 4]
	int LimitBullet5;//[Offset: 0x58, Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	int LimitSniper2X;//[Offset: 0x60, Size: 4]
	int LimitSniper3X;//[Offset: 0x64, Size: 4]
	int LimitSniper4X;//[Offset: 0x68, Size: 4]
	int LimitSniper6X;//[Offset: 0x6c, Size: 4]
	int LimitSniper8X;//[Offset: 0x70, Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int LimitSkillProps;//[Offset: 0x78, Size: 4]
	int LimitSnowMan;//[Offset: 0x7c, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int AutoPickClipType;//[Offset: 0x84, Size: 4]
	<int,int> LimitDrugMap;//[Offset: 0x88, Size: 60]
	<int,int> LimitThrowObjMap;//[Offset: 0xc4, Size: 60]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0x100, Size: 60]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x13c, Size: 60]

--------------------------------
Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x4, Size: 60]
	<int,int> LimitDrugMap_XT;//[Offset: 0x40, Size: 60]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0x7c, Size: 60]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xb8, Size: 60]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0xf4, Size: 60]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x130, Size: 60]

--------------------------------
Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 12]
	int closeSubType;//[Offset: 0xc, Size: 4]
	int crossbowSubType;//[Offset: 0x10, Size: 4]
	int panID;//[Offset: 0x14, Size: 4]
	int pistolSubType;//[Offset: 0x18, Size: 4]
	int gunType;//[Offset: 0x1c, Size: 4]
	int specialType;//[Offset: 0x20, Size: 4]
	int specialType2;//[Offset: 0x24, Size: 4]
	int lens2ID;//[Offset: 0x28, Size: 4]
	int lens3ID;//[Offset: 0x2c, Size: 4]
	int lens4ID;//[Offset: 0x30, Size: 4]
	int lens6ID;//[Offset: 0x34, Size: 4]
	int lens8ID;//[Offset: 0x38, Size: 4]
	int ID2Type;//[Offset: 0x3c, Size: 4]
	int pistolClipSubType;//[Offset: 0x40, Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44, Size: 4]
	int SniperClipSubType;//[Offset: 0x48, Size: 4]
	int RifleClipSubType;//[Offset: 0x4c, Size: 4]
	int gasSubID;//[Offset: 0x50, Size: 4]
	int backSubType;//[Offset: 0x54, Size: 4]
	int back3ID;//[Offset: 0x58, Size: 4]
	int BandageID;//[Offset: 0x5c, Size: 4]
	int QuickBandageID;//[Offset: 0x60, Size: 4]
	int EnergyDrinksID;//[Offset: 0x64, Size: 4]
	int AdrenalineID;//[Offset: 0x68, Size: 4]
	int AnodyneID;//[Offset: 0x6c, Size: 4]
	int Medical1ID;//[Offset: 0x70, Size: 4]
	int QuickMedical1ID;//[Offset: 0x74, Size: 4]
	int Medical2ID;//[Offset: 0x78, Size: 4]
	int AntidoteID;//[Offset: 0x7c, Size: 4]
	int BatteryChipID;//[Offset: 0x80, Size: 4]
	int GameCoinID;//[Offset: 0x84, Size: 4]
	int ZhenBaoDan;//[Offset: 0x88, Size: 4]
	int YanWuDan;//[Offset: 0x8c, Size: 4]
	int RanShaoPing;//[Offset: 0x90, Size: 4]
	int ShouLei;//[Offset: 0x94, Size: 4]
	int FlarePistolID;//[Offset: 0x98, Size: 4]
	int[] SideMirrorList;//[Offset: 0x9c, Size: 12]
	int[] MirrorList;//[Offset: 0xa8, Size: 12]
	int ViscidityBomb;//[Offset: 0xb4, Size: 4]
	int GrenadeZombie;//[Offset: 0xb8, Size: 4]
	int GrenadeYedan;//[Offset: 0xbc, Size: 4]
	int DefaultMedicineNum;//[Offset: 0xc0, Size: 4]
	int helmetSubType;//[Offset: 0xc4, Size: 4]
	int armorSubType;//[Offset: 0xc8, Size: 4]
	int ScoreItemSubType;//[Offset: 0xcc, Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xd0, Size: 4]
	int IceDrinkItemSubType;//[Offset: 0xd4, Size: 4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xd8, Size: 4]
	int[] carryOnPlane;//[Offset: 0xdc, Size: 12]
	int CapacityThreshold;//[Offset: 0xe8, Size: 4]
	int GlideSubType;//[Offset: 0xec, Size: 4]
	int ParachuteItemSubType;//[Offset: 0xf0, Size: 4]
	int revivalCardID;//[Offset: 0xf4, Size: 4]
	int SnowManID;//[Offset: 0xf8, Size: 4]
	float revivalCardValidTime;//[Offset: 0xfc, Size: 4]
	int[] firewoodPriority;//[Offset: 0x100, Size: 12]
	int[] meatPriority;//[Offset: 0x10c, Size: 12]
	int[] UAVList;//[Offset: 0x118, Size: 12]
	int[] ElectricityList;//[Offset: 0x124, Size: 12]
	int[] ToUseInBackpackSubList;//[Offset: 0x130, Size: 12]
	int[] ToUseInBackpackIDList;//[Offset: 0x13c, Size: 12]
	int[] notExtractItemIDList;//[Offset: 0x148, Size: 12]

--------------------------------
Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TagItemList
	int[] tagList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ItemTagList
	<FName,int> TagValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ActivityItemData
	ItemDefineID PumpkinLanternItem;//[Offset: 0x0, Size: 24]
	ItemDefineID PumpkinEnergyItem;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ActivityConfigData
	<int,int> Lv2EnergyCount;//[Offset: 0x0, Size: 60]

--------------------------------
Class: SpecialItemData

--------------------------------
Class: EquipmentBrief
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemSubType;//[Offset: 0x4, Size: 4]
	int BPID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 48]
	int NetGUIDOffsetValue;//[Offset: 0x30, Size: 4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 12]
	FString WhiteIconPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb88, Size: 4]
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out ItemDefineID DefineID, out JudgePickupUsefulItem JudgePickUseful, int CallFunc_GetItemCountByDefineID_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x2bbd2f4
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue);// 0x2bbd2f4
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x2bbd2f4
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x2bbd2f4
	bool IsConsumableMissionItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x2bbd2f4
	int GetGrenadePriorityByType(int InGrenadeType, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	bool IsEquipmentItem(int ItemId, bool CallFunc_Map_Contains_ReturnValue);// 0x2bbd2f4
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	bool IsGlideItemType(int ItemId, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	bool IsGhillieSuitItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x2bbd2f4
	int GetEquipmentBagLevel(int ItemId, int ResultBagLevel, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bbd2f4
	int GetEquipmentLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x2bbd2f4
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x2bbd2f4
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bbd2f4
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bbd2f4
	void ModifySetting();// 0x2bbd2f4
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x2bbd2f4
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FName CallFunc_Array_Get_Item, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bbd2f4
	int GetBPIDByResID(int resID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x2bbd2f4
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x2bbd2f4
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x2bbd2f4
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	int GetItemSubTypeID(int SpecificID, ItemRecordData CallFunc_GetItemRecord_ReturnValue);// 0x2bbd2f4
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x2bbd2f4
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x2bbd2f4
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface class CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2);// 0x2bbd2f4
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x2bbd2f4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x2bbd2f4
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle);// 0x2bbd2f4
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x2bbd2f4
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x2bbd2f4
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x2bbd2f4
	void GetItemTableRowByItemTableID(int ID, out ItemRecordData ItemTableRow, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x2bbd2f4
	void InitialItemTable();// 0x2bbd2f4
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x2bbd2f4
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xb8c, Size: 12]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xb98, Size: 60]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xbd4, Size: 12]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xbe0, Size: 60]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xc1c, Size: 60]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xc58, Size: 60]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xc94, Size: 60]
	int[] GhillieSuitItem;//[Offset: 0xcd0, Size: 12]
	<int,int> GrenadeTypeToPriority;//[Offset: 0xcdc, Size: 60]
	<int,int> CacheItemId2BagLevelMap;//[Offset: 0xd18, Size: 60]

--------------------------------
Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 4]
	int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Offset: 0x10, Size: 4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x1c, Size: 12]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x28, Size: 12]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x34, Size: 4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x38, Size: 12]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x44, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 12]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0xc, Size: 4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x10, Size: 12]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x1c, Size: 12]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x28, Size: 12]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 12]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0xc, Size: 12]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x18, Size: 4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x1c, Size: 12]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x28, Size: 12]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x34, Size: 12]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x40, Size: 12]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x4c, Size: 12]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x58, Size: 12]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 12]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x2bbd2f4

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x4, Size: 12]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x10, Size: 12]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0xac, Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xb0, Size: 328]
	WeaponMeshCfg[] ExtMeshPackageList;//[Offset: 0x1f8, Size: 12]
	class AnimInstance* animBP;//[Offset: 0x204, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x208, Size: 40]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x230, Size: 60]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x26c, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x278, Size: 24]
	ItemDefineID[] ParentIDList;//[Offset: 0x290, Size: 12]
	enum OverrideSocket;//[Offset: 0x29c, Size: 1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x2a0, Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2ac, Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2b0, Size: 72]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x2f8, Size: 12]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x304, Size: 4]
	ParticleSystem* LightEffect;//[Offset: 0x308, Size: 40]
	ParticleSystem* ShootLightEffect;//[Offset: 0x330, Size: 40]
	<byte,AkAudioEvent*> HitSoundMap;//[Offset: 0x358, Size: 60]
	AkAudioEvent* SlashSound;//[Offset: 0x398, Size: 40]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	<int,Transform> PendantSocketRelativeTransform;//[Offset: 0x3c4, Size: 60]
	int CachedWeaponDurability;//[Offset: 0x400, Size: 4]
	int CacheBulletNumSaveToWrapper;//[Offset: 0x404, Size: 4]
	void UpdateWeaponDataFromWeapon();// 0x1f90004
	void UpdateWeaponDataFromPickUp();// 0x1f60c6c
	void SetMesh(FString skMesh, FString SkMeshLoad, FString stMesh, FString StMeshLoad, FString Material);// 0x1f8fd30
	void SetAnimationBp(FString AnimBpPath);// 0x1f8fc74
	void ReturnAllBullets();// 0x2bbd2f4
	void PreLocalHandleDisuse();// 0x1f8fc60
	BattleItemAdditionalData MakeWeaponDurabilityData(int Durability);// 0x1f8fb28
	BattleItemAdditionalData MakeBulletNumAdditionalData(int BulletNum);// 0x1f8f9f0
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter, ItemDefineID InDefineID);// 0x1f8f8d0
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x1f8f318
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse, enum InReason);// 0x1f8ef60
	void LocalAutoEquipAttachments();// 0x2bbd2f4
	bool IsVirtualAvatarHandle();// 0x1f8ef30
	bool IsAvatarWeapon();// 0x1f8ef08
	void InitWeaponDurability(int WeaponDurability);// 0x1f8ee90
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x1f8edbc
	int GetWeaponDurability();// 0x1f8ed94
	int GetSubSlotID();// 0x1f8ed64
	int GetSlotID();// 0x1f8ed34
	void GetParentDefineIDList(out ItemDefineID[] ParentList);// 0x1f8ec0c
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x1f8eba0
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x1f8e9d8
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x1f8e904
	void GetDefaultAttachment(out int[] AttachmentArray, bool IsLobby);// 0x1f8e7e0
	int GetCacheBulletNumSaveToWrapper(STExtraWeapon* Weapon, bool Initial);// 0x1f75ae4
	class Object GetAnimationBP();// 0x1f8e7b0
	bool BPModifyAutoUse(bool bInAutoUse, STExtraBaseCharacter* OwnerPawn);// 0x1f8e6d8

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum socket;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BP_STRUCT_LobbyBattleSlotMapping_type
	int battleSlot_0_36547D805DCA083A7265FAAF0A977AC4;//[Offset: 0x0, Size: 4]
	int subType_1_755CD1002ECEDD52681F31B90D869BA5;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_LobbyWeaponManager_C.LobbyWeaponManagerComponent.ActorComponent.Object
	void SetWeaponVisibility(bool bHide, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bbd2f4
	void SetWeaponPendantSocketType(STExtraWeapon* Target, enum SocketType, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void OnWeaponEquipDone();// 0x2bbd2f4
	void CreateWeapon(int inInt, out STExtraWeapon* Weapon, out BattleItemHandleBase* Handle, class BattleItemHandleBase tmpBattleHandle, Actor* CallFunc_GetOwner_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, class Object CallFunc_GetLobbyWeaponClass_ReturnValue, class BackpackWeaponHandle K2Node_ClassDynamicCast_AsBackpack_Weapon_Handle, bool K2Node_ClassDynamicCast_bSuccess, class STExtraWeapon K2Node_ClassDynamicCast_AsSTExtra_Weapon, bool K2Node_ClassDynamicCast_bSuccess2, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess3, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, STExtraWeapon* CallFunc_FinishSpawningActor_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue2, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess4);// 0x2bbd2f4
	class Object GetLobbyWeaponClass(int InWeaponAvatarID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWeaponAvatarParentID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyWeaponClassTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue);// 0x2bbd2f4
	STExtraWeapon* CreateWeaponAndChangeSkin(int WeaponSkinID, bool bSync, class BattleItemHandleBase BattleHandle, Actor* CallFunc_GetOwner_ReturnValue, STExtraWeapon* CallFunc_CreateWeapon_weapon, BattleItemHandleBase* CallFunc_CreateWeapon_handle, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NeedLODOptimize_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2);// 0x2bbd2f4

--------------------------------
Class: LobbyWeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xc8, Size: 60]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x104, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x140, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x180, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x188, Size: 8]
	<int,int> SpecialBagLevelMap;//[Offset: 0x190, Size: 60]
	FName CurUseWeaponSocket;//[Offset: 0x1d0, Size: 8]
	FName LastUseSocket;//[Offset: 0x1d8, Size: 8]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x1f4, Size: 60]
	STExtraWeapon* LastEquipWeapon;//[Offset: 0x2a8, Size: 4]
	void UseWeaponBySocketID(FName SocketID);// 0x209f320
	void UnUseWeapon();// 0x209f30c
	void UnEquipWeaponBySocketID(FName SocketID);// 0x209f294
	void SwapMainWeapon();// 0x209f280
	void OnWeaponAllAssetsLoadedDone();// 0x209f26c
	void OnPawnEquipmentsChanged(enum SlotType, bool IsEquipped, int ItemId);// 0x209f160
	void OnDestroy();// 0x209f14c
	STExtraWeapon* GetWeaponBySocketID(FName SocketID);// 0x209f0cc
	FName GetWeaponAttachSocketFromSocketID(out const FName SocketID, STExtraWeapon* BackupWeapon);// 0x209efe8
	SceneComponent* GetWeaponAttachComp();// 0x209efc0
	STExtraWeapon* GetUsingWeapon();// 0x209ef98
	int GetLogicSocketSideType(FName SocketID);// 0x209ef18
	int GetBagLevel();// 0x209eef0
	STExtraWeapon* EquipWeaponBySocketID(int WeaponSkinID, FName SocketID, bool bUse, bool bForceAsync);// 0x209ed88
	void DoWeapnAttachToBack(FName SocketID);// 0x209ed10
	void DoUseWeaponBySocketID(FName SocketID);// 0x209ec98
	void DoUnUseWeapon();// 0x209ec84
	STExtraWeapon* CreateWeaponAndChangeSkin(int WeaponSkinID, bool bSync);// 0x2bbd2f4
	void AsyncEquipWeapon(bool bUse, FName SocketID, uint32 Index);// 0x209eb78

--------------------------------
Class: LobbyPlayEmoteComponent_BP_C.LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 4]
	void OnEquipmentChange(bool CallFunc_OnStopEmote_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x2bbd2f4
	void OnStartLevelSequence(bool CallFunc_OnCameraStart_ReturnValue);// 0x2bbd2f4
	void GetLobbyCamera(out CameraActor* CameraActor, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, CameraActor*[] CallFunc_GetAllActorsOfClass_OutActors, GameInstance* CallFunc_GetGameInstance_ReturnValue, CameraActor* CallFunc_Array_Get_Item, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x2bbd2f4
	void OnStopLevelSequence(bool CallFunc_OnCameraStop_ReturnValue, CameraActor* CallFunc_GetLobbyCamera_cameraActor, FString ___string_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bbd2f4
	void ChangetoLevelSequenceCamera(FString ___string_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, Actor* CallFunc_Array_Get_Item);// 0x2bbd2f4
	void OnTrackEvent(FString EventData, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_OnCameraTrackEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LevelSequenceCameraMask_C* CallFunc_Create_ReturnValue);// 0x2bbd2f4
	void PlayCameraEmoteAnim(LevelSequence* CurrentCameraEmoteAnim);// 0x2bbd2f4
	void StopCameraEmoteAnim();// 0x2bbd2f4
	void ShowAvatarForEmote(bool Show, bool force);// 0x2bbd2f4
	void ExecuteUbergraph_LobbyPlayEmoteComponent_BP(int EntryPoint, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, LevelSequence* K2Node_Event_CurrentCameraEmoteAnim, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, bool K2Node_Event_show, bool K2Node_Event_force, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue4, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, STExtraWeapon* K2Node_DynamicCast_AsSTExtra_Weapon, bool K2Node_DynamicCast_bSuccess2);// 0x2bbd2f4
	LevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x324, Size: 4]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x328, Size: 4]
	BP_LevelSequenceCameraMask_C* levelSequenceMask;//[Offset: 0x32c, Size: 4]
	<int> stopEmoteArray;//[Offset: 0x330, Size: 60]

--------------------------------
Class: LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
	BackpackEmoteHandle* curHandle;//[Offset: 0x270, Size: 4]
	STExtraLobbyCharacter* OwnerCharacter;//[Offset: 0x274, Size: 4]
	GenderMapping[] GenderMappingConfig;//[Offset: 0x278, Size: 12]
	Character* MainCharacter;//[Offset: 0x284, Size: 4]
	LevelSequencePlayer* CurLevelSequencePlayer;//[Offset: 0x294, Size: 4]
	SoftObjectPath[] CurMultiEmotePathList;//[Offset: 0x298, Size: 12]
	AnimationAsset*[] CurMultiEmoteAnimList;//[Offset: 0x2a4, Size: 12]
	AnimMontage* CurEmoteMontage;//[Offset: 0x2b0, Size: 4]
	int CurrentEmoteID;//[Offset: 0x2b4, Size: 4]
	int DefaultHideAvatarTickCount;//[Offset: 0x2b8, Size: 4]
	bool isPlayCameraAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	delegate OnEmoteCameraStart;//[Offset: 0x2e0, Size: 16]
	delegate OnEmoteCameraStop;//[Offset: 0x2f0, Size: 16]
	delegate OnEmoteCameraTrackEvent;//[Offset: 0x300, Size: 16]
	void SyncMontageInner(AnimInstance* Leader, float DeltaTime);// 0x209d99c
	void SyncMontage(float DeltaTime);// 0x209d924
	void StopMontageParticle(AnimMontage* Montage);// 0x209d8ac
	void StopLastEmoteParticle();// 0x209d898
	void StopCameraEmoteAnim();// 0x2bbd2f4
	void ShowAvatarForEmote(bool Show, bool force);// 0x2bbd2f4
	void PlayEmoteSound();// 0x209d884
	void PlayCameraEmoteAnim(LevelSequence* CurrentCameraEmoteAnim);// 0x2bbd2f4
	bool OnStopEmote();// 0x209d85c
	void OnPlayEmoteActionEnd();// 0x209d848
	bool OnPlayEmote(int EmoteId, int LocalLobbyPos, FString ExtraInfo);// 0x209d658
	void OnOneActionReady(int Index);// 0x209d5e0
	void OnLobbyEmoteCameraTrackEvent__DelegateSignature(FString TrackData);// 0x2bbd2f4
	void OnLobbyEmoteCameraStop__DelegateSignature();// 0x2bbd2f4
	void OnLobbyEmoteCameraStart__DelegateSignature();// 0x2bbd2f4
	bool OnCameraTrackEvent(FString TrackData);// 0x209d480
	bool OnCameraStop();// 0x209d458
	bool OnCameraStart();// 0x209d430
	void OnAsyncLoadSingleAnim(AnimationAsset* CurrentEmoteAnim, int Index);// 0x209d26c
	void OnAsyncLoadMultiAnims(int Index);// 0x209d1f4
	void OnAsyncLoadEmoteAction(int Index);// 0x209d17c
	bool LoopEmoteAnimFinishedFirstSection();// 0x209d154
	bool IsLoopMontage(AnimMontage* Montage);// 0x209d0d4
	SoftObjectPath[] GetMultiAnimFollowerAssetRef();// 0x209cf7c
	EmoteAnimCharacterConfig[] GetMultiAnimFollower();// 0x209ce24
	EmoteAnimConfig GetMultiAnimConfig();// 0x209cdbc
	LevelSequence* GetMainCharacterCameraAnimAsset();// 0x209cd20
	EmoteAnimCharacterConfig GetMainCharacterAssetRef();// 0x209cc20
	AnimationAsset* GetMainCharacterAnimAsset();// 0x209cb84
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x209cb04
	AnimMontage* GetCurrentMontage();// 0x209cadc
	bool EmoteAnimFinishedSuccessfully();// 0x209cab4
	bool DoesEmoteStop();// 0x209ca8c
	void ClearMultiAnimCharacters();// 0x209ca78
	bool CanRotateMainCharacter();// 0x209ca50
	bool AsyncLoadSingleAnim(BackpackEmoteHandle* Handle);// 0x209c9d0
	bool AsyncLoadMultiAnims();// 0x209c9a8
	bool AsyncLoadEmoteAction(out FString ExtraInfo);// 0x209c8d4

--------------------------------
Class: GenderMapping
	FName GenderStr;//[Offset: 0x0, Size: 8]
	byte GenderType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x604, Size: 12]
	delegate OnTrackEvent;//[Offset: 0x610, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x648, Size: 12]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3a4ff9c

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPreStop;//[Offset: 0x304, Size: 12]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	delegate OnPause;//[Offset: 0x314, Size: 12]
	delegate OnFinished;//[Offset: 0x320, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x32c, Size: 12]
	byte Status;//[Offset: 0x338, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x33c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x340, Size: 4]
	float StartTime;//[Offset: 0x344, Size: 4]
	float EndTime;//[Offset: 0x348, Size: 4]
	int CurrentNumLoops;//[Offset: 0x34c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x35c, Size: 32]
	void Stop();// 0x369c2b0
	void StartPlayingNextTick();// 0x369c29c
	void SetPlayRate(float PlayRate);// 0x369c224
	void SetPlayLoopCount(int NumLoops);// 0x1f3e7ec
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x369c168
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x369c028
	void Scrub();// 0x369c154
	void PlayReverse();// 0x369c140
	void PlayLooping(int NumLoops);// 0x369c0c8
	void Play();// 0x369c0b4
	void Pause();// 0x369c0a0
	void JumpToPositionEx(float NewPlaybackPosition);// 0x369c028
	void JumpToPosition(float NewPlaybackPosition);// 0x369bfb0
	bool IsPlaying();// 0x369bf88
	bool IsPaused();// 0x369bf60
	void GoToEndAndStop();// 0x369bf4c
	float GetPlayRate();// 0x369bf24
	float GetPlaybackStart();// 0x216bef4
	float GetPlaybackPosition();// 0x369befc
	float GetPlaybackEnd();// 0x369bee0
	float GetLength();// 0x369beb8
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x369bd74
	void ChangePlaybackDirection();// 0x369bd60

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class * BindingOverrides;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2e4, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x304, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x308, Size: 24]
	LevelSequence* TempLevelSequence;//[Offset: 0x320, Size: 4]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x324, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x330, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x334, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int ReduceFrameCount;//[Offset: 0x33c, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x340, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x348, Size: 4]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x34c, Size: 4]
	void SetSequence(LevelSequence* InSequence);// 0x3a4ed84
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3a4ec2c
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3a4ea94
	void SetAllMovieSceneSectionsToKeepState();// 0x3a4ea80
	void ResetBindings();// 0x3a4ea40
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3a4e948
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x3a4e808
	void ReceiveInitailizePlayer();// 0x2bbd2f4
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x3a4e730
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3a4e5a8

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x1b8, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x1e8, Size: 4]
	void SetSettings(Object* InSettings);// 0x2bbd2f4
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x2626104

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_LevelSequenceCameraMask_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* FadeOut;//[Offset: 0x1b8, Size: 4]
	CanvasPanel* CanvasPanel;//[Offset: 0x1bc, Size: 4]
	Image* Image;//[Offset: 0x1c0, Size: 4]

--------------------------------
Class: LobbyWeaponAnimationComponent_C.ActorComponent.Object
	void SyncMontage(float Position, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue2, AnimMontage* CallFunc_GetCurrentActiveMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Montage_GetPosition_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void StopLobbyWeaponAnimation(bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void PlayOnAction(int ActionID, bool isMVPMotion, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyActionWeaponRef_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	void PlayLobbyWeaponAnimationByID(int WeaponAnimationID, bool isMVPMotion, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_LobbyWeaponAnimation_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class LobbyWeaponAnimationActor_C K2Node_ClassDynamicCast_AsLobby_Weapon_Animation_Actor, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyWeaponAnimationActor_C* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, LobbyWeaponAnimationActor_C* CallFunc_FinishSpawningActor_ReturnValue2);// 0x2bbd2f4
	void Destroy();// 0x2bbd2f4
	void SetLobbyPlayerObj(BP_PlayerLobbyPawn_C* LobbyPlayerObj);// 0x2bbd2f4
	BP_PlayerLobbyPawn_C* LobbyPlayer;//[Offset: 0xc8, Size: 4]
	LobbyWeaponAnimationActor_C* WeaponAnimationActor;//[Offset: 0xcc, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: BP_STRUCT_LobbyActionWeaponRef_type
	int ActionID_0_284E37801299E72232C748730798C614;//[Offset: 0x0, Size: 4]
	int WeaponActionID_1_2D2D7200775F04DA5CEAA9680C11A5C4;//[Offset: 0x4, Size: 4]
	int WeaponID_3_4C59DA80554AE47019513EF506BFC7B4;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BP_STRUCT_LobbyWeaponAnimation_type
	int UID_0_10B4DE80647FDFD62CA212CC08FE7DC4;//[Offset: 0x0, Size: 4]
	FString BlueprintPath_1_5BB4F6800155AFFA599CC691037A5148;//[Offset: 0x4, Size: 12]
	int DelayOutTime_2_1A47538047426C525839AEE100220975;//[Offset: 0x10, Size: 4]
	int TotalTime_3_45F4CAC00CF5269D7341686E029FD145;//[Offset: 0x14, Size: 4]

--------------------------------
Class: LobbyWeaponAnimationActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 4]
	void PlayLobbyAnimation(AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_Montage_Play_ReturnValue);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void OnAnimEnd(AnimMontage* Montage, bool bInterrupted);// 0x2bbd2f4
	void SetAnimTimeInfo(int DelayTime, int TotalTime);// 0x2bbd2f4
	void ExecuteUbergraph_LobbyWeaponAnimationActor(int EntryPoint, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, int K2Node_Event_DelayTime, int K2Node_Event_TotalTime, float CallFunc_Multiply_IntFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2);// 0x2bbd2f4
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x2e4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 4]
	AnimMontage* WeaponMontage;//[Offset: 0x2ec, Size: 4]
	int DelayTime;//[Offset: 0x2f0, Size: 4]
	int TotalTime;//[Offset: 0x2f4, Size: 4]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc8, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	void Stop();// 0x449db30
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x449da74
	void SetTimelineLengthMode(byte NewLengthMode);// 0x449d9fc
	void SetTimelineLength(float NewLength);// 0x449d984
	void SetPlayRate(float NewRate);// 0x449d90c
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x449d7f8
	void SetNewTime(float NewTime);// 0x449d780
	void SetLooping(bool bNewLooping);// 0x449d700
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x449d644
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x449d5c4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x449d508
	void ReverseFromEnd();// 0x449d4f4
	void Reverse();// 0x449d4e0
	void PlayFromStart();// 0x449d4cc
	void Play();// 0x449d4b8
	void OnRep_Timeline();// 0x449d4a4
	bool IsReversing();// 0x449d47c
	bool IsPlaying();// 0x449d454
	bool IsLooping();// 0x449d42c
	float GetTimelineLength();// 0x449d404
	float GetPlayRate();// 0x449d3dc
	float GetPlaybackPosition();// 0x2329170
	bool GetIgnoreTimeDilation();// 0x449d3b4

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MiniTv_Class_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 4]
	void DestoryPhoneMesh(AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue2);// 0x2bbd2f4
	void PlayPhoneAnim(Transform ___struct_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_Montage_Play_ReturnValue, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue2, float CallFunc_Montage_Play_ReturnValue2);// 0x2bbd2f4
	void TouchEnd(byte finger);// 0x2bbd2f4
	void TouchStart(byte finger);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentOnInputTouchBeginSignature__DelegateSigna(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_1_ComponentOnInputTouchEndSignature__DelegateSignatu(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void ExecuteUbergraph_MiniTv_Class(int EntryPoint, float K2Node_Event_DeltaSeconds, byte K2Node_ComponentBoundEvent_FingerIndex2, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent2, byte K2Node_ComponentBoundEvent_FingerIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent);// 0x2bbd2f4
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x374, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x378, Size: 4]
	SkeletalMeshComponent* PhoneMesh;//[Offset: 0x37c, Size: 4]

--------------------------------
Class: LobbyHallVehicleBP_C.LobbyModelShowActorBP_C.LuaActor.Actor.Object

--------------------------------
Class: LobbyModelShowActorBP_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 4]
	void DetachSuperCarAttachToAttachPoint(SceneComponent* CallFunc_GetAttachParent_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Lobby_Koenigsegg_Mesh_Bottom_C* K2Node_DynamicCast_AsLobby_Koenigsegg_Mesh_Bottom, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue);// 0x2bbd2f4
	void OnAsyncReadyLua();// 0x2bbd2f4
	void DestroyContentsInLua();// 0x2bbd2f4
	void GetLoadedClass(int ID, out class BattleItemHandleBase AsBattle Item Handle Base, out bool Success, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess);// 0x2bbd2f4
	void TryShowModel(int resID, int BPID, bool bIgnoreDownload);// 0x2bbd2f4
	void PreChangeWeaponAvatar(int resID, int BPID, class BattleItemHandleBase tmpClass, class BattleItemHandleBase CallFunc_GetLoadedClass_AsBattle_Item_Handle_Base, bool CallFunc_GetLoadedClass_Success, class BattleItemHandleBase CallFunc_GetLoadedClass_AsBattle_Item_Handle_Base2, bool CallFunc_GetLoadedClass_Success2, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, bool CallFunc_GetBaseItemHBClass_NewParam, class BattleItemHandleBase CallFunc_GetBaseItemHBClass_AsBattle_Item_Handle_Base, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void TriggerDownloadRes(int ItemId, int BPID, int itemType);// 0x2bbd2f4
	void CreaetAndSetWeaponDynamicMat(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, MeshComponent* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	void ShowBag(int commonActorResId, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyModelCommonActorBP_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void SetHolderBack(BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void SetCastShadow(bool CastShadow, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, ActorComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess2);// 0x2bbd2f4
	void MakeShowTypeCanRotateBack(bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void ProcessIcon3DAttachTexture(Backpack3DIconHandle* IconHandle, Object* tmpHandle, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Backpack3DIconHandle* K2Node_DynamicCast_AsBackpack_3DIcon_Handle, bool K2Node_DynamicCast_bSuccess, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D2, bool K2Node_DynamicCast_bSuccess3, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue2, bool CallFunc_IsValidSoftObjectReference_ReturnValue, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValidSoftObjectReference_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2bbd2f4
	void OnIcon3dAsyncReady();// 0x2bbd2f4
	void ShowIcon3D(int resID, bool isSync, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyModelCommonActorBP_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void ShowIcon3dAsycOrSync(int resID, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void DestroyAllContent(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x2bbd2f4
	void UpdateWeaponMatParam(float Alpha, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, int ___int_Loop_Counter_Variable2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int CallFunc_Add_IntInt_ReturnValue2, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int ___int_Array_Index_Variable2, float CallFunc_Lerp_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, MeshComponent* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	void GetRotateSpeed(float DeltaX, float DeltaY, out float Speed, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue);// 0x2bbd2f4
	void UpdateWeaponMat(float RotateSpeed, float Alpha, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_FClamp_ReturnValue, BP_STRUCT_WeaponMatParamCfg_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x2bbd2f4
	void OnParachuteAsyncReady();// 0x2bbd2f4
	void OnBagWidgetAsyncReady();// 0x2bbd2f4
	void OnWeaponAsyncReady(FString ___string_Variable, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	void OnPlaneAsyncReady();// 0x2bbd2f4
	void GetLobbyWeaponClass(int InWeaponAvatarID, out class Object ObjectClass, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWeaponAvatarParentID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyWeaponClassTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue);// 0x2bbd2f4
	void ProcessNextActor();// 0x2bbd2f4
	void OnDIYWeaponDecalFinish(int RequestID, TextureRenderTarget2D* RT);// 0x2bbd2f4
	void SetDIYDecalNumPerFrame(bool isSync, int Num);// 0x2bbd2f4
	void SetRotateBackZ(bool rotateZ);// 0x2bbd2f4
	void SetWeaponCollision(FString Asset, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, PhysicsAsset* K2Node_DynamicCast_AsPhysics_Asset, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlotID_ReturnValue, SkinnedMeshComponent* K2Node_DynamicCast_AsSkinned_Mesh_Component, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2);// 0x2bbd2f4
	void SetCanTouchRotate(bool canRotate);// 0x2bbd2f4
	void SetWeaponPendantSocketType(enum Type, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void GetSocketTransform(int ShowType, FString SocketName, out Transform Transform, bool K2Node_SwitchInteger_CmpSuccess, FName CallFunc_Conv_StringToName_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue);// 0x2bbd2f4
	void ShowBagWidgetAsycOrSync(int resID, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void ShowParachuteAsycOrSync(int resID, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void GetComponentPosition(int SlotID, out Vector Location, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x2bbd2f4
	void OnRefitVehicleAsyncReady(FString ___string_Variable, FString ___string_Variable2, FString ___string_Variable3, int CallFunc_Array_Find_ReturnValue, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue2, int CallFunc_Array_Find_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue3);// 0x2bbd2f4
	void UpdateCapsuleSize(float HalfHeight, float Radius);// 0x2bbd2f4
	void DestroyForType(int exceptType, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsValid_ReturnValue8, int[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void OnVehicleAsyncReady(FString ___string_Variable, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void OnGrenadeAsyncReady();// 0x2bbd2f4
	void ShowModel(int resID, int BPID, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void ShowParachute(int resID, bool isSync, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyModelCommonActorBP_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void ShowRefitVehicle(int VehicleID, RefitVehicleHandle* vehicleHandle, FString ___string_Variable, FString ___string_Variable2, FString CallFunc_Concat_StrStr_ReturnValue, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle, bool K2Node_DynamicCast_bSuccess, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle2, bool K2Node_DynamicCast_bSuccess2, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasRefitVehicleDownloaded_HasDownloaded, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle4, bool K2Node_DynamicCast_bSuccess4, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString ___string_Variable3, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitBPConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class RefitVehicleHandle K2Node_ClassDynamicCast_AsRefit_Vehicle_Handle, bool K2Node_ClassDynamicCast_bSuccess, RefitVehicleHandle* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle5, bool K2Node_DynamicCast_bSuccess5, BP_LobbyRefitVehicle_C* K2Node_DynamicCast_AsBP_Lobby_Refit_Vehicle6, bool K2Node_DynamicCast_bSuccess6, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue2, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, FString ___string_Variable4, int CallFunc_Array_Find_ReturnValue3, int CallFunc_Array_Find_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue4, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LobbyRefitVehicle_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_PreChangeVehicleAvatar_ReturnValue);// 0x2bbd2f4
	void SetShowActorLocationRotation(int resID, ShowActorData tempShowActorData, ShowActorData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, FString CallFunc_Conv_RotatorToString_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x2bbd2f4
	void OnAsyncReady(bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void ModelSimulatePhysics(bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x2bbd2f4
	void TryRotate(out float DeltaX, out float DeltaY, float RetDeltaY, float RetDeltaX, float tempLocationY, float tempLocationX, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, bool CallFunc_NeedRotateY_need, float CallFunc_MakeRotation_RotationX, float CallFunc_MakeRotation_RotationY, float CallFunc_MakeRotation_RotationZ, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_NeedRotate_need, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2bbd2f4
	void MakeRotation(float newLocationX, float newLocationY, out float RotationX, out float RotationY, out float RotationZ, FString ___string_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int CallFunc_Array_Find_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_ComposeRotators_ReturnValue2, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_FClamp_ReturnValue2, float CallFunc_FClamp_ReturnValue3);// 0x2bbd2f4
	void AttachModelCenter(int CameraID, Vector attachModelVector, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyCameraInfo_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, float CallFunc_Conv_StringToFloat_ReturnValue3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult4, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult5, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void GetShowTypeByItemType(int resID, int itemType, int ItemSubType, out int Type, FString ___string_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue8, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue10, bool CallFunc_EqualEqual_IntInt_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue13, bool CallFunc_EqualEqual_IntInt_ReturnValue14, bool CallFunc_EqualEqual_IntInt_ReturnValue15, bool CallFunc_EqualEqual_IntInt_ReturnValue16, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue17, bool CallFunc_BooleanOR_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue18, bool CallFunc_BooleanOR_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue5, int CallFunc_Array_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue9, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue19, bool CallFunc_EqualEqual_IntInt_ReturnValue20, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue21, bool CallFunc_EqualEqual_IntInt_ReturnValue22, bool CallFunc_EqualEqual_IntInt_ReturnValue23, bool CallFunc_EqualEqual_IntInt_ReturnValue24, bool CallFunc_EqualEqual_IntInt_ReturnValue25, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue26, bool CallFunc_BooleanOR_ReturnValue12, bool CallFunc_BooleanOR_ReturnValue13, bool CallFunc_EqualEqual_IntInt_ReturnValue27, bool CallFunc_BooleanOR_ReturnValue14, bool CallFunc_BooleanOR_ReturnValue15, bool CallFunc_EqualEqual_IntInt_ReturnValue28, bool CallFunc_BooleanAND_ReturnValue8, bool CallFunc_EqualEqual_IntInt_ReturnValue29);// 0x2bbd2f4
	void ShowVehicle(int VehicleID, BP_LobbyVehicle_C* tempVehicleActor, VehicleAvatarComponent* CallFunc_GetVehicleAvatar_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LobbyVehicle_C* CallFunc_FinishSpawningActor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, bool CallFunc_PreChangeVehicleAvatar_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void RecordTmpVar(int resID, float zSpeed, float backTime, float disinteractDis, float YdisRatio, float Yintensity, bool needXRotation, bool canAutoRotateZ, bool CanRotateBack, bool canRotate, FString ExtraData, FString[] CallFunc_ParseIntoArray_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5);// 0x2bbd2f4
	void ShowWeapon(int resID, int BPID, BattleItemHandleBase* tmpHandle, FString CallFunc_Concat_StrStr_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString ___string_Variable, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LobbyWeapon_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void ShowPlane(int resID, class BattleItemHandleBase BaseClass, int NewLocalVar, BP_PlaneCharacter_C* tmp_BP_Plane_Character, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlaneCharacter_C* K2Node_DynamicCast_AsBP_Plane_Character, bool K2Node_DynamicCast_bSuccess, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_GetBaseItemHBClass_NewParam, class BattleItemHandleBase CallFunc_GetBaseItemHBClass_AsBattle_Item_Handle_Base, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, class BattleItemHandleBase CallFunc_GetObjectClass_ReturnValue, class PlaneAvatarHandleBase_BP_C K2Node_ClassDynamicCast_AsPlane_Avatar_Handle_Base_BP, bool K2Node_ClassDynamicCast_bSuccess2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Character* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	Transform MakeSpawnTransform(float ActorScale, FString ModelOffset, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue3, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue2);// 0x2bbd2f4
	void ShowBagWidget(int resID, bool isSync, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetComponentByClass_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyModelCommonActorBP_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void ShowGrenade(int resID, BP_Lobby_Grenade_C* tempGrenadeActor, GrenadeAvatarComponent_BP_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_GetItemSubType_subType, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_IsValid_ReturnValue, GrenadeAvatarComponent_BP_C* CallFunc_GetComponentByClass_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Lobby_Grenade_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2bbd2f4
	void GetAttachPoint(out Actor* attachPoint, Actor*[] CallFunc_GetAllActorsWithInterface_OutActors, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void ResetAttachPointRotate(Rotator CallFunc_MakeRotator_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Actor* CallFunc_GetAttachPoint_attachPoint, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void DetachFromAttachPoint(SceneComponent* CallFunc_GetAttachParent_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Lobby_Koenigsegg_Mesh_Bottom_C* K2Node_DynamicCast_AsLobby_Koenigsegg_Mesh_Bottom, bool K2Node_DynamicCast_bSuccess, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0x2bbd2f4
	void AttachToAttachPoint(Actor*[] CallFunc_GetAllActorsWithInterface_OutActors, bool K2Node_SwitchInteger_CmpSuccess, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bbd2f4
	void OnParticleSystemFinish(ParticleSystemComponent* NewParam);// 0x2bbd2f4
	void XAutoRotate(Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue2, FString CallFunc_Conv_RotatorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2bbd2f4
	void TickProjectileEffect(HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult2, bool CallFunc_K2_SetActorLocation_ReturnValue2, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void PlayParticleEffect(Vector Location, delegate K2Node_CreateDelegate_OutputDelegate, GrenadeAvatarComponent_BP_C* CallFunc_GetComponentByClass_ReturnValue, FString ___string_Variable, Object* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x2bbd2f4
	void PlayProjectileEffect();// 0x2bbd2f4
	void IsModelValid(out bool Valid, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void GetBaseItemHBClass(out bool NewParam, out class BattleItemHandleBase AsBattle Item Handle Base, int TmpItemID, FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_VehiclePlaneSkinMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue3, BP_STRUCT_VehiclePlaneSkinMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess);// 0x2bbd2f4
	void StopAkEvent(BP_PlaneCharacter_C* K2Node_DynamicCast_AsBP_Plane_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void UpdateRotateLimit(FString XRotateLimit, FString YRotateLimit, bool CallFunc_NotEqual_StrStr_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4);// 0x2bbd2f4
	void UpdateShowType(int resID, int itemType, int ItemSubType);// 0x2bbd2f4
	void SetTouchStatus(bool Can);// 0x2bbd2f4
	void SetRotateBackStatus(bool Can);// 0x2bbd2f4
	void NeedRotateY(float X, float Y, out bool need, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void NeedRotate(float X, float Y, out bool need, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void RotateBack(float Delta, float localAlpha, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Percent_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult2, Rotator CallFunc_MakeRotator_ReturnValue3, Rotator CallFunc_MakeRotator_ReturnValue4, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult3, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult4);// 0x2bbd2f4
	void ZAutoRotate(bool CallFunc_Not_PreBool_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2bbd2f4
	void DestroyWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void GetItemSubType(int RowNum, out int SubType, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	void GetBPID(int RowName, out int BPID, out int itemType, out int ItemSubType, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	void PutOffEquipmentByResID(int resID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_PutOffEquimentByResID_ReturnValue);// 0x2bbd2f4
	void PutOnEquipmentByResID(int resID, out bool Ret, int CallFunc_GetBPID_BPID, int CallFunc_GetBPID_itemType, int CallFunc_GetBPID_itemSubType, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, class Object CallFunc_GetClass_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue2, class BackpackWeaponHandle K2Node_ClassDynamicCast_AsBackpack_Weapon_Handle, bool K2Node_ClassDynamicCast_bSuccess, class BackpackWeaponAttachHandle K2Node_ClassDynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_ClassDynamicCast_bSuccess2, BackpackWeaponHandle* CallFunc_SpawnObject_ReturnValue, BackpackWeaponAttachHandle* CallFunc_SpawnObject_ReturnValue2, bool CallFunc_PutOnEquipmentByItemHandle_ReturnValue, bool CallFunc_PutOnMasterComponentByItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void ShowModelByResid(int resID, float XOffset, Rotator Rotator, float zSpeed, float backTime, float disinteractDis, float YdisRatio, float Yintensity, bool needResetAutoRotation, bool needXRotation, float ActorScale, FString XRotateLimit, FString YRotateLimit, FString ModelOffset, bool canAutoRotate, bool CanRotateBack, bool canRotate, Rotator InitRotate, FString ExtraData, int tempBPID, FString ___string_Variable, ShowActorData K2Node_MakeStruct_ShowActorData, Transform CallFunc_MakeSpawnTransform_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_GetBPID_BPID, int CallFunc_GetBPID_itemType, int CallFunc_GetBPID_itemSubType);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void WeaponMatTimeline__FinishedFunc();// 0x2bbd2f4
	void WeaponMatTimeline__UpdateFunc();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentOnInputTouchBeginSignature__DelegateSignature(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentOnInputTouchEndSignature__DelegateSignature(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void ReceiveDestroyed();// 0x2bbd2f4
	void Projectile(float X, float Y, float Z);// 0x2bbd2f4
	void TickWeaponMat(float fromShake, float toShake);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_LobbyModelShowActorBP(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, byte K2Node_ComponentBoundEvent_FingerIndex2, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent2, byte K2Node_ComponentBoundEvent_FingerIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float K2Node_CustomEvent_x, float K2Node_CustomEvent_y, float K2Node_CustomEvent_z, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Actor*[] ___object_Variable, HitResult CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit, Vector[] CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions, Vector CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination, bool CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue, bool CallFunc_IsModelValid_valid, float CallFunc_TryRotate_deltaX, float CallFunc_TryRotate_deltaY, float CallFunc_GetRotateSpeed_speed, float K2Node_CustomEvent_fromShake, float K2Node_CustomEvent_toShake, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	StaticMeshComponent* Sphere;//[Offset: 0x374, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x378, Size: 4]
	SceneComponent* Scene;//[Offset: 0x37c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x380, Size: 4]
	float WeaponMatTimeline_time_492B8511488AA34B66EFCEB09ACAE5EE;//[Offset: 0x384, Size: 4]
	byte WeaponMatTimeline__Direction_492B8511488AA34B66EFCEB09ACAE5EE;//[Offset: 0x388, Size: 1]
	TimelineComponent* WeaponMatTimeline;//[Offset: 0x38c, Size: 4]
	STExtraWeapon* WeaponActor;//[Offset: 0x390, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x394, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	byte FingerIndex;//[Offset: 0x399, Size: 1]
	float LocationX;//[Offset: 0x39c, Size: 4]
	bool canAutoRotateZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	float zRotateSpeed;//[Offset: 0x3a4, Size: 4]
	float LocationY;//[Offset: 0x3a8, Size: 4]
	bool canAutoRotateX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	float backTime;//[Offset: 0x3b0, Size: 4]
	float curBackTime;//[Offset: 0x3b4, Size: 4]
	float disinteractDis;//[Offset: 0x3b8, Size: 4]
	float Yintensity;//[Offset: 0x3bc, Size: 4]
	float yDisinteractRatio;//[Offset: 0x3c0, Size: 4]
	float originX;//[Offset: 0x3c4, Size: 4]
	float originY;//[Offset: 0x3c8, Size: 4]
	bool alreadyRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool alreadyRotateY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool CanRotateBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	int ShowType;//[Offset: 0x3d0, Size: 4]
	bool needXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	Character* PlaneCharacter;//[Offset: 0x3d8, Size: 4]
	float XRotateMin;//[Offset: 0x3dc, Size: 4]
	float XRotateMax;//[Offset: 0x3e0, Size: 4]
	float YRotateMin;//[Offset: 0x3e4, Size: 4]
	float YRotateMax;//[Offset: 0x3e8, Size: 4]
	int CurrentItemID;//[Offset: 0x3ec, Size: 4]
	BP_Lobby_Grenade_C* grenadeActor;//[Offset: 0x3f0, Size: 4]
	bool isTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	Vector[] projectilePredictArray;//[Offset: 0x3f8, Size: 12]
	int projectileTickIndex;//[Offset: 0x404, Size: 4]
	float xRotateSpeed;//[Offset: 0x408, Size: 4]
	Rotator AttachPointDefaultRotate;//[Offset: 0x40c, Size: 12]
	LobbyModelCommonActorBP_C* bagWidgetActor;//[Offset: 0x418, Size: 4]
	Transform SpawnTransform;//[Offset: 0x420, Size: 48]
	BP_LobbyVehicle_C* VehicleActor;//[Offset: 0x450, Size: 4]
	bool canRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	int curGrenadeIndex;//[Offset: 0x458, Size: 4]
	int spawnIndex;//[Offset: 0x45c, Size: 4]
	<int,ShowActorData> ShowActorDataArray;//[Offset: 0x460, Size: 60]
	BP_LobbyVehicle_C* refitVehicleActor;//[Offset: 0x49c, Size: 4]
	LobbyModelCommonActorBP_C* parachuteActor;//[Offset: 0x4a0, Size: 4]
	int curVehicleIndex;//[Offset: 0x4a4, Size: 4]
	FString[] ExtraData;//[Offset: 0x4a8, Size: 12]
	bool EnableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool RotateBackZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	LobbyModelShowActorBP_C* nextShowActor;//[Offset: 0x4b8, Size: 4]
	bool isAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool weaponDynMatChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	LobbyModelCommonActorBP_C* icon3DActor;//[Offset: 0x4c0, Size: 4]
	<int> HasShakeEffectItem;//[Offset: 0x4c4, Size: 60]
	LobbyModelCommonActorBP_C* bagActor;//[Offset: 0x500, Size: 4]
	BP_STRUCT_WeaponMatParamCfg_type WeaponMatParam;//[Offset: 0x504, Size: 76]
	float MatAlpha;//[Offset: 0x550, Size: 4]

--------------------------------
Class: Lobby_Koenigsegg_Mesh_Bottom_C.BP_ScriptBinder_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x374, Size: 4]
	void RemoveCacheActor(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, LevelSequenceActor* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void ResetPlatform(HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2bbd2f4
	void GetSeqByBind(int Type, out MovieSceneObjectBindingID NewParam, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void CreateLevelSequnceActor(Object* SluaHUID, int sequenceType, out LevelSequencePlayer* Player, out LevelSequenceActor* sequenceActor, Object* CallFunc_CreateSeq_NewParam, LevelSequenceActor* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, LevelSequence* K2Node_DynamicCast_AsLevel_Sequence, bool K2Node_DynamicCast_bSuccess, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, LevelSequencePlayer* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void CreateSeq(int Type, out Object* NewParam, bool K2Node_SwitchInteger_CmpSuccess, Object* CallFunc_GetAssetByAssetReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, Object* CallFunc_GetAssetByAssetReference_ReturnValue3, Object* CallFunc_GetAssetByAssetReference_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, Object* CallFunc_GetAssetByAssetReference_ReturnValue5, Object* CallFunc_GetAssetByAssetReference_ReturnValue6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6);// 0x2bbd2f4
	void TriggerRotate(float Delta);// 0x2bbd2f4
	void NeedRotate(float X, float Y, out bool need, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void TickRotate(Rotator CallFunc_K2_GetComponentRotation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_NeedRotate_need, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_FClamp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_FClamp_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, Rotator CallFunc_MakeRotator_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void Timeline_0__FinishedFunc();// 0x2bbd2f4
	void Timeline_0__UpdateFunc();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentOnInputTouchBeginSignature__DelegateSignature(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentOnInputTouchEndSignature__DelegateSignature(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x2bbd2f4
	void RotateSpecificAngle(float Delta);// 0x2bbd2f4
	void StopRotate();// 0x2bbd2f4
	void ExecuteUbergraph_Lobby_Koenigsegg_Mesh_Bottom(int EntryPoint, bool CallFunc_K2_SetActorRotation_ReturnValue, float K2Node_Event_DeltaSeconds, byte K2Node_ComponentBoundEvent_FingerIndex2, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent2, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, byte K2Node_ComponentBoundEvent_FingerIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent, float K2Node_CustomEvent_Delta, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue2);// 0x2bbd2f4
	ActorSequenceComponent* Switch car;//[Offset: 0x378, Size: 4]
	StaticMeshComponent* SM_Lobby_Koenigsegg_Open_A;//[Offset: 0x37c, Size: 4]
	StaticMeshComponent* SM_Lobby_Koenigsegg_Open_B;//[Offset: 0x380, Size: 4]
	StaticMeshComponent* SM_Lobby_Koenigsegg_Open_C;//[Offset: 0x384, Size: 4]
	StaticMeshComponent* SM_Lobby_Koenigsegg_Open_D;//[Offset: 0x388, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x38c, Size: 4]
	StaticMeshComponent* SM_Lobby_Koenigsegg_Platform;//[Offset: 0x390, Size: 4]
	ActorSequenceComponent* entrance;//[Offset: 0x394, Size: 4]
	SceneComponent* Scene;//[Offset: 0x398, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x39c, Size: 4]
	float Timeline_0_Alpha_ACB8AE614DFE050CA246E7B034D5967B;//[Offset: 0x3a0, Size: 4]
	byte Timeline_0__Direction_ACB8AE614DFE050CA246E7B034D5967B;//[Offset: 0x3a4, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x3a8, Size: 4]
	float LocationX;//[Offset: 0x3ac, Size: 4]
	float LocationY;//[Offset: 0x3b0, Size: 4]
	byte FingerIndex;//[Offset: 0x3b4, Size: 1]
	bool RotateOnlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool Touching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	float OriginTouchX;//[Offset: 0x3b8, Size: 4]
	float OriginTouchY;//[Offset: 0x3bc, Size: 4]
	Rotator CurRotator;//[Offset: 0x3c0, Size: 12]
	SoftObjectPath Normal;//[Offset: 0x3d0, Size: 24]
	SoftObjectPath NormalSwitchCar;//[Offset: 0x3e8, Size: 24]
	SoftObjectPath NormalIdle;//[Offset: 0x400, Size: 24]
	SoftObjectPath NormalFullIdle;//[Offset: 0x418, Size: 24]
	SoftObjectPath TopIdle;//[Offset: 0x430, Size: 24]
	SoftObjectPath TopFullIdle;//[Offset: 0x448, Size: 24]
	<int,LevelSequenceActor*> LevelSequenceActors;//[Offset: 0x460, Size: 60]
	<int,LevelSequencePlayer*> LvelSequencePlayers;//[Offset: 0x49c, Size: 60]

--------------------------------
Class: BP_ScriptBinder_C.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x370, Size: 4]

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xc8, Size: 32]
	ActorSequence* Sequence;//[Offset: 0xe8, Size: 4]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xec, Size: 4]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bRunOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	bool bEnableOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	void StopPlay();// 0x51b308c
	void StartPlay(float StartTime);// 0x51b3014
	void OnStopOrFinsh();// 0x51b3000
	float GetLength();// 0x51b2fd8

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 24]

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 12]
	ActorSequenceObjectReferences[] References;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 1]
	Guid ActorId;//[Offset: 0x4, Size: 16]
	FString PathToComponent;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: LobbyModelCommonActorBP_C.LobbyModelCommonActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b8, Size: 4]
	int commonActorResId;//[Offset: 0x3bc, Size: 4]

--------------------------------
Class: LobbyModelCommonActor.LuaActor.Actor.Object
	MeshComponent* MeshComponent;//[Offset: 0x36c, Size: 4]
	<enum,FString> SlotNameMap;//[Offset: 0x370, Size: 60]
	delegate OnCommonActorLoaded;//[Offset: 0x3ac, Size: 12]
	void ShowByResId(out const ItemDefineID ItemDefineID, bool bSync);// 0x209c00c
	void ShowByHandle(BattleItemHandleBase* InHandle, bool bSync);// 0x209bf48
	MeshComponent* SetupMeshComponent(MeshComponent* MeshComp);// 0x209bec8
	void SetMeshAndMaterial(BattleItemHandleBase* BattleItemHandleBase, MeshComponent* MeshComp);// 0x209be0c
	void OnCommonActorLoaded__DelegateSignature();// 0x2bbd2f4
	bool NeedUseUpgradeMat();// 0x2bbd2f4
	StaticMeshComponent* InitStaticMesh();// 0x209bde4
	SkeletalMeshComponent* InitSkeletalMesh();// 0x209bdbc
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x209bd08
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x209bc54
	MaterialInterface*[] GetMeshAppliedMaterials(BackpackAvatarHandle* AvatarHandle, MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x209ba7c
	void ApplyMaterialByIdx(MeshComponent* MeshComp, MaterialInstance* Material, int idx);// 0x209b97c

--------------------------------
Class: Backpack3DIconHandle.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	Texture2D* attachTex;//[Offset: 0x9f8, Size: 40]

--------------------------------
Class: BP_STRUCT_WeaponMatParamCfg_type
	int ID_0_01306C0006E69B6C5E6CBB190B10ADC4;//[Offset: 0x0, Size: 4]
	FString RotateMax_1_34BDAE003728AED6240ED2BB0B806958;//[Offset: 0x4, Size: 12]
	FString RotateMin_2_2CDAAD805AF7CA44240ED7AF0B80692E;//[Offset: 0x10, Size: 12]
	FString ShakeMax_3_5CDAED403E5A84016FD5821105714F08;//[Offset: 0x1c, Size: 12]
	FString ShakeMin_4_54F7ECC024AD0C3F6FD58F7905714F7E;//[Offset: 0x28, Size: 12]
	FString RotateStartMax_5_1B3031800163A6B0438B0A0A07319588;//[Offset: 0x34, Size: 12]
	FString RotateStartMin_6_134D310064C8066E438B0902073195FE;//[Offset: 0x40, Size: 12]

--------------------------------
Class: BP_LobbyRefitVehicle_C.BP_LobbyVehicle_C.STExtraLobbyVehicle.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x438, Size: 4]
	void CanAutoPlayLua(out bool Param);// 0x2bbd2f4
	void CheckRefitTipsFadeLua(float Yaw, bool showAllTips);// 0x2bbd2f4
	void ShowLoading(bool Show);// 0x2bbd2f4
	void ResetCameraRotation(Controller* CallFunc_GetController_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void CreateDefaultRefitVehicleMesh(FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, Object* CallFunc_GetAssetByAssetReference_ReturnValue, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetStaticMesh_ReturnValue);// 0x2bbd2f4
	void HasRefitVehicleDownloaded(out bool HasDownloaded, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_IsBattleItemHandleExist_ReturnValue);// 0x2bbd2f4
	void ChangeGroundShadow(FString Path, StaticMeshActor* Actor, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Texture* K2Node_DynamicCast_AsTexture, bool K2Node_DynamicCast_bSuccess, Actor*[] CallFunc_GetActorsByTag_Targets, Actor* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, StaticMeshActor* K2Node_DynamicCast_AsStatic_Mesh_Actor, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void GetRefitVehicleHandle(int VehicleID, out RefitVehicleHandle* RefitVehicleHandle, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitBPConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class RefitVehicleHandle K2Node_ClassDynamicCast_AsRefit_Vehicle_Handle, bool K2Node_ClassDynamicCast_bSuccess, RefitVehicleHandle* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void InitSlotSocket(<int,FString> slotSocket, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x2bbd2f4
	void TryResetCloseUp();// 0x2bbd2f4
	void SetCastShadow(bool CastShadow, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, MeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bbd2f4
	void EnableCameraRotationLag(bool Enable);// 0x2bbd2f4
	void UpdateLastAutoPlayTime(float CallFunc_GetTimeSeconds_ReturnValue);// 0x2bbd2f4
	void CheckAutoPlay(bool CallFunc_CanAutoPlayLua_param, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bbd2f4
	void TryRotateSceneByTouch(out bool rotated, float CallFunc_InterpVelocity_velocity, float CallFunc_InterpVelocity_velocity2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_NotEqual_FloatFloat_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed);// 0x2bbd2f4
	void TryStopAutoPlay();// 0x2bbd2f4
	Transform GetSlotSocketTransform(int inInt, FString CallFunc_Conv_IntToString_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void GetVectorAngle(out float degree, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_DegAtan2_ReturnValue, float CallFunc_DegAtan2_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2bbd2f4
	void DestroyFreeCamera(bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	float GetYawToMesh(Vector Location, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);// 0x2bbd2f4
	void CheckRefitTipsFade(bool forceShowAll, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_GetYawToMesh_ReturnValue);// 0x2bbd2f4
	void InterpVelocity(float New, float Old, out float Velocity, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FInterpEaseInOut_ReturnValue);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void TimeLine_LerpRotator__FinishedFunc();// 0x2bbd2f4
	void TimeLine_LerpRotator__UpdateFunc();// 0x2bbd2f4
	void TimeLine_LerpPosition__FinishedFunc();// 0x2bbd2f4
	void TimeLine_LerpPosition__UpdateFunc();// 0x2bbd2f4
	void Timeline_AutoPlay__FinishedFunc();// 0x2bbd2f4
	void Timeline_AutoPlay__UpdateFunc();// 0x2bbd2f4
	void TimeLine_BlendCamera__FinishedFunc();// 0x2bbd2f4
	void TimeLine_BlendCamera__UpdateFunc();// 0x2bbd2f4
	void Timeline_Vehicle_Update_Zoom_out__FinishedFunc();// 0x2bbd2f4
	void Timeline_Vehicle_Update_Zoom_out__UpdateFunc();// 0x2bbd2f4
	void Timeline_Vehicle_Update_Zoom_in__FinishedFunc();// 0x2bbd2f4
	void Timeline_Vehicle_Update_Zoom_in__UpdateFunc();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void ReceivePossessed(Controller* NewController);// 0x2bbd2f4
	void SwitchCloseupCameraEllipse(int SlotID);// 0x2bbd2f4
	void AutoPlay();// 0x2bbd2f4
	void BlendCameraActor(SceneComponent* CameraActor, Transform toTransform);// 0x2bbd2f4
	void SwitchCloseUpCameraLinear(int SlotID);// 0x2bbd2f4
	void OnVehicleUpgradeSuccess();// 0x2bbd2f4
	void ResetCloseUpCamera();// 0x2bbd2f4
	void EventOnAllMeshLoad();// 0x2bbd2f4
	void ShowLoadingForTime(float Time);// 0x2bbd2f4
	void SetHighLight(float invincible, float FreExp, float Speed);// 0x2bbd2f4
	void TrySetHilight(float invincible, float Freq, float Speed);// 0x2bbd2f4
	void LuaBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_BP_LobbyRefitVehicle(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, float K2Node_Event_DeltaSeconds, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Controller* K2Node_Event_NewController, int K2Node_CustomEvent_SlotID2, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Vector CallFunc_BreakTransform_Location4, Rotator CallFunc_BreakTransform_Rotation4, Vector CallFunc_BreakTransform_Scale4, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_BreakTransform_Location5, Rotator CallFunc_BreakTransform_Rotation5, Vector CallFunc_BreakTransform_Scale5, Vector CallFunc_BreakTransform_Location6, Rotator CallFunc_BreakTransform_Rotation6, Vector CallFunc_BreakTransform_Scale6, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_BreakTransform_Location7, Rotator CallFunc_BreakTransform_Rotation7, Vector CallFunc_BreakTransform_Scale7, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Cross_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue3, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LobbyRefitCloseUp_C* CallFunc_FinishSpawningActor_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetVectorAngle_degree, bool CallFunc_Greater_FloatFloat_ReturnValue, int ___int_Array_Index_Variable3, PlayerController* CallFunc_GetPlayerController_ReturnValue2, SceneComponent* K2Node_CustomEvent_cameraActor, Transform K2Node_CustomEvent_toTransform, bool CallFunc_IsValid_ReturnValue3, Transform CallFunc_K2_GetComponentToWorld_ReturnValue2, int K2Node_CustomEvent_SlotID, Transform CallFunc_GetSlotSocketTransform_ReturnValue, VehicleRefitTips_C*[] CallFunc_GetAllActorsOfClass_OutActors, VehicleRefitTips_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_BreakTransform_Location8, Rotator CallFunc_BreakTransform_Rotation8, Vector CallFunc_BreakTransform_Scale8, bool CallFunc_IsValid_ReturnValue4, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, bool CallFunc_IsValid_ReturnValue6, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_TryRotateSceneByTouch_rotated, VehicleRefitTips_C*[] CallFunc_GetAllActorsOfClass_OutActors2, int CallFunc_Array_Length_ReturnValue2, Rotator CallFunc_GetControlRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue3, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, PlayerController* CallFunc_GetPlayerController_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, Transform CallFunc_GetTransform_ReturnValue2, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult2, PlayerController* CallFunc_GetPlayerController_ReturnValue4, Rotator CallFunc_GetControlRotation_ReturnValue2, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, PlayerController* CallFunc_GetPlayerController_ReturnValue5, Rotator CallFunc_MakeRotator_ReturnValue3, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, Transform CallFunc_K2_GetComponentToWorld_ReturnValue3, Vector CallFunc_BreakTransform_Location9, Rotator CallFunc_BreakTransform_Rotation9, Vector CallFunc_BreakTransform_Scale9, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Rotator CallFunc_MakeRotator_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult3, PlayerController* CallFunc_GetPlayerController_ReturnValue6, Transform CallFunc_K2_GetComponentToWorld_ReturnValue4, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, BP_LobbyRefitCloseUp_C* CallFunc_FinishSpawningActor_ReturnValue2, float CallFunc_DegCos_ReturnValue, float CallFunc_DegSin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_TLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue6, PlayerController* CallFunc_GetPlayerController_ReturnValue7, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int ___int_Loop_Counter_Variable3, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, bool CallFunc_IsValid_ReturnValue7, Transform CallFunc_K2_GetComponentToWorld_ReturnValue5, Vector CallFunc_BreakTransform_Location10, Rotator CallFunc_BreakTransform_Rotation10, Vector CallFunc_BreakTransform_Scale10, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, Rotator CallFunc_MakeRotator_ReturnValue5, Transform CallFunc_K2_GetComponentToWorld_ReturnValue6, PlayerController* CallFunc_GetPlayerController_ReturnValue8, Transform CallFunc_K2_GetComponentToWorld_ReturnValue7, int ___int_Array_Index_Variable4, Vector CallFunc_BreakTransform_Location11, Rotator CallFunc_BreakTransform_Rotation11, Vector CallFunc_BreakTransform_Scale11, VehicleRefitTips_C* CallFunc_Array_Get_Item2, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, bool K2Node_SwitchInteger_CmpSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue9, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Multiply_FloatFloat_ReturnValue3, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_NearlyEqual_TransformTransform_ReturnValue, Transform CallFunc_GetSlotSocketTransform_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, VehicleRefitTips_C*[] CallFunc_GetAllActorsOfClass_OutActors3, bool CallFunc_NearlyEqual_TransformTransform_ReturnValue2, VehicleRefitTips_C* CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue8, Transform CallFunc_K2_GetComponentToWorld_ReturnValue8, PlayerController* CallFunc_GetPlayerController_ReturnValue10, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue3, BP_LobbyRefitCloseUp_C* CallFunc_FinishSpawningActor_ReturnValue3, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp2, float CallFunc_GetTimelineLength_ReturnValue, float CallFunc_GetTimelineLength_ReturnValue2, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp3, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp4, float CallFunc_GetTimelineLength_ReturnValue3, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp5, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp6, float CallFunc_GetTimelineLength_ReturnValue4, float CallFunc_GetTimelineLength_ReturnValue5, float K2Node_CustomEvent_time, Rotator CallFunc_RLerp_ReturnValue, float K2Node_Event_Invincible, float K2Node_Event_FreExp, float K2Node_Event_Speed, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float K2Node_CustomEvent_Invincible, float K2Node_CustomEvent_Freq, float K2Node_CustomEvent_speed, UAEMeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, UAEMeshComponent* CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_Less_IntInt_ReturnValue3, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item5, bool CallFunc_Less_IntInt_ReturnValue4, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue10, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Loop_Counter_Variable4, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue5);// 0x2bbd2f4
	StaticMeshComponent* DefaultStaticMesh;//[Offset: 0x43c, Size: 4]
	CameraComponent* Camera;//[Offset: 0x440, Size: 4]
	SpringArmComponent* SpringArm;//[Offset: 0x444, Size: 4]
	float TimeLine_LerpPosition_degree_BC84527D4F1E3F8A299259BA82D05CD5;//[Offset: 0x448, Size: 4]
	byte TimeLine_LerpPosition__Direction_BC84527D4F1E3F8A299259BA82D05CD5;//[Offset: 0x44c, Size: 1]
	TimelineComponent* TimeLine_LerpPosition;//[Offset: 0x450, Size: 4]
	float Timeline_AutoPlay_yaw_87093ECB435381EB481155BD1C007A5B;//[Offset: 0x454, Size: 4]
	float Timeline_AutoPlay_pitch_87093ECB435381EB481155BD1C007A5B;//[Offset: 0x458, Size: 4]
	byte Timeline_AutoPlay__Direction_87093ECB435381EB481155BD1C007A5B;//[Offset: 0x45c, Size: 1]
	TimelineComponent* Timeline_AutoPlay;//[Offset: 0x460, Size: 4]
	float TimeLine_BlendCamera_time_16B4579C4F72C1371A81BFBE1D6CF40B;//[Offset: 0x464, Size: 4]
	byte TimeLine_BlendCamera__Direction_16B4579C4F72C1371A81BFBE1D6CF40B;//[Offset: 0x468, Size: 1]
	TimelineComponent* TimeLine_BlendCamera;//[Offset: 0x46c, Size: 4]
	float Timeline_Vehicle_Update_Zoom_in_cameraX_4617DA274820636AAC83688C648EE214;//[Offset: 0x470, Size: 4]
	byte Timeline_Vehicle_Update_Zoom_in__Direction_4617DA274820636AAC83688C648EE214;//[Offset: 0x474, Size: 1]
	TimelineComponent* Timeline_Vehicle_Update_Zoom_in;//[Offset: 0x478, Size: 4]
	float Timeline_Vehicle_Update_Zoom_out_cameraX_C9815D554EBF979651AC3BA48613EE7F;//[Offset: 0x47c, Size: 4]
	byte Timeline_Vehicle_Update_Zoom_out__Direction_C9815D554EBF979651AC3BA48613EE7F;//[Offset: 0x480, Size: 1]
	TimelineComponent* Timeline_Vehicle_Update_Zoom_out;//[Offset: 0x484, Size: 4]
	float TimeLine_LerpRotator_time_88CF9F274BE419FD7F606D9F8C5776A8;//[Offset: 0x488, Size: 4]
	byte TimeLine_LerpRotator__Direction_88CF9F274BE419FD7F606D9F8C5776A8;//[Offset: 0x48c, Size: 1]
	TimelineComponent* TimeLine_LerpRotator;//[Offset: 0x490, Size: 4]
	byte inputFingerIndex;//[Offset: 0x494, Size: 1]
	float initX;//[Offset: 0x498, Size: 4]
	float initY;//[Offset: 0x49c, Size: 4]
	float tempX;//[Offset: 0x4a0, Size: 4]
	float tempY;//[Offset: 0x4a4, Size: 4]
	bool isCloseUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool isTickRefitTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	Transform tempTransform_ForBlendCameraActor;//[Offset: 0x4b0, Size: 48]
	Transform initTransform;//[Offset: 0x4e0, Size: 48]
	Transform TargetTransform;//[Offset: 0x510, Size: 48]
	float shortRadius;//[Offset: 0x540, Size: 4]
	float longRadius;//[Offset: 0x544, Size: 4]
	BP_LobbyRefitCloseUp_C* cameraCloseUp;//[Offset: 0x548, Size: 4]
	Vector centerPoint;//[Offset: 0x54c, Size: 12]
	Vector shortVector;//[Offset: 0x558, Size: 12]
	Vector longVector;//[Offset: 0x564, Size: 12]
	int ellipseRotateDirection;//[Offset: 0x570, Size: 4]
	int targetCloseUpSlotId;//[Offset: 0x574, Size: 4]
	bool canAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	float lastAutoPlayTime;//[Offset: 0x57c, Size: 4]
	bool showAllTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	float autoPlayInitRotateYaw;//[Offset: 0x584, Size: 4]
	bool isPlayingUpgradeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool isAutoPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool isResetingCloseUpCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool isSwitchCameraEllipse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	bool isAllMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	float MeshScale;//[Offset: 0x590, Size: 4]
	RefitVehicleHandle* vehicleHandle;//[Offset: 0x594, Size: 4]
	MaterialInstance* vehicleGroundMaterialInterface;//[Offset: 0x598, Size: 4]
	LobbyModelShowActorBP_C* refitVehicleShowActor;//[Offset: 0x59c, Size: 4]
	StaticMesh*[] RefitVehicleSTMesh;//[Offset: 0x5a0, Size: 12]
	int TryTime;//[Offset: 0x5ac, Size: 4]
	bool HightlightSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]

--------------------------------
Class: BP_LobbyVehicle_C.STExtraLobbyVehicle.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 4]
	void SetHighLight(float invincible, float FreExp, float Speed, MaterialInstanceDynamic* DynamicMat);// 0x2bbd2f4
	int GetDefaultAvatarID(int InAvatarID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehiclePlaneSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	void SetDMIParam(MaterialInstanceDynamic* Target, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void GetVehicleMasterPath(int VehicleSkinID, out FString MeshBasePath, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehicleBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2);// 0x2bbd2f4
	bool ClearAllVehicleItems();// 0x2bbd2f4
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID, FString CallFunc_GetNewVehicleMasterAnimBPPath_AnimBPPath, FString CallFunc_GetNewVehilceMasterPath_MeshBasePath, bool CallFunc_PreChangeVehicleAvatar_Old_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_PreChangeVehicleAvatar_Old_ReturnValue2);// 0x2bbd2f4
	bool PutOffVehicleSlot(enum InSlotType, bool CallFunc_PutOffSlotInLobby_result);// 0x2bbd2f4
	bool PutOffVehicleItem(int InModelID, bool CallFunc_PutOffItemIDInLobby_result);// 0x2bbd2f4
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID, bool CallFunc_PutOnItemIDInLobby_result);// 0x2bbd2f4
	void GetNewVehicleMasterAnimBPPath(int InSkinID, out FString AnimBpPath, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x2bbd2f4
	void GetNewVehilceMasterPath(int VehicleSkinID, out FString MeshBasePath, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x2bbd2f4
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID, bool CallFunc_PreChangeVehicleAvatar_ReturnValue, FString CallFunc_GetNewVehilceMasterPath_MeshBasePath, bool CallFunc_PreChangeVehicleAvatar_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetVehicleMasterPath_MeshBasePath);// 0x2bbd2f4
	bool ClearAllVehicleStyleID();// 0x2bbd2f4
	bool PutOffVehicleStyleID(int InStyleID, bool CallFunc_HandleUnequipStyle_ReturnValue);// 0x2bbd2f4
	bool PutOnVehicleStyleID(int InStyleID, bool CallFunc_HandleEquipStyle_ReturnValue);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void TrySetHighlight(float invincible, float Freq, float Speed);// 0x2bbd2f4
	void ExecuteUbergraph_BP_LobbyVehicle(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, float K2Node_CustomEvent_Invincible, float K2Node_CustomEvent_Freq, float K2Node_CustomEvent_speed, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable, MaterialInterface* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x384, Size: 4]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x388, Size: 4]
	MaterialInstanceDynamic* DMI;//[Offset: 0x38c, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x390, Size: 4]
	FName TailLightParamName;//[Offset: 0x398, Size: 8]
	FName FrontLightParamName;//[Offset: 0x3a0, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x3a8, Size: 8]
	int vehicleResId;//[Offset: 0x3b0, Size: 4]
	MaterialInstanceDynamic* DMI_TailLight;//[Offset: 0x3b4, Size: 4]
	MaterialInstanceDynamic* DMI_AdvanceVehicle;//[Offset: 0x3b8, Size: 4]
	int HighlightTryTime;//[Offset: 0x3bc, Size: 4]
	<int> SkyMotors;//[Offset: 0x3c0, Size: 60]
	<int> SpecialMotors;//[Offset: 0x3fc, Size: 60]

--------------------------------
Class: STExtraLobbyVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x364, Size: 4]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x368, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x36c, Size: 4]
	FString LuaFilePath;//[Offset: 0x370, Size: 12]
	bool PutOnVehicleStyleID(int InStyleID);// 0x21e6378
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID);// 0x21f2f84
	bool PutOffVehicleStyleID(int InStyleID);// 0x21f2efc
	bool PutOffVehicleSlot(enum InSlotType);// 0x21f2e74
	bool PutOffVehicleItem(int InModelID);// 0x21f2dec
	bool PreChangeVehicleFPPAvatar();// 0x21f2dbc
	bool PreChangeVehicleBrokenMat();// 0x21f2d8c
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID);// 0x21f2cc0
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x21f2bf4
	VehicleAvatarComponent* GetVehicleAvatar();// 0x21f2bcc
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x21f2ba4
	MaterialInstanceDynamic* GetTailLightDIM();// 0x21f2b7c
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x21f2b54
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x21f2b2c
	int GetDefaultAvatarID(int InAvatarID);// 0x21f2aa4
	bool ClearAllVehicleStyleID();// 0x21f2a74
	bool ClearAllVehicleItems();// 0x21f2a44

--------------------------------
Class: BP_STRUCT_VehiclePlaneSkinMapping_type
	int OrginalID_0_035F8000705EAFE8164A73BF05CF7C94;//[Offset: 0x0, Size: 4]
	int SkinID_1_2D869240386FF4E567A70940014D8664;//[Offset: 0x4, Size: 4]
	FString iconURL_2_025050C0368B0D852A82EE78056E714C;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleBPTable_type
	int ID_0_0D9DF74051BBD583279703B701F172E4;//[Offset: 0x0, Size: 4]
	FString Path_2_2F72974026FE3BC32110651501735958;//[Offset: 0x4, Size: 12]
	FString CName_3_138BC5001BE2FE5E5E66B36807255925;//[Offset: 0x10, Size: 12]
	int VehicleShapeID_4_2C43E38070C85DC025E56CC303F69884;//[Offset: 0x1c, Size: 4]
	FString LobbyPath_5_4594B5404A7DACE145FA22A607895AE8;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleShapeTable_type
	FString MeshBasePath_0_417CD1001B80DC1E44CCF1BC0A899508;//[Offset: 0x0, Size: 12]
	FString BPPath_1_04FA93804ECCC4B06DEB74AB015A0988;//[Offset: 0xc, Size: 12]
	int ID_2_63908F0075AF39C00FB6A5F00F6121F4;//[Offset: 0x18, Size: 4]
	FString AnimBPPath_3_12EBB4C05FB48819333454CC00540308;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitInfo_type
	int cost_num1_0_206D9D404A460C770DD906380BC58481;//[Offset: 0x0, Size: 4]
	FString unlock_part_list_1_154E4640205F8CA9261052710E193D64;//[Offset: 0x4, Size: 12]
	int cost_num2_5_206E9D804A460C780DD9063F0BC58482;//[Offset: 0x10, Size: 4]
	int cost_id2_6_69AB5CC07C73718975D5265F08BC42F2;//[Offset: 0x14, Size: 4]
	int vehicle_group_id_8_28A4BD0014BDAA3A35B5E24106F2D5E4;//[Offset: 0x18, Size: 4]
	int level_9_406ABD00274B124A3D84959D01EC2D9C;//[Offset: 0x1c, Size: 4]
	int cost_id1_11_69AA5C807C73718875D5265808BC42F1;//[Offset: 0x20, Size: 4]
	int vehicle_id_14_12DD9A006C12A260363420170D9E9004;//[Offset: 0x24, Size: 4]
	int VehicleShapeID_15_1C46A68016CA3E7862FCD8770C15F554;//[Offset: 0x28, Size: 4]
	FString DefaultStyleList_16_42E513804A54486A3C87203A06970FC4;//[Offset: 0x2c, Size: 12]
	int CameraMapID_17_008BD40017FB573E1D5C69DF09B42634;//[Offset: 0x38, Size: 4]
	FString des_18_2CE9E60030AFF29C7BC43AC30121D423;//[Offset: 0x3c, Size: 12]
	int levelShowedInStore_19_0F3E688048D05E406085DB75090EB705;//[Offset: 0x48, Size: 4]
	FString levelIcon_20_3B181F40595EF03B0759382D0DA1167E;//[Offset: 0x4c, Size: 12]
	int levelShowRefit_21_62A703C06E7AA2A73D47FB960412BC34;//[Offset: 0x58, Size: 4]
	FString big_icon_22_6C9A25804E63836E6E62E43101E7E53E;//[Offset: 0x5c, Size: 12]
	FString StaticMeshPath_23_08D3F7804FBB3CE866105B0D080582D8;//[Offset: 0x68, Size: 12]

--------------------------------
Class: VehicleAdvanceAvatarComp_BP_C.VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x728, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x2bbd2f4
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bbd2f4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_Old_ReturnValue, bool CallFunc_GenerateDefaultAvatarConfig_ReturnValue, VehicleAvatarData K2Node_MakeStruct_VehicleAvatarData, bool CallFunc_InitVehicleAvatar_ReturnValue);// 0x2bbd2f4
	void PutOffItemIDInLobby(int InItemID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnEquipItem_ReturnValue);// 0x2bbd2f4
	void PutOnItemIDInLobby(int InItemID, int ColorID, int PatternID, int Particle ID, out bool Result, FString CallFunc_Conv_IntToString_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x2bbd2f4
	void PutOffSlotInLobby(byte InSlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x2bbd2f4
	void BP_ProcessStyleUnequipped(int OldStyleID, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int CallFunc_IsStyleHasModelConfig_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipStyle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue2, int CallFunc_IsStyleHasModelConfig_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x2bbd2f4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x2bbd2f4
	void BP_ProcessStyleEquipped(int NewStyleID, int OldStyleID);// 0x2bbd2f4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bbd2f4
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle, class VAH_Pattern_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Pattern_BP_Base, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, VAH_Pattern_BP_Base_C* CallFunc_SpawnObject_ReturnValue, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class Object CallFunc_GetClass_ReturnValue, class VAH_Particle_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Particle_BP_Base, bool K2Node_ClassDynamicCast_bSuccess2, VAH_Particle_BP_Base_C* CallFunc_SpawnObject_ReturnValue2, class VAH_Color_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Color_BP_Base, bool K2Node_ClassDynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, VAH_Color_BP_Base_C* CallFunc_SpawnObject_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, AvatarCustomBase*[] K2Node_MakeArray_Array);// 0x2bbd2f4
	VehicleStyleData MakeVehicleStyleData(int InStyleID, VehicleStyle[] Temp, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitStyle_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, VehicleStyle K2Node_MakeStruct_VehicleStyle, int CallFunc_Array_Add_ReturnValue, VehicleStyle K2Node_MakeStruct_VehicleStyle2, byte CallFunc_Conv_IntToByte_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue3, VehicleStyleData K2Node_MakeStruct_VehicleStyleData);// 0x2bbd2f4
	bool GenerateDefaultAvatarConfig(int InBaseSkinID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AvatarBPUtils* CallFunc_GetBPUtils_ReturnValue, int[] CallFunc_GetVehicleDefaultStyleID_OutStyleIDList, bool CallFunc_GetVehicleDefaultStyleID_ReturnValue, int CallFunc_Array_Get_Item, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, int CallFunc_IsStyleHasModelConfig_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID);// 0x2bbd2f4
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_ReturnValue);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bbd2f4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x2bbd2f4
	void BP_EventStyleEquipped(int NewStyleID, int OldStyleID);// 0x2bbd2f4
	void BP_EventStyleUnequipped(int OldStyleID);// 0x2bbd2f4
	void ExecuteUbergraph_VehicleAdvanceAvatarComp_BP(int EntryPoint, int K2Node_CustomEvent_OldStyleID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, int K2Node_CustomEvent_NewStyleID, int K2Node_CustomEvent_OldStyleID2);// 0x2bbd2f4
	int[] DefaultStyleIDList;//[Offset: 0x72c, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitBPTable_type
	FString Path_0_367735C04445450711936E2507D65338;//[Offset: 0x0, Size: 12]
	int SkinID_1_178D3B00586DF4A03398AF2E06BA7504;//[Offset: 0xc, Size: 4]
	int TemplateID_2_188844C035CA84B912116AE102FE3804;//[Offset: 0x10, Size: 4]
	int ID_3_7E5115C05AFA7931402A62180B97D7E4;//[Offset: 0x14, Size: 4]
	FString LobbyPath_6_1DD513C07D99921F4DE3874A01E3EA48;//[Offset: 0x18, Size: 12]

--------------------------------
Class: VAH_Pattern_BP_Base_C.AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x1fe8d90

--------------------------------
Class: BP_STRUCT_VehicleRefitPatternTable_type
	int IconScale2_0_46572E4071F9B3293BE305FF087656B2;//[Offset: 0x0, Size: 4]
	FString IconPath2_1_024EF7804CE8216627C3CAFF038879F2;//[Offset: 0x4, Size: 12]
	int IconScale1_2_46562E0071F9B3283BE305F8087656B1;//[Offset: 0x10, Size: 4]
	FString IconPath1_3_024DF7404CE8216527C3CAFC038879F1;//[Offset: 0x14, Size: 12]
	int ID_4_3B4768C07AEB475737EB9B560A7BEF14;//[Offset: 0x20, Size: 4]
	FString IconOffset_5_59F5A18037D665B02424026A0AB3EDF4;//[Offset: 0x24, Size: 12]
	FString PatternBPPath_6_4B5944C06FBA413D7EB727A808597AD8;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitColorTable_type
	int ID_0_7607F1003C307130785E051708091744;//[Offset: 0x0, Size: 4]
	int Gray_1_23C2528073E753A86CAE45C709177089;//[Offset: 0x4, Size: 4]
	FString Color3_2_133F1A40217781872E65F412071E3F43;//[Offset: 0x8, Size: 12]
	FString Color2_3_133E1A00217781862E65F413071E3F42;//[Offset: 0x14, Size: 12]
	FString Color1_4_133D19C0217781852E65F410071E3F41;//[Offset: 0x20, Size: 12]
	FString ColorBPPath_5_507BD54027F0DEF913818BAA07048B58;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: VAH_Particle_BP_Base_C.AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x3c, Size: 12]
	ParticleGroup ParticleGroup;//[Offset: 0x48, Size: 36]
	bool ClearCustomInfo();// 0x1fe89c0
	void AsyncLoadCustomParticleDone();// 0x1fe89ac
	bool ApplyCustomInfo();// 0x1fe897c

--------------------------------
Class: VAH_Color_BP_Base_C.AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x1fe8178

--------------------------------
Class: BP_STRUCT_VehicleRefitStyle_type
	int cost_id1_21_40D3BDC00FA1EC252A325218091B0AE1;//[Offset: 0x0, Size: 4]
	int cost_id2_2_40D4BE000FA1EC262A325219091B0AE2;//[Offset: 0x4, Size: 4]
	int auto_unlock_3_70A1E14054C1515F34AD00AA03FE271B;//[Offset: 0x8, Size: 4]
	int part_id_19_2960F1004F796BBC287325E80772B0B4;//[Offset: 0xc, Size: 4]
	int part_group_id_20_580314001313FC7E5037A1C0001EF544;//[Offset: 0x10, Size: 4]
	int style_id_6_3334EF8009D542BA023C1EFF04520144;//[Offset: 0x14, Size: 4]
	int vehicle_group_id_7_2FA91E401396E1572443357005BAE444;//[Offset: 0x18, Size: 4]
	int cost_num2_8_567B5EC042ECFAD5581D19B001B10392;//[Offset: 0x1c, Size: 4]
	int cost_num1_9_567A5E8042ECFAD4581D19B101B10391;//[Offset: 0x20, Size: 4]
	FString style_icon_10_2B88068062961F24124419A202014E0E;//[Offset: 0x24, Size: 12]
	FString part_name_11_242D66002BB47CD41AA53D3702B10145;//[Offset: 0x30, Size: 12]
	FString part_group_icon_12_75E1AB0010031F6A4A4800D10EF54A4E;//[Offset: 0x3c, Size: 12]
	FString style_name_13_7772E4800830FFC6124AFDB20202F465;//[Offset: 0x48, Size: 12]
	int value1_14_12B54BC05132BBB9260C3FBC04D988D1;//[Offset: 0x54, Size: 4]
	int value2_15_12B64C005132BBBA260C3FBF04D988D2;//[Offset: 0x58, Size: 4]
	int real_part_16_420F46C07AAD2FE77C0DB8570D3321D4;//[Offset: 0x5c, Size: 4]
	int type2_17_243BF54066D327F75079C483054BFDB2;//[Offset: 0x60, Size: 4]
	int type1_18_243AF50066D327F65079C482054BFDB1;//[Offset: 0x64, Size: 4]
	int can_fit_22_68F7CD4000E30BD17923736E08996A54;//[Offset: 0x68, Size: 4]
	FString part_group_tab_icon_23_089B9080591DEC3273FD6659077B104E;//[Offset: 0x6c, Size: 12]
	int real_part2_24_0189F34001B6E9815CB7C17003321DA2;//[Offset: 0x78, Size: 4]
	int type21_25_7B46618009DF2DB0732EC53204BFDB01;//[Offset: 0x7c, Size: 4]
	int value21_26_048158402E894EF74D0737BF0D988D11;//[Offset: 0x80, Size: 4]

--------------------------------
Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xf0, Size: 12]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xfc, Size: 60]
	<int,WeaponAttachmentsDataRow> WeaponAttachmentsTableRowMap;//[Offset: 0x174, Size: 60]
	FString InitedUpWeaponTableName;//[Offset: 0x1b0, Size: 12]
	<int,UpWeaponDataRow> UpWeaponTableRowMap;//[Offset: 0x1bc, Size: 60]
	<int,int> UpWeaponBPIDMap;//[Offset: 0x1f8, Size: 60]
	FString InitedUpWeaponAttachmentTableName;//[Offset: 0x234, Size: 12]
	<int,UpWeaponAttachmentDataRow> UpWeaponAttachmentTableRowMap;//[Offset: 0x240, Size: 60]
	FString InitedUpBulletTableName;//[Offset: 0x27c, Size: 12]
	<int,UpBulletTableDataRow> UpBulletTableRowMap;//[Offset: 0x288, Size: 60]
	<int,SupportUpBullets> AvailableBulletsMap;//[Offset: 0x2c4, Size: 60]
	FString InitedChipSupportTableName;//[Offset: 0x300, Size: 12]
	<int,ChipSupportDataRow> ChipSupportDataRowMap;//[Offset: 0x30c, Size: 60]
	<int,ChipSupportItem> ChipSupportItemMap;//[Offset: 0x348, Size: 60]
	FString InitedChipTableName;//[Offset: 0x384, Size: 12]
	<int,ChipDataRow> ChipDataRowMap;//[Offset: 0x390, Size: 60]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x1f6b48c
	void StringToArrayName(FString str, out FName[] OutArray, FString Sign);// 0x1f6b218
	void StringToArray(FString str, out int[] OutArray, FString Sign);// 0x1f6afa4
	void RefreshWeaponAttachmentsTableRowMap(int WeaponId, out const WeaponAttachmentsDataRow RowData);// 0x1f6ae8c
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x1f6add0
	void InitWeaponAttrBPTable();// 0x1f6adbc
	void InitWeaponAttachmentsTable();// 0x1f6ada8
	void InitUpWeaponTable(FString tableName);// 0x1f6acec
	void InitUpWeaponAttachmentsTable(FString tableName);// 0x1f6ac30
	void InitUpBulletTable(FString tableName);// 0x1f6ab74
	void Initialize();// 0x1f6ab60
	void InitChipTable(FString tableName);// 0x1f6aaa4
	void InitChipSupportTable(FString tableName);// 0x1f6a9e8
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x1f6a960
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x1f6a840
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x1f6a730
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1f6a690
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x1f6a578
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1f6a4d8
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x1f6a364
	int GetBPIDByResID(int resID);// 0x1f6a2dc
	FString GetAvatarHandlePath(ItemDefineID DefineID, bool bLobby);// 0x1f6a16c
	void GetAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1f6a000
	int GetAdjustWeaponBPID_Lobby(int WeaponId);// 0x1f69f78
	ItemHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1f69e4c
	void ConstructAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1f69cd8

--------------------------------
Class: CreateAvatarHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateAvatarHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WeaponAttachmentsDataRow
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletID;//[Offset: 0x4, Size: 4]
	int ProposeBulletNum;//[Offset: 0x8, Size: 4]
	int AIMinAttackDist;//[Offset: 0xc, Size: 4]
	int AIMaxAttackDist;//[Offset: 0x10, Size: 4]
	int[] MuzzleIDList;//[Offset: 0x14, Size: 12]
	int[] UpperIDList;//[Offset: 0x20, Size: 12]
	int[] StockIDList;//[Offset: 0x2c, Size: 12]
	int[] MagazineIDList;//[Offset: 0x38, Size: 12]
	int[] LowerIDList;//[Offset: 0x44, Size: 12]
	int[] UpperSideIDList;//[Offset: 0x50, Size: 12]

--------------------------------
Class: UpWeaponDataRow

--------------------------------
Class: UpWeaponAttachmentDataRow

--------------------------------
Class: UpBulletTableDataRow
	int MiltiBulletID;//[Offset: 0x0, Size: 4]
	int ParentBulletID;//[Offset: 0x4, Size: 4]
	float BulletImpactDamagePerc;//[Offset: 0x8, Size: 4]
	int BulletImpactDamageAddVal;//[Offset: 0xc, Size: 4]
	float BulletMomentumPerc;//[Offset: 0x10, Size: 4]
	int BulletMomentumAddVal;//[Offset: 0x14, Size: 4]
	int DefaultPriority;//[Offset: 0x18, Size: 4]
	int[] BulletHitBuffIdList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SupportUpBullets
	SupportUpBullet[] SupportUpBulletList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ChipSupportDataRow
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SupportChipSupTypeList;//[Offset: 0x4, Size: 12]
	int SupportChipNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ChipSupportItem
	int ChipSubType;//[Offset: 0x0, Size: 4]
	<int,bool> SupportItemDic;//[Offset: 0x4, Size: 60]

--------------------------------
Class: ChipDataRow
	int ItemId;//[Offset: 0x0, Size: 4]
	AttrModifyData[] AttrModifyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AttrModifyData

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x430, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x2bbd2f4
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x2bbd2f4
	FString GetItemAvatarHandlePath(int ItemId, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x2bbd2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, bool NewLocalVar, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x2bbd2f4
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void VehicleAvatarEquiped();// 0x2bbd2f4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x2bbd2f4
	void VehicleFPPMeshLoaded();// 0x2bbd2f4
	void LoadedBrokenMat();// 0x2bbd2f4
	void ClearVehicleLightEffect();// 0x2bbd2f4
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bbd2f4
	ParticleSystem* CurLightEffect;//[Offset: 0x438, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x460, Size: 4]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]

--------------------------------
Class: RefitVehicleHandle.Object
	<int,FString> SlotConfig;//[Offset: 0x1c, Size: 60]
	float Scale;//[Offset: 0x58, Size: 4]
	Vector Location;//[Offset: 0x5c, Size: 12]
	Texture2D* GroundTexture;//[Offset: 0x68, Size: 40]

--------------------------------
Class: BP_STRUCT_VehicleRefitBPConfig_type
	int ID_0_5B2431405FE6DA5350C148B308CCED84;//[Offset: 0x0, Size: 4]
	FString path_1_6C12D940780BE1834EB793700CEE3068;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_LobbyRefitCloseUp_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 4]
	void GetCameraWorldLocation(out Vector cameraWorldLocation, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void öeô•t_();// 0x2bbd2f4
	void öeô•t_();// 0x2bbd2f4
	void ChanTransformWithBlend(out const Transform B);// 0x2bbd2f4
	void ExecuteUbergraph_BP_LobbyRefitCloseUp(int EntryPoint, const Transform K2Node_CustomEvent_B, Transform CallFunc_GetTransform_ReturnValue, Transform CallFunc_TLerp_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult);// 0x2bbd2f4
	CameraComponent* Camera;//[Offset: 0x2e4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 4]
	float ____0_time_5C46C2804013FEE671133C8FDC77B8D4;//[Offset: 0x2ec, Size: 4]
	byte ____0__Direction_5C46C2804013FEE671133C8FDC77B8D4;//[Offset: 0x2f0, Size: 1]
	TimelineComponent* öeô•t;//[Offset: 0x2f4, Size: 4]
	int closeUpSlotId;//[Offset: 0x2f8, Size: 4]
	BP_LobbyRefitCloseUp_C* tempCameraCloseUp;//[Offset: 0x2fc, Size: 4]

--------------------------------
Class: VehicleRefitTips_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 4]
	void UpdateTipImage(FString imgPath, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void AttachToRefitSocket(LobbyModelShowActorBP_C* ShowActor, int SlotID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x2bbd2f4
	void SetRefitSlot(int SlotID, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void HideOutTipFrom1To0();// 0x2bbd2f4
	void HideTip();// 0x2bbd2f4
	void FadeInToTransparent();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void FadeOut();// 0x2bbd2f4
	void FadeIn();// 0x2bbd2f4
	void HideoutTipFromTransparentTo0();// 0x2bbd2f4
	void ExecuteUbergraph_VehicleRefitTips(int EntryPoint, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue2, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI, bool K2Node_DynamicCast_bSuccess, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI2, bool K2Node_DynamicCast_bSuccess2, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue3, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI3, bool K2Node_DynamicCast_bSuccess3, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue4, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI4, bool K2Node_DynamicCast_bSuccess4, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue5, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI5, bool K2Node_DynamicCast_bSuccess5, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue6, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI6, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue7, VehicleRefitTipsUI_C* K2Node_DynamicCast_AsVehicle_Refit_Tips_UI7, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_EqualEqual_IntInt_ReturnValue6);// 0x2bbd2f4
	WidgetComponent* Widget;//[Offset: 0x2e4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 4]
	VehicleRefitTipsUI_C* tempTipsUI;//[Offset: 0x2ec, Size: 4]
	int tipState;//[Offset: 0x2f0, Size: 4]

--------------------------------
Class: VehicleRefitTipsUI_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* Animation_FadeInToTransparent;//[Offset: 0x1b8, Size: 4]
	WidgetAnimation* Animation_HideOutFromTransparent;//[Offset: 0x1bc, Size: 4]
	WidgetAnimation* Animation_Hide;//[Offset: 0x1c0, Size: 4]
	WidgetAnimation* Animation_FadeOutToTransparent;//[Offset: 0x1c4, Size: 4]
	WidgetAnimation* Animation_FadeInFromTransparent;//[Offset: 0x1c8, Size: 4]
	WidgetAnimation* Animation_HideOutFrom1To0;//[Offset: 0x1cc, Size: 4]
	WidgetAnimation* TipsBling;//[Offset: 0x1d0, Size: 4]
	Button* Button;//[Offset: 0x1d4, Size: 4]
	Image* Image;//[Offset: 0x1d8, Size: 4]
	Image* Image;//[Offset: 0x1dc, Size: 4]
	Image* Image;//[Offset: 0x1e0, Size: 4]
	int SlotID;//[Offset: 0x1e4, Size: 4]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0xdc, Size: 4]
	ButtonStyle WidgetStyle;//[Offset: 0xe0, Size: 696]
	LinearColor ColorAndOpacity;//[Offset: 0x398, Size: 16]
	LinearColor BackgroundColor;//[Offset: 0x3a8, Size: 16]
	byte ClickMethod;//[Offset: 0x3b8, Size: 1]
	byte TouchMethod;//[Offset: 0x3b9, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	float nClickCd;//[Offset: 0x3bc, Size: 4]
	bool bTouchPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	delegate OnClicked;//[Offset: 0x3c4, Size: 12]
	delegate OnPressed;//[Offset: 0x3d0, Size: 12]
	delegate OnReleased;//[Offset: 0x3dc, Size: 12]
	delegate OnHovered;//[Offset: 0x3e8, Size: 12]
	delegate OnUnhovered;//[Offset: 0x3f4, Size: 12]
	delegate OnPressedParam;//[Offset: 0x400, Size: 12]
	delegate OnMouseButtonDownEvent;//[Offset: 0x410, Size: 16]
	enum OnClickSoundType;//[Offset: 0x420, Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x38713bc
	void SetStyle(out const ButtonStyle InStyle);// 0x38712bc
	static void SetOnClickSound(delegate onSound);// 0x3871220
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x38711a4
	void SetClickSoundType(enum onSoundType);// 0x387112c
	void SetClickMethod(byte InClickMethod);// 0x38710b4
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3871038
	void Release();// 0x3871024
	void OnButtonSoundEvent__DelegateSignature(byte Sound);// 0x2bbd2f4
	bool IsPressed();// 0x3870ffc

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 152]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 152]
	SlateBrush Pressed;//[Offset: 0x138, Size: 152]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 152]
	Margin NormalPadding;//[Offset: 0x268, Size: 16]
	Margin PressedPadding;//[Offset: 0x278, Size: 16]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 24]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 24]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 4]

--------------------------------
Class: Global_Bp_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 4]
	void InitFireGyroSensibilitySettingData(SettingConfig_C* ServerSettingConfig);// 0x2bbd2f4
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void InitMirrorObjMapPickupSetting(SettingConfig_C* ServerSettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5);// 0x2bbd2f4
	void InitThrowObjMapPickupSetting(SettingConfig_C* ServerSettingConfig, int CallFunc_Clamp_ReturnValue, int CallFunc_Clamp_ReturnValue2, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4);// 0x2bbd2f4
	void InitDrugMapPickupSetting(SettingConfig_C* ServerSettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7);// 0x2bbd2f4
	void InitBasicSettingData(SettingConfig_C* ServerSettingConfig);// 0x2bbd2f4
	void InitPickupSettingData_XT(SettingConfig_C* SettingConfig);// 0x2bbd2f4
	void InitPickupSettingData(SettingConfig_C* ServerSettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bbd2f4
	void InitSensibilitySettingData(SettingConfig_C* ServerSettingConfig);// 0x2bbd2f4
	void SetGrenadeDefaultPickValue(int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7, int ___int_Variable8, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void InitMapFromCBToES(GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bbd2f4
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x2bbd2f4
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bbd2f4
	void LoadSettingConfigFromSlot(bool CallFunc_DoesSaveGameExist_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void UpdateBigHandOperateRedPoint(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void SetPostProcessSettings(int ID, float Time, bool isReverse, bool isClosing, int queryTableID);// 0x2bbd2f4
	void DestroyLobbyCameras();// 0x2bbd2f4
	void GetShadowDistanceScale(float CallFunc_GetConsoleVariableFloatValue_ReturnValue);// 0x2bbd2f4
	void SetShadowDistanceScale(FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bbd2f4
	void ShowItemPreviewPress();// 0x2bbd2f4
	void ShowItemPreviewClick(int ItemId);// 0x2bbd2f4
	void HideLobbyCamera(GameInstance* CallFunc_GetGameInstance_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue);// 0x2bbd2f4
	void ShowLobbyCamera(FString ___string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, int CallFunc_LVarToInt_ReturnValue);// 0x2bbd2f4
	void TryLoadAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue, bool CallFunc_GetIsAdvertiseLoad_ReturnValue);// 0x2bbd2f4
	void SaveAnniversaryNeedShow(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void GetAnniversaryNeedShow();// 0x2bbd2f4
	void SaveResidentEvilNeedShow(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void GetResidentEvilNeedShow();// 0x2bbd2f4
	void SaveLobbySkinID(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void SaveChristmasNeedShow(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void GetChristmasNeedShow();// 0x2bbd2f4
	void SaveRechargePayPos(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void GetRechargePayPos();// 0x2bbd2f4
	void SaveMallShow10Animation(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bbd2f4
	void GetMallShow10Animation();// 0x2bbd2f4
	void GetLocalizeStringWithNum(FString CallFunc_GetLocalizeStringWithNum_ReturnValue);// 0x2bbd2f4
	void GetLobbySkinIDAndBgmID();// 0x2bbd2f4
	void SwitchLobbyMeshBg();// 0x2bbd2f4
	void SwitchWarzoneCamera(bool CallFunc_SwitchLobbyCameraByIndex_success);// 0x2bbd2f4
	void LoadAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue);// 0x2bbd2f4
	void PlayAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue);// 0x2bbd2f4
	void SetGlobalConfigData(FString opKey, PlayerPrefs_C* playerprefs, bool CallFunc_SaveData_SaveDataState, bool K2Node_SwitchInteger_CmpSuccess, PlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs, bool CallFunc_IsValid_ReturnValue);// 0x2bbd2f4
	void GetGlobalConfigData(FString opKey, PlayerPrefs_C* playerprefs, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, float CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, int CallFunc_Map_Find_Value4, bool CallFunc_Map_Find_ReturnValue4, PlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs);// 0x2bbd2f4
	void SwitchSceneCameraByIndexLua(bool CallFunc_SwitchLobbyCameraByIndex_success);// 0x2bbd2f4
	void SwitchCameraFarImmediate(bool CallFunc_SwitchLobbyCameraByIndex_success);// 0x2bbd2f4
	void SwitchWarzoneBG();// 0x2bbd2f4
	void GetDragDropWidget(int dragDropType);// 0x2bbd2f4
	void GetRankTexture(int rankIntegral, out Texture2D* Output, FString ___string_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, FString CallFunc_LVarToString_ReturnValue, FString CallFunc_LVarToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_RankIntegralLevel_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_GetRankIntegralSmallIcon_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetCorpsShopRedPoint(PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs);// 0x2bbd2f4
	void GetCorpsIconTexture(int IconID, out Texture2D* Value, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BP_STRUCT_CorpsBadge_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void GetFrameTexture(int frameLevel, out Texture2D* Output, <FString,Texture2D*> frameTextureMap, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_AvatarFrame_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void ShowHelpshiftConversion(bool CallFunc_IsHelpshiftEnable4CurrentChannel_ReturnValue, LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2);// 0x2bbd2f4
	void EnterCreateRoleDelay(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x2bbd2f4
	void EnterCreateRole(TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x2bbd2f4
	void EnterFightStopMusic(int CallFunc_PostEventAtLocation_ReturnValue);// 0x2bbd2f4
	void EventAndroidQuitGame(LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void QuitGame(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void EnterLobby(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x2bbd2f4
	void EnterLogin(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x2bbd2f4
	void Construct();// 0x2bbd2f4
	void LockLobbyMaxFps();// 0x2bbd2f4
	void RecoverMaxFps();// 0x2bbd2f4
	void SwitchLobbySkin();// 0x2bbd2f4
	void ExecuteUbergraph_Global_Bp(int EntryPoint, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BP_STRUCT_LobbySceneSkinTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_LobbySceneSkinTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue3, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue4, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x2bbd2f4
	SettingConfig_C* SettingConfigObject;//[Offset: 0x30c, Size: 4]
	<FString,Texture2D*> corpsIconTextureMap;//[Offset: 0x310, Size: 60]
	bp_global_C* bp_global;//[Offset: 0x34c, Size: 4]
	<FString,Texture2D*> rankTextureMap;//[Offset: 0x350, Size: 60]
	<int,UserWidget*> dragDropItemMap;//[Offset: 0x38c, Size: 60]
	bool isPostProcessVolumeInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	PostProcessVolume* postProcessClassic;//[Offset: 0x3cc, Size: 4]
	CameraPostProcessActor_C* cameraPostProcessActor;//[Offset: 0x3d0, Size: 4]

--------------------------------
Class: IMSDKHelper.Object
	bool isBindFB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isBindGPGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool isBindGP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBindGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool isBindVK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool isBindTwitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool isBindWeChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool isBindLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool isBindQQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool isBindApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool isBindUnifiedAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool isBindHMS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool isBindDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int iBindFBRetCode;//[Offset: 0x2c, Size: 4]
	int iBindFBThirdRetCode;//[Offset: 0x30, Size: 4]
	FString strBindFBUserName;//[Offset: 0x34, Size: 12]
	int iBindGPGCRetCode;//[Offset: 0x40, Size: 4]
	int iBindGPGCThirdRetCode;//[Offset: 0x44, Size: 4]
	FString strBindGPGCUserName;//[Offset: 0x48, Size: 12]
	FString strBindTwitterUserName;//[Offset: 0x54, Size: 12]
	FString strBindWeChatUserName;//[Offset: 0x60, Size: 12]
	FString strBindVKUserName;//[Offset: 0x6c, Size: 12]
	FString strBindLineUserName;//[Offset: 0x78, Size: 12]
	FString strBindQQUserName;//[Offset: 0x84, Size: 12]
	FString strBindAppleUserName;//[Offset: 0x90, Size: 12]
	FString strBindUnifiedAccountUserName;//[Offset: 0x9c, Size: 12]
	FString strBindHMSUserName;//[Offset: 0xa8, Size: 12]
	FString strBindDiscordUserName;//[Offset: 0xb4, Size: 12]
	int iDeleteAccountRetCode;//[Offset: 0xc0, Size: 4]
	int iGenerateTransferCodeRetCode;//[Offset: 0xc4, Size: 4]
	FString GeneratedTransferCode;//[Offset: 0xc8, Size: 12]
	int iTransferRetCode;//[Offset: 0xd4, Size: 4]
	int iTransferThirdRetCode;//[Offset: 0xd8, Size: 4]
	FString inputTransferCode;//[Offset: 0xdc, Size: 12]
	int iSwitchAccountFBRetCode;//[Offset: 0xe8, Size: 4]
	int iSwitchAccountFBThirdRetCode;//[Offset: 0xec, Size: 4]
	int iSwitchAccountGPGCRetCode;//[Offset: 0xf0, Size: 4]
	int iSwitchAccountGPGCThirdRetCode;//[Offset: 0xf4, Size: 4]
	bool bGCQuietSwitchAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	void Transfer();// 0x1f4cfe0
	void StartNewGame();// 0x1f4cfe0
	void SetUserID(FString userId);// 0x26d32a8
	void SetNoAuthOpenid(FString OpenID);// 0x26d3150
	void SetIMSDKEnv(int iEnv);// 0x26d30d8
	void SetAdvertiseUnit(FString unitID);// 0x26d2f80
	void SaveLastIMSDKChannelID(int channelId);// 0x26d2f08
	void RequestVerifyCode(FString InPhoneOrEmail, int InAccountType, int InUseForType, FString InPhoneAreaCode, FString InLanuageCode, FString InExtraJson);// 0x26d2c2c
	void ReqBindInfo();// 0x1f4cfe0
	void PlayAdvertise();// 0x26d2c18
	void ModifyAccountInfo(FString InAccount, int InAccountType, int InVerifyType, FString InVerifyData, FString InPhoneAreaCode, FString InLanuageCode, FString InMondifyToAccount, int InModifyAccountType, FString InModifyVerifyCode, FString InModifyPhoneAreaCode, FString InExtraJson);// 0x26d26dc
	void LoadAdvertise();// 0x26d26c8
	bool IsEqualCurLoginPlatform(FString strChannel);// 0x26d2568
	bool isBindFBOrGPGC();// 0x26d2540
	bool IsAlreadyBindWeChat();// 0x26d2518
	bool IsAlreadyBindVK();// 0x26d24f0
	bool IsAlreadyBindUnifiedAccount();// 0x26d24c8
	bool IsAlreadyBindTwitter();// 0x26d24a0
	bool IsAlreadyBindQQ();// 0x26d2478
	bool IsAlreadyBindLine();// 0x26d2450
	bool IsAlreadyBindHMS();// 0x26d2428
	bool IsAlreadyBindGPGC();// 0x26d2400
	bool IsAlreadyBindGooglePlay();// 0x26d23d8
	bool IsAlreadyBindGameCenter();// 0x26d23b0
	bool IsAlreadyBindFB();// 0x26d2388
	bool IsAlreadyBindDiscord();// 0x26d2360
	bool IsAlreadyBindApple();// 0x26d2338
	void GetShortUrl(FString URL, FString Mask, FString extra);// 0x26d1fb0
	enum GetPlatformType();// 0x26d1f88
	FString GetOpenId();// 0x26d1ec8
	int GetLastIMSDKChannelID();// 0x26d1ea0
	bool GetIsAdvertiseVaild();// 0x26d1e78
	bool GetIsAdvertiseLoadSuccess();// 0x26d1e50
	bool GetIsAdvertiseLoad();// 0x26d1e28
	static IMSDKHelper* GetInstance();// 0x26d1e00
	int GetGCloudChannelID();// 0x26d1dd8
	FString GetCurLoginPlatform();// 0x26d1d18
	void GetBindInfo();// 0x26d1d04
	void GetBindFBRetCode();// 0x26d1cf0
	int GetBindCount();// 0x26d1cc8
	void GenerateTransferCode();// 0x1f4cfe0
	void CopyTransferCodeToClipboard();// 0x26d1cb4
	int ConvertStrToIMSDKChannel(FString strChannel);// 0x26d1b54
	FString ConvertIMSDKChannelToStr(int imsdkChannel);// 0x26d1a4c
	void CheckVerifyCodeValid(FString InAccount, int InAccountType, FString InPhoneAreaCode, FString InVerifyCode, int InCodeType, FString InLanuageCode, FString InExtraJson);// 0x26d16ec
	void CheckIsRegisted(FString InAccount, int InAccountType, FString InPhoneAreaCode, FString InLanuageCode, FString InExtraJson);// 0x26d1458
	void ChangePassword(FString InAccount, int InAccountType, FString InVerifyCode, FString InNewPassword, FString InAreaCode, FString InLangType, FString InExtraJson);// 0x26d10b4
	void BuglySetAppVersion(FString Version);// 0x26d0f5c
	void BuglyPutUserData(FString Key, FString Value);// 0x26d0cec
	void BuglyPostException(const int Category, FString Name, FString Reason, FString[] stacks, <FString,FString> extras, bool Exit);// 0x26d06a0
	void BuglyLog(int Level, FString Tag, FString Log);// 0x26d03e8
	void BindWeChat();// 0x26d03d4
	void BindVK();// 0x26d03c0
	void BindUnifiedAccount(FString InExtraJson);// 0x26d0304
	void BindTwitter();// 0x26d02f0
	void BindQQ();// 0x26d02dc
	void BindLine();// 0x26d02c8
	void BindHMS();// 0x26d02b4
	void BindGPGC();// 0x26d02a0
	void BindFB();// 0x26d028c
	void BindDiscord();// 0x26d0278
	void BindApple();// 0x26d0264

--------------------------------
Class: PlayerPrefs_C.SaveGame.Object
	void SetPopupPolicyVersion(int PolicyVersion, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetGuaranteeFlag(bool clicked, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetGuaranteeClickFlag(out bool clicked);// 0x2bbd2f4
	void GetDecomposeIndexTriggerTime(out int DecomposeTriggerTim);// 0x2bbd2f4
	void SetDecomposeIndexTriggerTime(int TimeStamp, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetClickTimeAnniversary(FString UId, int Time, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetClickTimeAnniversary(FString UId, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void GetCliickVehicleAcitivtyGuideExchange(FString Key, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetCliickVehicleAcitivtyGuideExchange(FString Key, bool isClick, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetClickTimeIceLucky(int Time, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetClickTimeIceLucky(FString UUID, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetIsVNGAdult(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetIsFirstTimeShowPrime(out bool IsfirstTimeOpenPrime);// 0x2bbd2f4
	void SetIsFirstTimeShowPrime(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetHasClickHalloweenExchange(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetHasClickHalloweenExchange(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetClickTimeHalloweenVehicle(int Time, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetClickTimeHalloweenVehicle(FString UUID, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void GetFaceInfoClickedIDAndTime(FString Faceid, out FString TimeStamp, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetFaceInfoClickedIDAndTime(FString Faceid, FString ___string_Variable, bool CallFunc_SaveData_SaveDataState, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, int CallFunc_LVarToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bbd2f4
	void GetCursorFaceInfoID(out int CursorFaceInfoID);// 0x2bbd2f4
	void SetCursorFaceInfoID(int LastFace, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetHasClickInviteTeamAct(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetHasClickInviteTeamAct(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void GetHasClickUPassAct(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetHasClickUPassAct(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetShowSwitchSecondLanguageNextTime(DateTime DateTime, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetShowSwitchSecondLanguageNextTime(out DateTime DateTime);// 0x2bbd2f4
	void GetLoginFrequency(out int loginfreq);// 0x2bbd2f4
	void SetLoginFrequency(int CurrentDay, bool CallFunc_SaveData_SaveDataState, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SaveData_SaveDataState2);// 0x2bbd2f4
	void GetAirDropTime(FString UId, out int outAirDropTime, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bbd2f4
	void SetAirDropTime(int InTime, FString UId, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetMystery2LastTime(int Time, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetStoreGiftBoxList(out int[] BoxList, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void GetClickTimeAboutBind(FString UId, out int TimeNotBind, out int TimeBind, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bbd2f4
	void SetClickTimeAboutBind(int TimeNotBind, int TimeBind, FString UId, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void IsEqualCurID(int ids, out bool Has, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bbd2f4
	void SetNewsIds(int ids, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetMallSeeDict(<int,bool> Dict, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetStoreBosList(out int[] BoxList, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetCorpsShopRedPoint(int coprsLevel, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetFirstEnterMall(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetMysteryLastTime(int Time, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void RejectUserAgreement(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void AcceptUserAgreement(int newVersion, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void ServerListClick(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void HasCloseLocation(bool UId, out bool Has, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x2bbd2f4
	void SetCloseLocation(bool CloseLocation, FString UId, bool CallFunc_SaveData_SaveDataState, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Remove_ReturnValue);// 0x2bbd2f4
	void HasNearByNewTips(FString UId, out bool Has, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x2bbd2f4
	void SetNearByNewTipsRead(FString UId, bool CallFunc_HasNearByNewTips_Has, int CallFunc_Array_Add_ReturnValue, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetYXXYRedPoint(int isRed, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void AcceptGuestWarning(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void RejectPolicy(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void AcceptPolicy(int newVersion, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetFirstInLobby(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetTime(int arg, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void ClearCount(bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	void SetCount(int Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SaveData_SaveDataState);// 0x2bbd2f4
	SaveGame* LoadData(SaveGame* CallFunc_LoadGameFromSlot_ReturnValue);// 0x2bbd2f4
	void SaveData(out bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);// 0x2bbd2f4
	int LoginCount;//[Offset: 0x20, Size: 4]
	int LoginTime;//[Offset: 0x24, Size: 4]
	bool FirstInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool GuestWarningAccepted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int YXXYRedPoint;//[Offset: 0x2c, Size: 4]
	FString[] NearByNewTipsList;//[Offset: 0x30, Size: 12]
	<FString> CloseLocationList;//[Offset: 0x3c, Size: 60]
	bool QuestionDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool ServerListClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	int MysteryLastTime;//[Offset: 0x7c, Size: 4]
	bool notFirstEnterMall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int CoprsShopLevelRedPoint;//[Offset: 0x84, Size: 4]
	int[] StoreBoxList;//[Offset: 0x88, Size: 12]
	<int,bool> HasSeeShopItemDict;//[Offset: 0x94, Size: 60]
	int NewsIds;//[Offset: 0xd0, Size: 4]
	int LobbyNoticeID;//[Offset: 0xd4, Size: 4]
	int UserAgreementAcceptedVersion;//[Offset: 0xd8, Size: 4]
	int PrivacyPolicyAcceptedVersion;//[Offset: 0xdc, Size: 4]
	int ClickTimeNotBind;//[Offset: 0xe0, Size: 4]
	int ClickTimeBind;//[Offset: 0xe4, Size: 4]
	<FString,int> UidClickTimeNotBind;//[Offset: 0xe8, Size: 60]
	<FString,int> UidClickTimeBind;//[Offset: 0x124, Size: 60]
	int[] StoreGiftBoxList;//[Offset: 0x160, Size: 12]
	bool AchievementInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	int Mystery2LastTime;//[Offset: 0x170, Size: 4]
	<FString,FString> ConfigStringMap;//[Offset: 0x174, Size: 60]
	<FString,int> ConfigIntMap;//[Offset: 0x1b0, Size: 60]
	<FString,float> ConfigFloatMap;//[Offset: 0x1ec, Size: 60]
	<FString,bool> ConfigBoolMap;//[Offset: 0x228, Size: 60]
	<FString,int> UidAirDropTime;//[Offset: 0x264, Size: 60]
	int LoginFrequency;//[Offset: 0x2a0, Size: 4]
	int CurrentDay;//[Offset: 0x2a4, Size: 4]
	FString[] SecondLanguage;//[Offset: 0x2a8, Size: 12]
	DateTime ShowSwitchSecondLanguageNextTime;//[Offset: 0x2b8, Size: 8]
	<FString,bool> HasClickUPassAct;//[Offset: 0x2c0, Size: 60]
	<FString,bool> HasClickInviteTeamAct;//[Offset: 0x2fc, Size: 60]
	int CursorFaceInfoID;//[Offset: 0x338, Size: 4]
	<FString,FString> FaceInfoClickedIDAndTime;//[Offset: 0x33c, Size: 60]
	bool LanguagePromptState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool HasTipLeagueGameSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	<FString,int> ClickTimeHalloweenVehicle;//[Offset: 0x37c, Size: 60]
	<FString,bool> HasClickHalloweenExchange;//[Offset: 0x3b8, Size: 60]
	FString primeClicktimestamp;//[Offset: 0x3f4, Size: 12]
	bool isVNGadult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	<FString,int> ClickTimeIceLucky;//[Offset: 0x404, Size: 60]
	bool IsFirstTimeShowPrime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	<FString,bool> HasCliickVehicleAcitivtyGuide;//[Offset: 0x444, Size: 60]
	<FString,int> ClickTimeAnniversary;//[Offset: 0x480, Size: 60]
	int DecomposeTriggerTime;//[Offset: 0x4bc, Size: 4]
	bool haveClickGuaranteeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	int LastEnterExcitingTourTimeSec;//[Offset: 0x4c4, Size: 4]
	bool IfHasShowExcitingTourTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	int PrivacyPolicyPopupVersion;//[Offset: 0x4cc, Size: 4]

--------------------------------
Class: BP_STRUCT_RankIntegralLevel_type
	int IntegralType_0_5DB652C74A6C2C5E4B1123A62ADC38A8;//[Offset: 0x0, Size: 4]
	FString IntegralTypeName_1_37066B404ACB346A9C01D683DD3A29FB;//[Offset: 0x4, Size: 12]
	FString FrameID_2_FA51FC0F47FB8AEB41067AB1A00E044D;//[Offset: 0x10, Size: 12]
	int MinIntegral_3_8BCC404B4E31165611A2F3A5DCA7F9EB;//[Offset: 0x1c, Size: 4]
	int Level_4_4248BF2F4F85F33AF1FFF8B269550E92;//[Offset: 0x20, Size: 4]
	int IntegralTypeOrder_5_E1D966464BA0136A4682EA8533722D30;//[Offset: 0x24, Size: 4]
	FString Name_6_B98FA8AA4955E5E532285FA0BC38606D;//[Offset: 0x28, Size: 12]
	int NextIntegralScore_7_194CC840003BFCBD1B7B7E14029BE565;//[Offset: 0x34, Size: 4]
	int StarNum_8_045B8680677A2C3C3C50D91C069A9F6D;//[Offset: 0x38, Size: 4]
	FString BigIcon_9_55E7FAC04C1A035F0AEAB48904C9149E;//[Offset: 0x3c, Size: 12]
	FString SmallIcon_10_3B6D3480778CAC664F339B4106DA305E;//[Offset: 0x48, Size: 12]
	FString SubIcon_11_5BB640C031E57E65018BD3BD0684148E;//[Offset: 0x54, Size: 12]
	int NextSeasonIntegralScore_12_010B22802CC106BA61EB81370B236155;//[Offset: 0x60, Size: 4]
	FString BigMesh_13_2B197BC07A689F070AE3691404CAD658;//[Offset: 0x64, Size: 12]
	FString SubMaterial_14_0B216A40672064491BC4738C027A0AAC;//[Offset: 0x70, Size: 12]
	FString SubMesh_15_30E7C1C060341A0D018996830685D648;//[Offset: 0x7c, Size: 12]
	int IntegralTypeNew_18_76AFF480454B93902AC82C870452E0B7;//[Offset: 0x88, Size: 4]

--------------------------------
Class: BP_STRUCT_CorpsBadge_type
	FString BigIconPath_0_10CC26002C2272C4426923F90B6405C8;//[Offset: 0x0, Size: 12]
	int ID_1_5727FF4053D9C66568AE85A909693024;//[Offset: 0xc, Size: 4]
	FString IconPath_2_038F818050E2694643DA924F014A58A8;//[Offset: 0x10, Size: 12]
	FString Name_3_56563C4042608BF33377F2DB0931BF55;//[Offset: 0x1c, Size: 12]
	int TabPosi_4_17AFE880638188BE77062DBF05E20589;//[Offset: 0x28, Size: 4]
	int UnLockLv_5_04857F8051FE2B7A53B16D630C5CAF66;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BP_STRUCT_AvatarFrame_type
	int Type_0_1A0A9F0743331BBE49AADB988DC87C90;//[Offset: 0x0, Size: 4]
	FString Desc_1_AC45D7034D7DDDC90D52E19BF6D66EF9;//[Offset: 0x4, Size: 12]
	FString Name_2_401DF90F47F3FF259DF5AD890925B071;//[Offset: 0x10, Size: 12]
	int ID_3_831225F64111B05931B2D0B74884A6BD;//[Offset: 0x1c, Size: 4]
	FString DescGet_4_E78748484096828FA71D5E85901FD57B;//[Offset: 0x20, Size: 12]
	FString IconBig_5_82F9A60A40DA032B376321A0896F07F2;//[Offset: 0x2c, Size: 12]
	FString Icon_6_7C7ADBE24A1E2C45A54BC7BD91D84759;//[Offset: 0x38, Size: 12]
	FString DescTime_7_684743074A1D090755252DAA2F6832B5;//[Offset: 0x44, Size: 12]
	int AppleAuditHide_8_C3DCAE874E4C89FB670303A48501283C;//[Offset: 0x50, Size: 4]
	int DefaultDisplay_9_43871EC03BAE8EB1607A95390AB61819;//[Offset: 0x54, Size: 4]
	FString ShowTime_10_6F3484001A56164C305DF94C07184815;//[Offset: 0x58, Size: 12]

--------------------------------
Class: bp_global_C.LuaClassObj.LuaContext.Actor.Object
	void EventSetInfo_Push_NoFetch();// 0x2bbd2f4
	void EventSetInfo_Push();// 0x2bbd2f4
	void EventGlobalCloseItemTips_NoFetch();// 0x2bbd2f4
	void EventGlobalCloseItemTips();// 0x2bbd2f4
	void EventCheckEUChatRestriction_NoFetch();// 0x2bbd2f4
	void EventCheckEUChatRestriction();// 0x2bbd2f4
	void EventChatCheckBan_NoFetch();// 0x2bbd2f4
	void EventChatCheckBan();// 0x2bbd2f4
	void EventSendBAReport_NoFetch();// 0x2bbd2f4
	void EventSendBAReport();// 0x2bbd2f4
	void EventClickLobbyEventGemReport_NoFetch();// 0x2bbd2f4
	void EventClickLobbyEventGemReport();// 0x2bbd2f4
	void EventOnLobbyCoverCamera_NoFetch();// 0x2bbd2f4
	void EventOnLobbyCoverCamera();// 0x2bbd2f4
	void EventShowPlatWXStartup_NoFetch();// 0x2bbd2f4
	void EventShowPlatWXStartup();// 0x2bbd2f4
	void EventShowPlatIconTips_NoFetch();// 0x2bbd2f4
	void EventShowPlatIconTips();// 0x2bbd2f4
	void EventShowLoadAdvertiseError_NoFetch();// 0x2bbd2f4
	void EventShowLoadAdvertiseError();// 0x2bbd2f4
	void EventCheckIfMenuOpen_NoFetch();// 0x2bbd2f4
	void EventCheckIfMenuOpen();// 0x2bbd2f4
	void EventFetchNationSwitch_NoFetch();// 0x2bbd2f4
	void EventFetchNationSwitch();// 0x2bbd2f4
	void EventGlobalUseItem_NoFetch();// 0x2bbd2f4
	void EventGlobalUseItem();// 0x2bbd2f4
	void EventSwitchLobbySkinCompleted_NoFetch();// 0x2bbd2f4
	void EventSwitchLobbySkinCompleted();// 0x2bbd2f4
	void EventGotoItemPreviewClick_NoFetch();// 0x2bbd2f4
	void EventGotoItemPreviewClick();// 0x2bbd2f4
	void EventGotoItemPreviewPress_NoFetch();// 0x2bbd2f4
	void EventGotoItemPreviewPress();// 0x2bbd2f4
	void EventAndroidQuitGame_NoFetch();// 0x2bbd2f4
	void EventAndroidQuitGame();// 0x2bbd2f4
	void EventComMsgBoxSluaClickUrl_NoFetch();// 0x2bbd2f4
	void EventComMsgBoxSluaClickUrl();// 0x2bbd2f4
	void EventJumpUrl_NoFetch();// 0x2bbd2f4
	void EventJumpUrl();// 0x2bbd2f4
	void EventFetchInfo_NoFetch();// 0x2bbd2f4
	void EventFetchInfo();// 0x2bbd2f4
	void EventOnLobbyRecoverCamera_NoFetch();// 0x2bbd2f4
	void EventOnLobbyRecoverCamera();// 0x2bbd2f4
	void EventSendClickGemReport_NoFetch();// 0x2bbd2f4
	void EventSendClickGemReport();// 0x2bbd2f4
	void EventSlapJumpUrl_NoFetch();// 0x2bbd2f4
	void EventSlapJumpUrl();// 0x2bbd2f4
	void EventGlobalShowItemTips_Push_NoFetch();// 0x2bbd2f4
	void EventGlobalShowItemTips_Push();// 0x2bbd2f4
	void EventChatBanInfo_NoFetch();// 0x2bbd2f4
	void EventChatBanInfo();// 0x2bbd2f4
	void EventShowPlatQQStartup_NoFetch();// 0x2bbd2f4
	void EventShowPlatQQStartup();// 0x2bbd2f4
	void EventSetPlayedCG_NoFetch();// 0x2bbd2f4
	void EventSetPlayedCG();// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x310, Size: 4]
	int BP_StartUpType;//[Offset: 0x314, Size: 4]
	FString BP_Global_Url;//[Offset: 0x318, Size: 12]
	int BP_GlobalHelpTips_StringID;//[Offset: 0x324, Size: 4]
	int BP_GlobalTips_ItemCount;//[Offset: 0x328, Size: 4]
	FString BP_GlobalConfigOperateKey;//[Offset: 0x32c, Size: 12]
	BP_STRUCT_GlobalTips_TimeInfo BP_STRUCT_GlobalTips_TimeInfo;//[Offset: 0x338, Size: 16]
	FString BP_Global_AdvertiseUnitID;//[Offset: 0x348, Size: 12]
	int BP_GlobalTips_PatternID;//[Offset: 0x354, Size: 4]
	float BP_Global_ShadowDistanceScale_f;//[Offset: 0x358, Size: 4]
	bool BP_Global_IsChristmasNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	int BP_GlobalTips_ItemID;//[Offset: 0x360, Size: 4]
	int BP_GlobalConfigTempIntValue;//[Offset: 0x364, Size: 4]
	bool BP_HadPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool BP_ShouldRequestChatPrivacy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	BP_STRUCT_GlobalTips_Pos BP_STRUCT_GlobalTips_Pos;//[Offset: 0x36c, Size: 8]
	bool BP_Global_IS_Show_10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool BP_IsAppleAudit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	int BP_BA_BUTTON_TYPE;//[Offset: 0x378, Size: 4]
	int BP_BA_REASON;//[Offset: 0x37c, Size: 4]
	FString BP_Localize_StringWithNum_String2;//[Offset: 0x380, Size: 12]
	BP_STRUCT_GlobalHelpTips_Pos BP_STRUCT_GlobalHelpTips_Pos;//[Offset: 0x38c, Size: 8]
	FString BP_Localize_StringWithNum_ReturnStr;//[Offset: 0x394, Size: 12]
	int BP_CHECK_MENU_OPEN_ID;//[Offset: 0x3a0, Size: 4]
	bool BP_Global_AndroidKey_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	BP_STRUCT_NATION_SWITCH BP_STRUCT_NATION_SWITCH;//[Offset: 0x3a5, Size: 4]
	float BP_GlobalConfigTempFloatValue_f;//[Offset: 0x3ac, Size: 4]
	bool BP_GlobalConfigTempBooleanValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	int BP_GameGender;//[Offset: 0x3b4, Size: 4]
	int BP_ChatBan;//[Offset: 0x3b8, Size: 4]
	int BP_Global_AvatarPreviewTarget;//[Offset: 0x3bc, Size: 4]
	int BP_GlobalSwitchCameraIndex;//[Offset: 0x3c0, Size: 4]
	int BP_Global_Cur_Lobby_Skin_Id;//[Offset: 0x3c4, Size: 4]
	int BP_Global_CorpsShopLevelForRedPiont;//[Offset: 0x3c8, Size: 4]
	FString BP_GEM_REPORT_SUBEVENT;//[Offset: 0x3cc, Size: 12]
	int BP_Share_Platform;//[Offset: 0x3d8, Size: 4]
	bool BP_GlobalTips_ShowLimitIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	int BP_Localize_StringWithNum_NumStringIndex;//[Offset: 0x3e0, Size: 4]
	int BP_Global_PreviewItemId;//[Offset: 0x3e4, Size: 4]
	bool BP_Global_IsAnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	int BP_GlobalTips_ColorID;//[Offset: 0x3ec, Size: 4]
	int BP_GlobalSwitchLobbyMeshBgIndex;//[Offset: 0x3f0, Size: 4]
	int BP_Global_Setting_LobbySkinId;//[Offset: 0x3f4, Size: 4]
	FString BP_GlobalConfigTempStringValue;//[Offset: 0x3f8, Size: 12]
	int BP_Localize_StringWithNum_id;//[Offset: 0x404, Size: 4]
	FString BP_GEM_REPORT_PARA1;//[Offset: 0x408, Size: 12]
	int BP_Platform;//[Offset: 0x414, Size: 4]
	bool BP_Global_Shop_Animation_Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	int BP_GlobalConfigOperateType;//[Offset: 0x41c, Size: 4]
	FString BP_Localize_StringWithNum_String3;//[Offset: 0x420, Size: 12]
	FString BP_Global_RechargePayPos;//[Offset: 0x42c, Size: 12]
	int BP_Global_Last_Lobby_Skin_Id;//[Offset: 0x438, Size: 4]
	FString BP_Localize_StringWithNum_String4;//[Offset: 0x43c, Size: 12]
	FString BP_Global_TouchTitleString;//[Offset: 0x448, Size: 12]
	bool BP_EUChatRestriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool BP_Global_HasPufferID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	int BP_CurSceneCameraIndex;//[Offset: 0x458, Size: 4]
	float BP_Global_ShadowDistanceScale_Current_f;//[Offset: 0x45c, Size: 4]
	bool BP_Global_AdvertiseNeedShowtask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	FString BP_Localize_StringWithNum_String1;//[Offset: 0x464, Size: 12]
	FString BP_Global_SelfUID;//[Offset: 0x470, Size: 12]
	FString BP_Global_TouchTipString;//[Offset: 0x47c, Size: 12]
	int BP_Global_BackpackAvatarPreviewID;//[Offset: 0x488, Size: 4]
	bool BP_GlobalConfigOperateResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	int BP_played_cg;//[Offset: 0x490, Size: 4]
	int BP_Global_Setting_LobbyBgmId;//[Offset: 0x494, Size: 4]
	bool BP_IOS_CHECK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool BP_IS_EXTERNAL_CHANNEL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	bool BP_Global_IsResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 1]
	bool BP_CHECK_MENU_OPEN_RESULT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 1]
	FString BP_GLOBAL_USE_ITEM;//[Offset: 0x49c, Size: 12]
	FString BP_GEM_REPORT_PARA2;//[Offset: 0x4a8, Size: 12]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4b4, Size: 4]

--------------------------------
Class: BP_STRUCT_GlobalTips_TimeInfo
	bool is_limit_0_C44FFA274459A428B4E947B664175E8A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString time_s_1_F3B38E0D4CA07B5A44179194CBB4AC32;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_STRUCT_GlobalTips_Pos
	int x_0_BC95162242299DF7575384BF3165B2D9;//[Offset: 0x0, Size: 4]
	int y_1_7244EB0D4A9825ADADE0B99F4A4761CB;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_GlobalHelpTips_Pos
	int y_0_4DBA1E404EED75A173CEF46903C67CB9;//[Offset: 0x0, Size: 4]
	int x_1_4DB91E004EED75A073CEF46803C67CB8;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_NATION_SWITCH
	bool NationRankSwitch_0_90EC58964A07013E18D9C4A0C24C6D72;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool NationAllSwitch_1_FFDC7E7C4281022AAE40A5B03DD5CE4A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool NationBattleSwitch_2_DCD8C0084AAD46192D3CA48FD5FCC651;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool Updated_3_5B3974684ED721353E91AA966D7347A5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: BP_STRUCT_LobbySceneSkinTable_type
	FString SkinStreamLevelName_0_3781FCC026A707C5085B0B8D0763C135;//[Offset: 0x0, Size: 12]
	int SkinID_1_11FAE6C0633AFB313233DCF907356724;//[Offset: 0xc, Size: 4]
	int SkinStyleKey1_6_3E24BE404C85800940BF19450D807901;//[Offset: 0x10, Size: 4]
	int SkinStyleKey2_7_3E25BE804C85800A40BF19440D807902;//[Offset: 0x14, Size: 4]
	int SkinStyleKey3_8_3E26BEC04C85800B40BF19470D807903;//[Offset: 0x18, Size: 4]
	int SkinStyleKey4_9_3E27BF004C85800C40BF19460D807904;//[Offset: 0x1c, Size: 4]
	int SkinStyleKey5_10_3E28BF404C85800D40BF19410D807905;//[Offset: 0x20, Size: 4]
	int SkinStyleKey6_11_3E29BF804C85800E40BF19400D807906;//[Offset: 0x24, Size: 4]
	FString hallMaskPic1_12_547A3CC06D45501D04D1A1C60CD4F9A1;//[Offset: 0x28, Size: 12]
	FString hallMaskPic2_13_547B3D006D45501E04D1A1C50CD4F9A2;//[Offset: 0x34, Size: 12]
	FString hallMaskPic3_14_547C3D406D45501F04D1A1C40CD4F9A3;//[Offset: 0x40, Size: 12]
	int SkinStreamLevelSequence_15_44C54AC019B77F5B7D933C0F0B8CE785;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: CameraPostProcessActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 4]
	void UserConstructionScript();// 0x2bbd2f4
	void Timeline_LerpPPSettings__FinishedFunc();// 0x2bbd2f4
	void Timeline_LerpPPSettings__UpdateFunc();// 0x2bbd2f4
	void Event LerpPostProcessSettings(PostProcessVolume* currentPPVolumn, BP_STRUCT_CameraPostProcessSettings_type targetPPSettingsStruct, float Time, int ID, bool isReverse);// 0x2bbd2f4
	void ExecuteUbergraph_CameraPostProcessActor(int EntryPoint, PostProcessVolume* K2Node_CustomEvent_currentPPVolumn, BP_STRUCT_CameraPostProcessSettings_type K2Node_CustomEvent_targetPPSettingsStruct, float K2Node_CustomEvent_time, int K2Node_CustomEvent_id, bool K2Node_CustomEvent_isReverse, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, PostProcessSettings K2Node_MakeStruct_PostProcessSettings, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, FString CallFunc_Conv_FloatToString_ReturnValue3, float CallFunc_Lerp_ReturnValue6, float CallFunc_Lerp_ReturnValue7, FString CallFunc_Conv_FloatToString_ReturnValue4, float CallFunc_Lerp_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Lerp_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_Lerp_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Lerp_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7);// 0x2bbd2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e4, Size: 4]
	float Timeline_LerpPPSettings_104_7E99B53D425173C51E1B2D83BB82148A;//[Offset: 0x2e8, Size: 4]
	float Timeline_LerpPPSettings_103_7E99B53D425173C51E1B2D83BB82148A;//[Offset: 0x2ec, Size: 4]
	float Timeline_LerpPPSettings_102_7E99B53D425173C51E1B2D83BB82148A;//[Offset: 0x2f0, Size: 4]
	float Timeline_LerpPPSettings_101_7E99B53D425173C51E1B2D83BB82148A;//[Offset: 0x2f4, Size: 4]
	byte Timeline_LerpPPSettings__Direction_7E99B53D425173C51E1B2D83BB82148A;//[Offset: 0x2f8, Size: 1]
	TimelineComponent* Timeline_LerpPPSettings;//[Offset: 0x2fc, Size: 4]
	PostProcessVolume* currentPostProcessVolumn;//[Offset: 0x300, Size: 4]
	int isLerp;//[Offset: 0x304, Size: 4]
	byte[] depthOfFieldMethodArray;//[Offset: 0x308, Size: 12]
	float LerpAlpha;//[Offset: 0x314, Size: 4]
	bool isReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	PostProcessSettings previousPPSettingsStruct;//[Offset: 0x320, Size: 1328]

--------------------------------
Class: BP_STRUCT_CameraPostProcessSettings_type
	int ID_9_6DDED0804ABABB7E21825CAE0BFB83A4;//[Offset: 0x0, Size: 4]
	int Method_19_7777E5806E9E62D27DA90767044756D4;//[Offset: 0x4, Size: 4]
	bool HighQualityGaussianDoFOnMobile_8_767B59C049AE0B4B17E35358027731A5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString ApertureFstop_0_3C9D42407298D18B4EC4D6B2074E8A90;//[Offset: 0xc, Size: 12]
	FString FocalDistance_6_1FF851400B99AE5F6695D1370C4CBC35;//[Offset: 0x18, Size: 12]
	FString DepthBlurkmfor50_2_42A970C02AC0115B3D32FC2901718E90;//[Offset: 0x24, Size: 12]
	FString DepthBlurRadius_3_33EB49C0524E798F3CEE7CE20F937E73;//[Offset: 0x30, Size: 12]
	FString FocalRegion_7_782F7F8054963A12397464B409B73A8E;//[Offset: 0x3c, Size: 12]
	FString NearTransitionRegion_12_1B2B52803A553DC02302A3AD06774C4E;//[Offset: 0x48, Size: 12]
	FString FarTransitionRegion_5_528FD7405048D389193787430D33704E;//[Offset: 0x54, Size: 12]
	FString Scale_14_0CAF0740551A369F06C987A3082E2995;//[Offset: 0x60, Size: 12]
	FString MaxBokehSize_10_2B8677C059F3F4C101764A6805FEB5E5;//[Offset: 0x6c, Size: 12]
	FString NearBlurSize_11_43B99AC01DFD3E1B69D786E507F7FE15;//[Offset: 0x78, Size: 12]
	FString FarBlurSize_4_51911F8012AC9A8A40FAFE4C0BFCBA45;//[Offset: 0x84, Size: 12]
	FString Shape_15_26F1A9800A01877806E6CE8C082E57D5;//[Offset: 0x90, Size: 12]
	FString Occlusion_13_54D7390038BB10D2131FD7620784DE7E;//[Offset: 0x9c, Size: 12]
	FString ColorThreshold_1_21AC78403E9774ED643A78EC07242D24;//[Offset: 0xa8, Size: 12]
	FString SizeThreshold_16_1B4ADF4029CA57D70523D5C7070708F4;//[Offset: 0xb4, Size: 12]
	FString SkyDistance_17_00C0C5C07A9D118B796380C10885F6B5;//[Offset: 0xc0, Size: 12]
	FString VignetteSize_18_60EC6580565041B043CE534A091EC045;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: UAEMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorData
	float XOffset_15_335B6FB64E64691029499DB91D53AA1B;//[Offset: 0x0, Size: 4]
	FString XRotateLimit_16_7DCE96BC4B110EFA0168E382CB6609C3;//[Offset: 0x4, Size: 12]
	FString YRotateLimit_17_0404EC6E4BADBFF829934994775B2098;//[Offset: 0x10, Size: 12]
	bool NeedResetRotation_7_684BD15842498260989021B083E180BD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Rotator Rotator_10_F22B16E84D6EB79AB51C6C9294C0A08E;//[Offset: 0x20, Size: 12]
	Rotator InitRotate_12_2D3D2DC74733E25DF25F1E8EA6AD9A16;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BP_STRUCT_LobbyCameraInfo_type
	FString FieldOfView_0_774965C01E82608B78610A1F0CEEDE07;//[Offset: 0x0, Size: 12]
	FString CameraLocationWidth_1_2795B9402C37D69925FC607507CC5AB8;//[Offset: 0xc, Size: 12]
	FString CameraLocation_2_337EB9401C40211F6EB5E73A0F1A116E;//[Offset: 0x18, Size: 12]
	FString CameraScale_3_187545000777A7B8563DCE430BD94005;//[Offset: 0x24, Size: 12]
	FString CameraLocationX_4_0D8E2F407AB6F6691CDF865C01A117C8;//[Offset: 0x30, Size: 12]
	int CameraID_5_2E8DAE400C973D5F0716503A0A82BED4;//[Offset: 0x3c, Size: 4]
	FString BlendTime_6_48FF35C029EC8B7B17E35E2A01AA1EF5;//[Offset: 0x40, Size: 12]
	FString ProjectMode_7_05044FC04CBC5C8904E0C53F08075A45;//[Offset: 0x4c, Size: 12]
	FString CameraRotation_8_1901DF00292BF94210F0DE080C2A13CE;//[Offset: 0x58, Size: 12]
	FString CameraAnimationPath_9_4B7A7640586729291B2F6F2408CB7BE8;//[Offset: 0x64, Size: 12]
	FString CameraAnimationPathLong_10_3EB85A40709683A7360F690B0BE5FF37;//[Offset: 0x70, Size: 12]
	FString AvatarPosition_11_2DCEE5C039B936A35A436F3D04B414DE;//[Offset: 0x7c, Size: 12]
	FString AvatarPositionWidth_12_699EA5C07AF9251538B9AA9D0E76BAE8;//[Offset: 0x88, Size: 12]
	FString AvatarPositionLong_13_2F4DC9C079A02A0560B7794104E7A257;//[Offset: 0x94, Size: 12]
	FString LightLevelName_14_4980F50004BC70381F310B1E0DE28A45;//[Offset: 0xa0, Size: 12]
	FString SceneName_15_3B50D48067150C2E7CDC093801ABE845;//[Offset: 0xac, Size: 12]
	FString LightLevelNameLow_16_42AEE18036CF9E14443D542508A45D47;//[Offset: 0xb8, Size: 12]

--------------------------------
Class: BP_PlaneCharacter_C.PlaneCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x740, Size: 4]
	void AsyncChangePlaneAvatar(int InItemID);// 0x2bbd2f4
	void ChangePlaneAvatar(int InItemID);// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_BP_PlaneCharacter(int EntryPoint, int CallFunc_PostAkEvent_ReturnValue);// 0x2bbd2f4
	PlaneAvatarComponent_BP_C* PlaneAvatarComponent_BP;//[Offset: 0x744, Size: 4]
	SceneComponent* Scene;//[Offset: 0x748, Size: 4]
	CameraComponent* PlaneCamera;//[Offset: 0x74c, Size: 4]
	SpringArmComponent* PlaneSpringArm;//[Offset: 0x750, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x754, Size: 4]
	ParticleSystemComponent* ParticleSystem7;//[Offset: 0x758, Size: 4]
	ParticleSystemComponent* ParticleSystem6;//[Offset: 0x75c, Size: 4]
	ParticleSystemComponent* ParticleSystem5;//[Offset: 0x760, Size: 4]
	ParticleSystemComponent* ParticleSystem4;//[Offset: 0x764, Size: 4]
	ParticleSystemComponent* ParticleSystem3;//[Offset: 0x768, Size: 4]
	ParticleSystemComponent* P_Plan_tail_01;//[Offset: 0x76c, Size: 4]
	ParticleSystemComponent* P_Plan_light_green_01;//[Offset: 0x770, Size: 4]
	ParticleSystemComponent* P_Plan_light_red_02;//[Offset: 0x774, Size: 4]
	ParticleSystemComponent* P_Plan_light_red_01;//[Offset: 0x778, Size: 4]
	ParticleSystemComponent* P_Plan_light_blue_01;//[Offset: 0x77c, Size: 4]
	ParticleSystemComponent* ParticleSystem2;//[Offset: 0x780, Size: 4]
	ParticleSystemComponent* ParticleSystem1;//[Offset: 0x784, Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x788, Size: 4]
	ParticleSystemComponent* P_Plan_Propeller_01;//[Offset: 0x78c, Size: 4]
	AkComponent* Ak;//[Offset: 0x790, Size: 4]
	int planeResId;//[Offset: 0x794, Size: 4]

--------------------------------
Class: PlaneCharacter.Character.Pawn.Actor.Object
	SceneComponent* BannerRoot;//[Offset: 0x5f0, Size: 4]
	Texture2D* BannerTexture;//[Offset: 0x68c, Size: 4]
	int FlightNo;//[Offset: 0x690, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x694, Size: 4]
	SkeletalMesh* BannerSkeletalMesh;//[Offset: 0x698, Size: 40]
	AnimationAsset* BannerAnim;//[Offset: 0x6c0, Size: 40]
	StaticMesh* BannerStaticMesh;//[Offset: 0x6e8, Size: 40]
	SkeletalMeshComponent* BannerComp;//[Offset: 0x710, Size: 4]
	StaticMeshComponent* BannerStaticComp;//[Offset: 0x714, Size: 4]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x718, Size: 4]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x720, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x72c, Size: 12]
	int PlayerNum;//[Offset: 0x738, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x20ebfe0
	void OnRep_PlayerNum();// 0x20ebfcc
	void OnRep_GetHttpPlaneBannerRightImg();// 0x1f4cfe0
	void OnRep_GetHttpPlaneBannerLeftImg();// 0x1f4cfe0
	void OnRep_EnableBanner();// 0x1f4cfe0

--------------------------------
Class: PlaneAvatarComponent_BP_C.PlaneAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 4]
	BattleItemHandleBase* CreateItemAvatarHandle(int InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x2bbd2f4
	void BP_SetMatDissolve(float NewParam, CurveFloat* DissolveCurve, int ___int_Array_Index_Variable, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bbd2f4
	void BP_OnPlaneAvatarChanged();// 0x2bbd2f4
	BackpackPlaneAvatarHandle* GetPlaneAvatarHandle(int ItemId, BattleItemHandleBase* CallFunc_CreateItemAvatarHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackPlaneAvatarHandle* K2Node_DynamicCast_AsBackpack_Plane_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ReceiveTick(float DeltaSeconds);// 0x2bbd2f4
	void PlaneAvatarChanged();// 0x2bbd2f4
	void ExecuteUbergraph_PlaneAvatarComponent_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_DeltaSeconds, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2bbd2f4
	float ChangeDissolveTime;//[Offset: 0x2c4, Size: 4]
	bool BOpenDissolve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float DissolveValue;//[Offset: 0x2cc, Size: 4]

--------------------------------
Class: PlaneAvatarComponent.AvatarComponentBase.ActorComponent.Object
	ItemDefineID DefaultPlaneCfg;//[Offset: 0x1c0, Size: 24]
	delegate PlaneAvatarEqiuped;//[Offset: 0x1d8, Size: 12]
	class Object[] PlaneAvatarClassCache;//[Offset: 0x1f8, Size: 12]
	MeshComponent* PlaneBodyMesh;//[Offset: 0x204, Size: 4]
	ItemDefineID synData;//[Offset: 0x208, Size: 24]
	BackpackPlaneAvatarHandle* PlaneAvatarHandle;//[Offset: 0x2b8, Size: 4]
	void PreChangePlaneAvatar(int InItemID);// 0x20eba94
	void PostChangePlaneAvatar();// 0x20eba80
	void PlaneChangeAvatarAsyncLoadComplete(class Object InLoadClass, int InItemID);// 0x20eb9c4
	void OnRep_PlaneAvatarChanged();// 0x20eb9b0
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x208ae80
	BackpackPlaneAvatarHandle* GetPlaneAvatarHandle(int ItemId);// 0x2bbd2f4
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance);// 0x20eb930
	void AsyncLoadPlaneAvatarDone(int InItemID);// 0x20eb8b8
	void AsyncChangePlaneAvatar(int InItemID);// 0x20eb840

--------------------------------
Class: BackpackPlaneAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	PlaneAvatarData[] PlaneAvatarMats;//[Offset: 0xa0, Size: 12]
	SkeletalMesh* PlaneSkletalMesh;//[Offset: 0xb0, Size: 40]
	StaticMesh* PlaneStaticMesh;//[Offset: 0xd8, Size: 40]
	FName[] NeedDestroyEffectNames;//[Offset: 0x100, Size: 12]
	PlaneEffectData[] PlaneEffectDataList;//[Offset: 0x10c, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f6fd5c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f6f938
	bool HandleDrop(int InCount, enum Reason);// 0x1f6f354
	bool HandleDisuse(enum Reason);// 0x1f608bc
	BackpackComponent* GetBackpackComponent();// 0x1f722e8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1f72224

--------------------------------
Class: PlaneAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PlaneEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x60, Size: 12]

--------------------------------
Class: PlaneAvatarHandleBase_BP_C.BackpackPlaneAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	class Character* PlaneActorClass;//[Offset: 0x118, Size: 4]

--------------------------------
Class: BP_Lobby_Grenade_C.Actor.Object
	void SetAvatarReady();// 0x2bbd2f4
	void UserConstructionScript();// 0x2bbd2f4
	GrenadeAvatarComponent_BP_C* GrenadeAvatarComponent_BP;//[Offset: 0x2e0, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e4, Size: 4]
	bool IsAvatarReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int grenadeResId;//[Offset: 0x2ec, Size: 4]

--------------------------------
Class: GrenadeAvatarComponent_BP_C.GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x350, Size: 4]
	int GetDefaultAvatarID(int InAvatarID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bbd2f4
	FString GetItemAvatarHandlePath(int ItemId, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x2bbd2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x2bbd2f4
	void GrenadeAvatarEquiped();// 0x2bbd2f4
	void ReceiveBeginPlay();// 0x2bbd2f4
	void ExecuteUbergraph_GrenadeAvatarComponent_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2bbd2f4
	ParticleSystem* ExplodeEffect;//[Offset: 0x358, Size: 40]
	AkAudioEvent* ExplodeSound;//[Offset: 0x380, Size: 40]
	AkAudioEvent* GrenadeFuzeAkSoundEvent;//[Offset: 0x3a8, Size: 40]
	AkAudioEvent* GrenadeThrowAkSoundEvent;//[Offset: 0x3d0, Size: 40]
	AkAudioEvent* GrenadeWallCollideAkSoundEvent;//[Offset: 0x3f8, Size: 40]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xb0, Size: 496]
	class AnimInstance* animBP;//[Offset: 0x2a0, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x2a8, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2d0, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2dc, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x2e8, Size: 4]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x1f8dbb8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x1f8db9c
	bool IsVirtualAvatarHandle();// 0x1f8db6c
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x1f8daf4
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x1f8da20
	int GetSubSlotID();// 0x1f8d9f0
	int GetSlotID();// 0x1f8d9c0
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x1f8d954
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x1f8d78c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x1f8d720
	class Object GetAnimationBP();// 0x1f8d6f0
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x1f8d5dc

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x2c, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1b0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1bc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1c8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1d8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_Rifle_SCAR_10000_C.BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.Actor.Object
	void UserConstructionScript();// 0x2bbd2f4
	LobbyWeaponAnimList_Rifle_C* LobbyWeaponAnimList_Rifle;//[Offset: 0x7e8, Size: 4]

--------------------------------
Class: LobbyWeaponAnimList_Rifle_C.AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
